"ab6b0ea05473554c9829fd173becfedda20a73b1"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#5=[nil nil ((2832 . 2833)) nil (24167 38294 248505 0) 0 nil]) ((#(";" 0 1 (fontified t)) . -2832) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) 2833 (t 24167 38292 327579 825000)) nil (24167 38294 248554 0) 0 nil]) ((2832 . 2833)) nil (24167 38292 319784 0) 0 nil]) ((2829 . 2831)) nil (24167 38292 319789 0) 0 nil]) ((2828 . 2829)) nil (24167 38292 319791 0) 0 nil]) ((2825 . 2827) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -2825) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (2819 . 2826) (2818 . 2820) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -2818) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (2818 . 2819) (2817 . 2819) (#("(" 0 1 (fontified nil)) . -2817) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (2816 . 2818)) nil (24167 38292 319815 0) 0 nil]) ((2806 . 2816)) nil (24167 38292 319818 0) 0 nil]) ((#("t" 0 1 (fontified t)) . -2805) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -2806) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) 2807) nil (24167 38292 319879 0) 0 nil]) ((2804 . 2807) (2803 . 2805) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -2803) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (2803 . 2804)) nil (24167 38292 319886 0) 0 nil]) ((apply yas--snippet-revive 2797 2803 #1=#s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #1#) (2797 . 2803) (#("Custom" 0 6 (fontified nil)) . 2797) (2797 . 2803) (#("Custom" 0 6 (fontified nil)) . -2797) (2797 . 2803) (#("Cu" 0 2 (fontified t face font-lock-type-face)) . -2797) (undo-tree-id1216 . -2) (undo-tree-id1217 . -2) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -2) (undo-tree-id1226 . -2) (undo-tree-id1227 . -2) (undo-tree-id1228 . -2) (undo-tree-id1229 . -2) (undo-tree-id1230 . -2) (undo-tree-id1231 . -2) (undo-tree-id1232 . -2) (undo-tree-id1233 . -2) 2799) nil (24167 38292 319912 0) 0 nil]) ((2797 . 2799)) nil (24167 38292 319915 0) 0 nil]) ((2795 . 2797)) nil (24167 38292 319916 0) 0 nil]) ((apply yas--snippet-revive 2786 2795 #2=#s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #2#) (2786 . 2795) (#("ErrorKind" 0 9 (fontified nil)) . 2786) (2786 . 2795) (#("ErrorKind" 0 9 (fontified nil)) . -2786) (2786 . 2795) (#("ErrorK" 0 6 (fontified t face font-lock-type-face)) . -2786) (undo-tree-id1234 . -6) (undo-tree-id1235 . -5) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -2) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -4) (undo-tree-id1256 . -4) (undo-tree-id1257 . -4) (undo-tree-id1258 . -5) (undo-tree-id1259 . -5) (undo-tree-id1260 . -5) (undo-tree-id1261 . -5) (undo-tree-id1262 . -5) (undo-tree-id1263 . -6) (undo-tree-id1264 . -6) (undo-tree-id1265 . -6) (undo-tree-id1266 . -6) (undo-tree-id1267 . -6) 2792) nil (24167 38292 319963 0) 0 nil]) ((2786 . 2792)) nil (24167 38292 319966 0) 0 nil]) ((#("Err:" 0 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t)) . -2786) (undo-tree-id1268 . -4) (undo-tree-id1269 . -3) (undo-tree-id1270 . -3) (undo-tree-id1271 . -3) (undo-tree-id1272 . -4) (undo-tree-id1273 . -4) (undo-tree-id1274 . -4) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4) (undo-tree-id1279 . -4) (undo-tree-id1280 . -4) (undo-tree-id1281 . -4) (undo-tree-id1282 . -4) (undo-tree-id1283 . -4) (undo-tree-id1284 . -4) (undo-tree-id1285 . -4) (undo-tree-id1286 . -4) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (undo-tree-id1291 . -4) (undo-tree-id1292 . -4) (undo-tree-id1293 . -4) (undo-tree-id1294 . -4) (undo-tree-id1295 . -4) (undo-tree-id1296 . -4) 2790) nil (24167 38292 320005 0) 0 nil]) ((#(":" 0 1 (fontified t)) . -2790) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) 2791) nil (24167 38292 320032 0) 0 nil]) ((#("C" 0 1 (fontified t face font-lock-type-face)) . -2791) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) 2792) nil (24167 38292 320047 0) 0 nil]) ((2789 . 2792)) nil (24167 38292 320048 0) 0 nil]) ((apply yas--snippet-revive 2786 2789 #3=#s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #3#) (2786 . 2789) (#("Err" 0 3 (fontified nil)) . 2786) (2786 . 2789) (#("Err" 0 3 (fontified t face font-lock-type-face)) . -2786) (undo-tree-id1328 . -3) (undo-tree-id1329 . -3) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -2) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -2) (undo-tree-id1347 . -3) (undo-tree-id1348 . -3) (undo-tree-id1349 . -3) (undo-tree-id1350 . -3) (undo-tree-id1351 . -3) (undo-tree-id1352 . -3) (undo-tree-id1353 . -3) (undo-tree-id1354 . -3) 2789) nil (24167 38292 320088 0) 0 nil]) ((2786 . 2789)) nil (24167 38292 320090 0) 0 nil]) ((2783 . 2786) (t 24167 38198 452520 433000)) nil (24167 38292 320091 0) 0 nil] [nil ([nil nil ((#("
" 0 1 (fontified t)) . 281) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1)) ((281 . 282) (t 24167 38194 420261 809000)) (24167 38194 405709 0) 0 nil]) ((#("    Custom(String)," 0 4 (fontified t) 4 10 (fontified t face font-lock-type-face) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 17 (fontified t face font-lock-type-face) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t)) . 281) (undo-tree-id1156 . -4) (undo-tree-id1157 . -10) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -19) (t 24167 38145 735991 298000)) ((281 . 300)) (24167 38197 203371 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 304) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1)) nil (24167 38197 713363 0) 0 nil]) ((#("#[derive(Debug)]" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 2 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 9 14 (fontified t face font-lock-preprocessor-face) 14 15 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face))) . 304) (undo-tree-id1075 . -9) (undo-tree-id1076 . -14) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -16) (undo-tree-id1083 . -16) (undo-tree-id1084 . -15) (undo-tree-id1085 . -16) (undo-tree-id1086 . -15) (undo-tree-id1087 . -16) (undo-tree-id1088 . -15) (undo-tree-id1089 . -16) (undo-tree-id1090 . -15) (undo-tree-id1091 . -16) (undo-tree-id1092 . -15) (undo-tree-id1093 . -16) (undo-tree-id1094 . -15) (undo-tree-id1095 . -16) (undo-tree-id1096 . -1) (undo-tree-id1097 . -2) (undo-tree-id1098 . -16) (undo-tree-id1099 . -15) (undo-tree-id1100 . -15) (undo-tree-id1101 . -14) (undo-tree-id1102 . -15) (undo-tree-id1103 . -14) (undo-tree-id1104 . -15) (undo-tree-id1105 . -14) (undo-tree-id1106 . -15) (undo-tree-id1107 . -14) (undo-tree-id1108 . -15) (undo-tree-id1109 . -14) (undo-tree-id1110 . -15) (undo-tree-id1111 . -14) (undo-tree-id1112 . -15) (undo-tree-id1113 . -8) (undo-tree-id1114 . -9) (undo-tree-id1115 . -15) (undo-tree-id1116 . -14) (undo-tree-id1117 . -14) (undo-tree-id1118 . -14) (undo-tree-id1119 . -13) (undo-tree-id1120 . -13) (undo-tree-id1121 . -13) (undo-tree-id1122 . -13) (undo-tree-id1123 . -13) (undo-tree-id1124 . -13) (undo-tree-id1125 . -13) (undo-tree-id1126 . -13) (undo-tree-id1127 . -13) (undo-tree-id1128 . -13) (undo-tree-id1129 . -13) (undo-tree-id1130 . -13) (undo-tree-id1131 . -13) (undo-tree-id1132 . -9) (undo-tree-id1133 . -14) (undo-tree-id1134 . -9) (undo-tree-id1135 . -9) (undo-tree-id1136 . -9) (undo-tree-id1137 . -9) (undo-tree-id1138 . -9) (undo-tree-id1139 . -9) (undo-tree-id1140 . -9) (undo-tree-id1141 . -9) (undo-tree-id1142 . -9) (undo-tree-id1143 . -9) (undo-tree-id1144 . -9) (undo-tree-id1145 . -9) (undo-tree-id1146 . -9) (undo-tree-id1147 . -9) (undo-tree-id1148 . -9) (undo-tree-id1149 . -9) (undo-tree-id1150 . -9) (undo-tree-id1151 . -9) (undo-tree-id1152 . -16) (t 24167 38107 839804 530000)) nil (24167 38145 720564 0) 0 nil]) ((nil rear-nonsticky nil 543 . 544) (nil fontified nil 383 . 544) (383 . 544)) nil (24167 38107 828858 0) 0 nil]) ((381 . 383)) nil (24167 38107 828863 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 343) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1)) nil (24167 38107 828885 0) 0 nil]) ((#("    // was NomErrorKind, now ErrorKind" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 38 (fontified t face font-lock-comment-face)) . 343) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -38) (t 24167 38019 100850 641000)) nil (24167 38107 828892 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 303) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1)) nil (24167 38019 85845 0) 0 nil]) ((#("}" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . 303) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1)) nil (24167 38019 85864 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 303) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1)) nil (24167 38019 85876 0) 0 nil]) ((#("    Context(&'static str)," 0 4 (fontified t) 4 11 (fontified t face font-lock-type-face) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 14 (fontified t) 14 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 24 (fontified t face font-lock-type-face) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 26 (fontified t)) . 303) (undo-tree-id763 . -13) (undo-tree-id764 . -14) (undo-tree-id765 . -13) (undo-tree-id766 . -14) (undo-tree-id767 . -13) (undo-tree-id768 . -14) (undo-tree-id769 . -13) (undo-tree-id770 . -14) (undo-tree-id771 . -13) (undo-tree-id772 . -14) (undo-tree-id773 . -13) (undo-tree-id774 . -14) (undo-tree-id775 . -13) (undo-tree-id776 . -14) (undo-tree-id777 . -13) (undo-tree-id778 . -14) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -26)) nil (24167 38019 85901 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 303) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1)) nil (24167 38019 85906 0) 0 nil]) ((#("    Nom(NomErrorKind)," 0 4 (fontified t) 4 7 (fontified t face font-lock-type-face) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 20 (fontified t face font-lock-type-face) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 22 (fontified t)) . 303) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -22)) nil (24167 38019 85911 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 303) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1)) nil (24167 38019 85942 0) 0 nil]) ((#("pub enum ErrorKind {" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-1-face))) . 303) (undo-tree-id816 . -19) (undo-tree-id817 . -20) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -3) (undo-tree-id839 . -20)) nil (24167 38019 85970 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 303) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1)) nil (24167 38019 85989 0) 0 nil]) ((#("#[derive(Debug)]" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 2 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 9 14 (fontified t face font-lock-preprocessor-face) 14 15 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face))) . 303) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -9) (undo-tree-id868 . -14) (undo-tree-id869 . -16)) nil (24167 38019 86006 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 303) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1)) nil (24167 38019 86123 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 342) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1)) nil (24167 38019 86131 0) 0 nil]) ((#("    // ooh that's why `nom::error::ErrorKind` was aliased to `NomErrorKind`:)" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 77 (fontified t face font-lock-comment-face)) . 342) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -15) (undo-tree-id981 . -16) (undo-tree-id982 . -15) (undo-tree-id983 . -16) (undo-tree-id984 . -15) (undo-tree-id985 . -16) (undo-tree-id986 . -77)) nil (24167 38019 86142 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 304) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1)) nil (24167 38019 86148 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 304) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1)) nil (24167 38019 86163 0) 0 nil]) ((#("}" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . 304) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1)) nil (24167 38019 86176 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 304) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1)) nil (24167 38019 86187 0) 0 nil]) ((#("    pub errors: Vec<(I, NomErrorKind)>," 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 16 (fontified t) 16 19 (fontified t face font-lock-type-face) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 22 (fontified t face font-lock-type-face) 22 24 (fontified t) 24 36 (fontified t face font-lock-type-face) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 39 (fontified t)) . 304) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -39)) nil (24167 38019 86195 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 304) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1)) nil (24167 38019 86203 0) 0 nil]) ((#("pub struct Error<I> {" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 16 (fontified t face font-lock-type-face) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-1-face))) . 304) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -20) (undo-tree-id1039 . -21) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -21)) nil (24167 38019 86214 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 304) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1)) nil (24167 38019 86221 0) 0 nil]) ((#("#[derive(Debug)]" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 2 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 9 14 (fontified t face font-lock-preprocessor-face) 14 15 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face))) . 304) (undo-tree-id1049 . -9) (undo-tree-id1050 . -14) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -16) (t 24167 37931 864444 684000)) nil (24167 38019 86231 0) 0 nil] [nil ([nil nil ((#("    " 0 4 (fontified nil)) . -670) (undo-tree-id700 . -4) (undo-tree-id701 . -4) (undo-tree-id702 . -4) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (674 . 675)) ((#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 674) (670 . 674)) (24167 37966 417215 0) 0 nil]) ((669 . 674) (t 24167 37931 864444 684000)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 669) (undo-tree-id715 . -5) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -5) (undo-tree-id719 . -5) (undo-tree-id720 . -5) (undo-tree-id721 . -5) (undo-tree-id722 . -5) (undo-tree-id723 . -5) (undo-tree-id724 . -5) (undo-tree-id725 . -5) (undo-tree-id726 . -5) (undo-tree-id727 . -5) (undo-tree-id728 . -5) (undo-tree-id729 . -5) (undo-tree-id730 . -5) (undo-tree-id731 . -5) (undo-tree-id732 . -1) (undo-tree-id733 . -5) (undo-tree-id734 . -5) (undo-tree-id735 . -5)) (24167 37966 417515 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1373) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1)) nil (24167 37966 900866 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1373) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1)) nil (24167 37931 850839 0) 0 nil]) ((#("                    // TODO: review for off-by-one errors" 0 20 (fontified t) 20 23 (fontified t face font-lock-comment-delimiter-face) 23 27 (fontified t face fic-face) 27 57 (fontified t face font-lock-comment-face)) . 1373) (undo-tree-id673 . -23) (undo-tree-id674 . -27) (undo-tree-id675 . -23) (undo-tree-id676 . -27) (undo-tree-id677 . -57)) nil (24167 37931 850847 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1373) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1)) nil (24167 37931 850861 0) 0 nil]) ((#("                    // see diagram further in article." 0 20 (fontified t) 20 23 (fontified t face font-lock-comment-delimiter-face) 23 54 (fontified t face font-lock-comment-face)) . 1373) (undo-tree-id689 . -54)) nil (24167 37931 850863 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1332) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1)) nil (24167 37931 850874 0) 0 nil]) ((#("                // decide which part of `s` we're going to show." 0 16 (fontified t) 16 19 (fontified t face font-lock-comment-delimiter-face) 19 64 (fontified t face font-lock-comment-face)) . 1332) (undo-tree-id699 . -64) (t 24167 37907 1909 695000)) nil (24167 37931 850877 0) 0 nil]) ((3825 . 3826) (t 24167 37905 946995 95000)) nil (24167 37906 988751 0) 0 nil]) ((nil rear-nonsticky nil 3824 . 3825) (nil fontified nil 673 . 3825) (673 . 3825)) nil (24167 37905 933793 0) 0 nil]) ((#("impl<'a> fmt::Debug for Error<&'a [u8]> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, \"/!\\\\ ersatz parsing error\\n\")?;
        for (input, kind) in self.errors.iter().rev() {
            let prefix = match kind {
                ErrorKind::Context(ctx) => format!(\"...in {}\", ctx),
                ErrorKind::Nom(err) => format!(\"nom error {:?}\", err),
            };

            let maxlen = 40;
            let input = if input.len() > maxlen {
                &input[input.len() - maxlen..]
            } else {
                input
            };

            use hex_slice::AsHex;
            write!(f, \"{:<30} {:x}\\n\", prefix, input.as_hex())?;
        }
        Ok(())
    }
}
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t) 9 12 (fontified t face font-lock-constant-face) 12 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 20 (fontified t) 20 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 29 (fontified t face font-lock-type-face) 29 30 (fontified t face (rainbow-delimiters-depth-1-face)) 30 32 (fontified t) 32 33 (fontified t face font-lock-variable-name-face) 33 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 37 (fontified t face font-lock-type-face) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 46 (fontified t) 46 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 52 (fontified t face font-lock-function-name-face) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 60 (fontified t) 60 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 67 (fontified t face font-lock-keyword-face) 67 68 (fontified t) 68 71 (fontified t face font-lock-constant-face) 71 73 (fontified t) 73 82 (fontified t face font-lock-type-face) 82 83 (fontified t face (rainbow-delimiters-depth-2-face)) 83 85 (fontified t) 85 86 (syntax-table #4=(1) fontified t) 86 87 (fontified t) 87 90 (fontified t face font-lock-constant-face) 90 92 (fontified t) 92 98 (fontified t face font-lock-type-face) 98 99 (fontified t) 99 100 (fontified t face (rainbow-delimiters-depth-2-face)) 100 109 (fontified t) 109 115 (fontified t face rust-builtin-formatting-macro-face) 115 116 (fontified t face (rainbow-delimiters-depth-3-face)) 116 119 (fontified t) 119 148 (fontified t face font-lock-string-face) 148 149 (fontified t face (rainbow-delimiters-depth-3-face)) 149 150 (fontified t face rust-question-mark-face) 150 160 (fontified t) 160 163 (fontified t face font-lock-keyword-face) 163 164 (fontified t) 164 165 (fontified t face (rainbow-delimiters-depth-3-face)) 165 176 (fontified t) 176 177 (fontified t face (rainbow-delimiters-depth-3-face)) 177 178 (fontified t) 178 180 (fontified t face font-lock-keyword-face) 180 181 (fontified t) 181 185 (fontified t face font-lock-keyword-face) 185 197 (fontified t) 197 198 (fontified t face (rainbow-delimiters-depth-3-face)) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 203 (fontified t) 203 204 (fontified t face (rainbow-delimiters-depth-3-face)) 204 205 (fontified t face (rainbow-delimiters-depth-3-face)) 205 206 (fontified t) 206 207 (fontified t face (rainbow-delimiters-depth-3-face)) 207 220 (fontified t) 220 223 (fontified t face font-lock-keyword-face) 223 224 (fontified t) 224 230 (fontified t face font-lock-variable-name-face) 230 233 (fontified t) 233 238 (fontified t face font-lock-keyword-face) 238 244 (fontified t) 244 245 (fontified t face (rainbow-delimiters-depth-4-face)) 245 262 (fontified t) 262 271 (fontified t face font-lock-type-face) 271 273 (fontified t) 273 280 (fontified t face font-lock-type-face) 280 281 (fontified t face (rainbow-delimiters-depth-5-face)) 281 284 (fontified t) 284 285 (fontified t face (rainbow-delimiters-depth-5-face)) 285 287 (fontified t) 287 288 (syntax-table #4# fontified t) 288 289 (fontified t) 289 296 (fontified t face rust-builtin-formatting-macro-face) 296 297 (fontified t face (rainbow-delimiters-depth-5-face)) 297 304 (fontified t face font-lock-string-face) 304 306 (fontified t face rust-string-interpolation-face) 306 307 (fontified t face font-lock-string-face) 307 312 (fontified t) 312 313 (fontified t face (rainbow-delimiters-depth-5-face)) 313 331 (fontified t) 331 340 (fontified t face font-lock-type-face) 340 342 (fontified t) 342 345 (fontified t face font-lock-type-face) 345 346 (fontified t face (rainbow-delimiters-depth-5-face)) 346 349 (fontified t) 349 350 (fontified t face (rainbow-delimiters-depth-5-face)) 350 352 (fontified t) 352 353 (syntax-table #4# fontified t) 353 354 (fontified t) 354 361 (fontified t face rust-builtin-formatting-macro-face) 361 362 (fontified t face (rainbow-delimiters-depth-5-face)) 362 373 (fontified t face font-lock-string-face) 373 377 (fontified t face rust-string-interpolation-face) 377 378 (fontified t face font-lock-string-face) 378 383 (fontified t) 383 384 (fontified t face (rainbow-delimiters-depth-5-face)) 384 398 (fontified t) 398 399 (fontified t face (rainbow-delimiters-depth-4-face)) 399 414 (fontified t) 414 417 (fontified t face font-lock-keyword-face) 417 418 (fontified t) 418 421 (fontified t face font-lock-variable-name-face) 421 424 (face font-lock-variable-name-face fontified t) 424 427 (fontified t) 427 429 (face highlight-numbers-number fontified t) 429 431 (fontified t) 431 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 452 (fontified t face font-lock-variable-name-face) 452 455 (fontified t) 455 457 (fontified t face font-lock-keyword-face) 457 467 (fontified t) 467 468 (fontified t face (rainbow-delimiters-depth-4-face)) 468 469 (fontified t face (rainbow-delimiters-depth-4-face)) 469 470 (fontified t) 470 471 (syntax-table #4# fontified t) 471 479 (fontified t) 479 480 (fontified t face (rainbow-delimiters-depth-4-face)) 480 500 (fontified t) 500 503 (fontified t) 503 504 (fontified t face (rainbow-delimiters-depth-5-face)) 504 513 (fontified t) 513 514 (fontified t face (rainbow-delimiters-depth-6-face)) 514 515 (fontified t face (rainbow-delimiters-depth-6-face)) 515 526 (fontified t) 526 527 (fontified t face (rainbow-delimiters-depth-5-face)) 527 528 (fontified t) 528 540 (fontified t) 540 541 (fontified t face (rainbow-delimiters-depth-4-face)) 541 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 548 (fontified t face (rainbow-delimiters-depth-4-face)) 548 583 (fontified t) 583 584 (fontified t face (rainbow-delimiters-depth-4-face)) 584 599 (fontified t) 599 602 (fontified t face font-lock-keyword-face) 602 603 (fontified t) 603 612 (fontified t face font-lock-constant-face) 612 614 (fontified t) 614 619 (fontified t face font-lock-type-face) 619 633 (fontified t) 633 639 (fontified t face rust-builtin-formatting-macro-face) 639 640 (fontified t face (rainbow-delimiters-depth-4-face)) 640 643 (fontified t) 643 644 (fontified t face font-lock-string-face) 644 646 (fontified t face rust-string-interpolation-face) 646 647 (syntax-table #4# fontified t face rust-string-interpolation-face) 647 650 (fontified t face rust-string-interpolation-face) 650 651 (fontified t face font-lock-string-face) 651 655 (fontified t face rust-string-interpolation-face) 655 658 (fontified t face font-lock-string-face) 658 680 (fontified t) 680 681 (fontified t face (rainbow-delimiters-depth-5-face)) 681 682 (fontified t face (rainbow-delimiters-depth-5-face)) 682 683 (fontified t face (rainbow-delimiters-depth-4-face)) 683 684 (fontified t face rust-question-mark-face) 684 694 (fontified t) 694 695 (fontified t face (rainbow-delimiters-depth-3-face)) 695 704 (fontified t) 704 706 (fontified t face font-lock-type-face) 706 707 (fontified t face (rainbow-delimiters-depth-3-face)) 707 708 (fontified t face (rainbow-delimiters-depth-4-face)) 708 709 (fontified t face (rainbow-delimiters-depth-4-face)) 709 710 (fontified t face (rainbow-delimiters-depth-3-face)) 710 715 (fontified t) 715 716 (fontified t face (rainbow-delimiters-depth-2-face)) 716 717 (fontified t) 717 718 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face)) 718 719 (fontified t)) . -673) (undo-tree-id585 . -711) (undo-tree-id586 . -711) (undo-tree-id587 . -719) (undo-tree-id588 . -719) (undo-tree-id589 . -717) (undo-tree-id590 . -717) (undo-tree-id591 . -719) (undo-tree-id592 . -719) (undo-tree-id593 . -431) (undo-tree-id594 . -719) (undo-tree-id595 . -12) (undo-tree-id596 . -696) (undo-tree-id597 . -696) (undo-tree-id598 . -686) (undo-tree-id599 . -686) (undo-tree-id600 . -431) (undo-tree-id601 . -431) (undo-tree-id602 . -481) (undo-tree-id603 . -481) (undo-tree-id604 . -528) (undo-tree-id605 . -528) (undo-tree-id606 . -549) (undo-tree-id607 . -549) (undo-tree-id608 . -571) (undo-tree-id609 . -571) (undo-tree-id610 . -586) (undo-tree-id611 . -586) (undo-tree-id612 . -587) (undo-tree-id613 . -587) (undo-tree-id614 . -621) (undo-tree-id615 . -621) (undo-tree-id616 . -603) (undo-tree-id617 . -612) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -262) (undo-tree-id621 . -271) (undo-tree-id622 . -239) (undo-tree-id623 . -243) (undo-tree-id624 . -331) (undo-tree-id625 . -340) (undo-tree-id626 . -239) (undo-tree-id627 . -243) (undo-tree-id628 . -674) (undo-tree-id629 . -680) (undo-tree-id630 . -12) (undo-tree-id631 . -12) (undo-tree-id632 . -12) (undo-tree-id633 . -12) (undo-tree-id634 . -12) (undo-tree-id635 . -719) (undo-tree-id636 . -401) (undo-tree-id637 . -401) (undo-tree-id638 . -401) (undo-tree-id639 . -401) (undo-tree-id640 . -401) (undo-tree-id641 . -401) (undo-tree-id642 . -586) (undo-tree-id643 . -586) (undo-tree-id644 . -586) (undo-tree-id645 . -586) (undo-tree-id646 . -586) (undo-tree-id647 . -719) (undo-tree-id648 . -719) (undo-tree-id649 . -719) (undo-tree-id650 . -719) (undo-tree-id651 . -719) (undo-tree-id652 . -717) (undo-tree-id653 . -717) (undo-tree-id654 . -717) (undo-tree-id655 . -717) (undo-tree-id656 . -717) (undo-tree-id657 . -719) (undo-tree-id658 . -719) (undo-tree-id659 . -719) (undo-tree-id660 . -719) 1392 (t 24167 37852 439474 812000)) nil (24167 37905 933890 0) 0 nil]) ((#("
" 0 1 (fontified t rear-nonsticky t)) . -88) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) 89 (t 24167 37851 614455 762000)) nil (24167 37852 434448 0) 0 nil]) ((nil rear-nonsticky nil 88 . 89) (nil fontified nil 75 . 89) (75 . 89)) nil (24167 37851 601514 0) 0 nil]) ((74 . 75) (t 24167 37841 399025 242000)) nil (24167 37851 601519 0) 0 nil]) ((nil rear-nonsticky nil 1376 . 1377) (nil fontified nil 659 . 1377) (659 . 1377)) nil (24167 37841 394087 0) 0 nil]) ((657 . 659) (t 24167 37800 276735 43000)) nil (24167 37841 394094 0) 0 nil]) ((#("    " 0 4 (fontified nil)) . -1227) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (1231 . 1232)) nil (24167 37800 271914 0) 0 nil]) ((1226 . 1231)) nil (24167 37800 271919 0) 0 nil]) ((1224 . 1225) (1224 . 1225) (t 24167 37796 24238 988000)) nil (24167 37800 271922 0) 0 nil]) ((nil rear-nonsticky nil 1223 . 1224) (nil fontified nil 372 . 1224) (372 . 1224)) nil (24167 37796 19053 0) 0 nil]) ((371 . 372)) nil (24167 37796 19058 0) 0 nil]) ((#("
impl<I> Error<I> {
    pub fn custom(input: I, msg: String) -> Self {
        Self {
            errors: vec![(input, ErrorKind::Custom(msg))],
        }
    }
}

impl<I> NomParseError<I> for Error<I> {
    fn from_error_kind(input: I, kind: NomErrorKind) -> Self {
        let errors = vec![(input, kind)];
        Self { errors }
    }

    fn append(input: I, kind: NomErrorKind, mut other: Self) -> Self {
        other.errors.push((input, kind));
        other
    }
}" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t) 9 14 (fontified t face font-lock-type-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 37 (fontified t face font-lock-function-name-face) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 43 (fontified t face font-lock-variable-name-face) 43 45 (fontified t) 45 46 (fontified t face font-lock-type-face) 46 48 (fontified t) 48 51 (fontified t face font-lock-variable-name-face) 51 53 (fontified t) 53 59 (fontified t face font-lock-type-face) 59 60 (fontified t face (rainbow-delimiters-depth-2-face)) 60 62 (fontified t) 62 63 (syntax-table #4# fontified t) 63 64 (fontified t) 64 68 (fontified t face font-lock-type-face) 68 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-2-face)) 70 79 (fontified t) 79 83 (fontified t face font-lock-type-face) 83 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-3-face)) 85 98 (fontified t) 98 104 (fontified t face font-lock-variable-name-face) 104 106 (fontified t) 106 110 (fontified t face font-lock-preprocessor-face) 110 111 (fontified t face (rainbow-delimiters-depth-4-face)) 111 112 (fontified t face (rainbow-delimiters-depth-5-face)) 112 118 (fontified t) 118 119 (fontified t) 119 128 (fontified t face font-lock-type-face) 128 130 (fontified t) 130 136 (fontified t face font-lock-type-face) 136 137 (fontified t face (rainbow-delimiters-depth-6-face)) 137 140 (fontified t) 140 141 (fontified t face (rainbow-delimiters-depth-6-face)) 141 142 (fontified t face (rainbow-delimiters-depth-5-face)) 142 143 (fontified t face (rainbow-delimiters-depth-4-face)) 143 145 (fontified t) 145 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-3-face)) 154 155 (fontified t) 155 159 (fontified t) 159 160 (fontified t face (rainbow-delimiters-depth-2-face)) 160 161 (fontified t) 161 162 (fontified t face (rainbow-delimiters-depth-1-face)) 162 163 (fontified t) 163 164 (fontified t) 164 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t face (rainbow-delimiters-depth-1-face)) 169 170 (fontified t face font-lock-type-face) 170 171 (fontified t face (rainbow-delimiters-depth-1-face)) 171 172 (fontified t) 172 185 (fontified t face font-lock-type-face) 185 186 (fontified t face (rainbow-delimiters-depth-1-face)) 186 187 (fontified t face font-lock-type-face) 187 188 (fontified t face (rainbow-delimiters-depth-1-face)) 188 189 (fontified t) 189 192 (fontified t face font-lock-keyword-face) 192 193 (fontified t) 193 198 (fontified t face font-lock-type-face) 198 199 (fontified t face (rainbow-delimiters-depth-1-face)) 199 200 (fontified t face font-lock-type-face) 200 201 (fontified t face (rainbow-delimiters-depth-1-face)) 201 202 (fontified t) 202 203 (fontified t face (rainbow-delimiters-depth-1-face)) 203 208 (fontified t) 208 210 (fontified t face font-lock-keyword-face) 210 211 (fontified t) 211 226 (fontified t face font-lock-function-name-face) 226 227 (fontified t face (rainbow-delimiters-depth-2-face)) 227 232 (fontified t face font-lock-variable-name-face) 232 234 (fontified t) 234 235 (fontified t face font-lock-type-face) 235 237 (fontified t) 237 241 (fontified t face font-lock-variable-name-face) 241 243 (fontified t) 243 255 (fontified t face font-lock-type-face) 255 256 (fontified t face (rainbow-delimiters-depth-2-face)) 256 258 (fontified t) 258 259 (syntax-table #4# fontified t) 259 260 (fontified t) 260 264 (fontified t face font-lock-type-face) 264 265 (fontified t) 265 266 (fontified t face (rainbow-delimiters-depth-2-face)) 266 275 (fontified t) 275 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 285 (fontified t face font-lock-variable-name-face) 285 288 (fontified t) 288 292 (fontified t face font-lock-preprocessor-face) 292 293 (fontified t face (rainbow-delimiters-depth-3-face)) 293 294 (fontified t face (rainbow-delimiters-depth-4-face)) 294 305 (fontified t) 305 306 (fontified t face (rainbow-delimiters-depth-4-face)) 306 307 (fontified t face (rainbow-delimiters-depth-3-face)) 307 308 (fontified t) 308 309 (fontified t) 309 317 (fontified t) 317 321 (fontified t face font-lock-type-face) 321 322 (fontified t) 322 323 (fontified t face (rainbow-delimiters-depth-3-face)) 323 331 (fontified t) 331 332 (fontified t face (rainbow-delimiters-depth-3-face)) 332 337 (fontified t) 337 338 (fontified t face (rainbow-delimiters-depth-2-face)) 338 344 (fontified t) 344 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 353 (fontified t face font-lock-function-name-face) 353 354 (fontified t face (rainbow-delimiters-depth-2-face)) 354 359 (fontified t face font-lock-variable-name-face) 359 361 (fontified t) 361 362 (fontified t face font-lock-type-face) 362 364 (fontified t) 364 368 (fontified t face font-lock-variable-name-face) 368 370 (fontified t) 370 382 (fontified t face font-lock-type-face) 382 384 (fontified t) 384 387 (fontified t face font-lock-keyword-face) 387 388 (fontified t) 388 393 (fontified t face font-lock-variable-name-face) 393 395 (fontified t) 395 399 (fontified t face font-lock-type-face) 399 400 (fontified t face (rainbow-delimiters-depth-2-face)) 400 402 (fontified t) 402 403 (syntax-table #4# fontified t) 403 404 (fontified t) 404 408 (fontified t face font-lock-type-face) 408 409 (fontified t) 409 410 (fontified t face (rainbow-delimiters-depth-2-face)) 410 416 (fontified t) 416 436 (fontified t) 436 437 (fontified t face (rainbow-delimiters-depth-3-face)) 437 438 (fontified t face (rainbow-delimiters-depth-4-face)) 438 449 (fontified t) 449 450 (fontified t face (rainbow-delimiters-depth-4-face)) 450 451 (fontified t face (rainbow-delimiters-depth-3-face)) 451 453 (fontified t) 453 471 (fontified t) 471 472 (fontified t face (rainbow-delimiters-depth-2-face)) 472 473 (fontified t) 473 474 (fontified t face (rainbow-delimiters-depth-1-face))) . 371) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -20) (undo-tree-id343 . -20) (undo-tree-id344 . -473) (undo-tree-id345 . -473) (undo-tree-id346 . -474) (undo-tree-id347 . -162) (undo-tree-id348 . -155) (undo-tree-id349 . -155) (undo-tree-id350 . -155) (undo-tree-id351 . -155) (undo-tree-id352 . -155) (undo-tree-id353 . -155) (undo-tree-id354 . -155) (undo-tree-id355 . -155) (undo-tree-id356 . -155) (undo-tree-id357 . -155) (undo-tree-id358 . -155) (undo-tree-id359 . -155) (undo-tree-id360 . -155) (undo-tree-id361 . -161) (undo-tree-id362 . -161) (undo-tree-id363 . -161) (undo-tree-id364 . -161) (undo-tree-id365 . -161) (undo-tree-id366 . -162) (undo-tree-id367 . -162) (undo-tree-id368 . -162) (undo-tree-id369 . -162) (undo-tree-id370 . -162) (undo-tree-id371 . -162) (undo-tree-id372 . -162) (undo-tree-id373 . -162) (undo-tree-id374 . -161) (undo-tree-id375 . -161) (undo-tree-id376 . -161) (undo-tree-id377 . -161) (undo-tree-id378 . -161) (undo-tree-id379 . -467) (undo-tree-id380 . -467) (undo-tree-id381 . -453) (undo-tree-id382 . -453) (undo-tree-id383 . -161) (undo-tree-id384 . -161) (undo-tree-id385 . -155) (undo-tree-id386 . -155) (undo-tree-id387 . -145) (undo-tree-id388 . -145) (undo-tree-id389 . -86) (undo-tree-id390 . -86) (undo-tree-id391 . -71) (undo-tree-id392 . -71) (undo-tree-id393 . -119) (undo-tree-id394 . -128) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -20) (undo-tree-id399 . -20) (undo-tree-id400 . -20) (undo-tree-id401 . -71) (undo-tree-id402 . -71) (undo-tree-id403 . -71) (undo-tree-id404 . -86) (undo-tree-id405 . -86) (undo-tree-id406 . -86) (undo-tree-id407 . -145) (undo-tree-id408 . -145) (undo-tree-id409 . -145) (undo-tree-id410 . -155) (undo-tree-id411 . -155) (undo-tree-id412 . -155) (undo-tree-id413 . -161) (undo-tree-id414 . -161) (undo-tree-id415 . -161) (undo-tree-id416 . -161) (undo-tree-id417 . -161) (undo-tree-id418 . -161) (undo-tree-id419 . -163) (undo-tree-id420 . -163) (undo-tree-id421 . -163) (undo-tree-id422 . -145) (undo-tree-id423 . -145) (undo-tree-id424 . -145) (undo-tree-id425 . -145) (undo-tree-id426 . -145) (undo-tree-id427 . -163) (undo-tree-id428 . -163) (undo-tree-id429 . -164) (undo-tree-id430 . -164) (undo-tree-id431 . -204) (undo-tree-id432 . -204) (undo-tree-id433 . -267) (undo-tree-id434 . -267) (undo-tree-id435 . -309) (undo-tree-id436 . -309) (undo-tree-id437 . -333) (undo-tree-id438 . -333) (undo-tree-id439 . -339) (undo-tree-id440 . -339) (undo-tree-id441 . -340) (undo-tree-id442 . -340) (undo-tree-id443 . -411) (undo-tree-id444 . -411) (undo-tree-id445 . -145) (undo-tree-id446 . -145) (undo-tree-id447 . -145) (undo-tree-id448 . -145) (undo-tree-id449 . -145) (undo-tree-id450 . -155) (undo-tree-id451 . -155) (undo-tree-id452 . -155) (undo-tree-id453 . -161) (undo-tree-id454 . -161) (undo-tree-id455 . -161) (undo-tree-id456 . -161) (undo-tree-id457 . -161) (undo-tree-id458 . -161) (undo-tree-id459 . -161) (undo-tree-id460 . -161) (undo-tree-id461 . -161) (undo-tree-id462 . -161) (undo-tree-id463 . -161) (undo-tree-id464 . -161) (undo-tree-id465 . -163) (undo-tree-id466 . -163) (undo-tree-id467 . -163) (undo-tree-id468 . -164) (undo-tree-id469 . -164) (undo-tree-id470 . -164) (undo-tree-id471 . -204) (undo-tree-id472 . -204) (undo-tree-id473 . -204) (undo-tree-id474 . -267) (undo-tree-id475 . -267) (undo-tree-id476 . -267) (undo-tree-id477 . -267) (undo-tree-id478 . -267) (undo-tree-id479 . -267) (undo-tree-id480 . -267) (undo-tree-id481 . -267) (undo-tree-id482 . -267) (undo-tree-id483 . -309) (undo-tree-id484 . -309) (undo-tree-id485 . -309) (undo-tree-id486 . -333) (undo-tree-id487 . -333) (undo-tree-id488 . -333) (undo-tree-id489 . -339) (undo-tree-id490 . -339) (undo-tree-id491 . -339) (undo-tree-id492 . -340) (undo-tree-id493 . -340) (undo-tree-id494 . -340) (undo-tree-id495 . -411) (undo-tree-id496 . -411) (undo-tree-id497 . -411) (undo-tree-id498 . -453) (undo-tree-id499 . -453) (undo-tree-id500 . -453) (undo-tree-id501 . -467) (undo-tree-id502 . -467) (undo-tree-id503 . -467) (undo-tree-id504 . -473) (undo-tree-id505 . -473) (undo-tree-id506 . -473) (undo-tree-id507 . -473) (undo-tree-id508 . -473) (undo-tree-id509 . -473) (undo-tree-id510 . -474) (undo-tree-id511 . -473) (undo-tree-id512 . -473) (undo-tree-id513 . -473) (undo-tree-id514 . -473) (undo-tree-id515 . -473) (undo-tree-id516 . -474) (undo-tree-id517 . -474) (undo-tree-id518 . -473) (undo-tree-id519 . -474) (undo-tree-id520 . -473) (undo-tree-id521 . -474) (undo-tree-id522 . -473) (undo-tree-id523 . -474) (undo-tree-id524 . -473) (undo-tree-id525 . -474) (undo-tree-id526 . -473) (undo-tree-id527 . -474) (undo-tree-id528 . -473) (undo-tree-id529 . -474) (undo-tree-id530 . -471) (undo-tree-id531 . -472) (undo-tree-id532 . -409) (undo-tree-id533 . -410) (undo-tree-id534 . -337) (undo-tree-id535 . -338) (undo-tree-id536 . -331) (undo-tree-id537 . -332) (undo-tree-id538 . -322) (undo-tree-id539 . -323) (undo-tree-id540 . -265) (undo-tree-id541 . -266) (undo-tree-id542 . -202) (undo-tree-id543 . -203) (undo-tree-id544 . -474) (undo-tree-id545 . -473) (undo-tree-id546 . -474) (undo-tree-id547 . -474) (undo-tree-id548 . -474) (undo-tree-id549 . -474) (undo-tree-id550 . -473) (undo-tree-id551 . -473) (undo-tree-id552 . -473) (undo-tree-id553 . -473) (undo-tree-id554 . -473) (undo-tree-id555 . -339) (undo-tree-id556 . -339) (undo-tree-id557 . -339) (undo-tree-id558 . -163) (undo-tree-id559 . -163) (undo-tree-id560 . -163) (t 24167 37656 100298 946000)) nil (24167 37796 19339 0) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((nil rear-nonsticky nil 421 . 422) (nil fontified nil 421 . 422) (nil fontified nil 420 . 421) (nil fontified nil 419 . 420) (nil fontified nil 415 . 419) (nil fontified nil 414 . 415) (nil fontified nil 413 . 414) (nil fontified nil 405 . 413) (nil fontified nil 403 . 405) (nil fontified nil 402 . 403) (nil fontified nil 401 . 402) (nil fontified nil 400 . 401) (nil fontified nil 397 . 400) (nil fontified nil 396 . 397) (nil fontified nil 390 . 396) (nil fontified nil 388 . 390) (nil fontified nil 379 . 388) (nil fontified nil 378 . 379) (nil fontified nil 372 . 378) (nil fontified nil 371 . 372) (nil fontified nil 370 . 371) (nil fontified nil 366 . 370) (nil fontified nil 364 . 366) (nil fontified nil 358 . 364) (nil fontified nil 345 . 358) (nil fontified nil 344 . 345) (nil fontified nil 343 . 344) (nil fontified nil 339 . 343) (nil fontified nil 330 . 339) (nil fontified nil 329 . 330) (nil fontified nil 328 . 329) (nil fontified nil 324 . 328) (nil fontified nil 323 . 324) (nil fontified nil 322 . 323) (nil fontified nil 320 . 322) (nil fontified nil 319 . 320) (nil fontified nil 313 . 319) (nil fontified nil 311 . 313) (nil fontified nil 308 . 311) (nil fontified nil 306 . 308) (nil fontified nil 305 . 306) (nil fontified nil 303 . 305) (nil fontified nil 298 . 303) (nil fontified nil 297 . 298) (nil fontified nil 291 . 297) (nil fontified nil 290 . 291) (nil fontified nil 288 . 290) (nil fontified nil 287 . 288) (nil fontified nil 284 . 287) (nil fontified nil 279 . 284) (nil fontified nil 278 . 279) (nil fontified nil 277 . 278) (nil fontified nil 276 . 277) (nil fontified nil 275 . 276) (nil fontified nil 274 . 275) (nil fontified nil 269 . 274) (nil fontified nil 268 . 269) (nil fontified nil 267 . 268) (nil fontified nil 266 . 267) (nil fontified nil 265 . 266) (nil fontified nil 261 . 265) (nil fontified nil 259 . 261) (nil fontified nil 258 . 259) (nil fontified nil 256 . 258) (nil fontified nil 255 . 256) (nil fontified nil 254 . 255) (nil fontified nil 242 . 254) (nil fontified nil 240 . 242) (nil fontified nil 239 . 240) (nil fontified nil 238 . 239) (nil fontified nil 237 . 238) (nil fontified nil 234 . 237) (nil fontified nil 232 . 234) (nil fontified nil 226 . 232) (nil fontified nil 225 . 226) (nil fontified nil 222 . 225) (nil fontified nil 217 . 222) (nil fontified nil 216 . 217) (nil fontified nil 215 . 216) (nil fontified nil 214 . 215) (nil fontified nil 213 . 214) (nil fontified nil 212 . 213) (nil fontified nil 207 . 212) (nil fontified nil 206 . 207) (nil fontified nil 200 . 206) (nil fontified nil 199 . 200) (nil fontified nil 196 . 199) (nil fontified nil 195 . 196) (nil fontified nil 194 . 195) (nil fontified nil 193 . 194) (nil fontified nil 188 . 193) (nil fontified nil 187 . 188) (nil fontified nil 181 . 187) (nil fontified nil 180 . 181) (nil fontified nil 179 . 180) (179 . 422)) ((#("#[derive(Debug)]
pub struct Error<I> {
    pub errors: Vec<(I, NomErrorKind)>,
}

impl<I> Error<I> {
    pub fn custom(input: I, msg: String) -> Self {
        Self {
            errors: vec![(input, ErrorKind::Custom(msg))],
        }
    }
}" 0 1 (fontified nil face font-lock-preprocessor-face) 1 2 (fontified nil face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 2 8 (fontified nil face font-lock-preprocessor-face) 8 9 (fontified nil face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 9 14 (fontified nil face font-lock-preprocessor-face) 14 15 (fontified nil face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 15 16 (fontified nil face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 16 17 (fontified nil) 17 20 (fontified nil face font-lock-keyword-face) 20 21 (fontified nil) 21 27 (fontified nil face font-lock-keyword-face) 27 28 (fontified nil) 28 33 (fontified nil face font-lock-type-face) 33 34 (fontified nil face (rainbow-delimiters-depth-1-face)) 34 35 (fontified nil face font-lock-type-face) 35 36 (fontified nil face (rainbow-delimiters-depth-1-face)) 36 37 (fontified nil) 37 38 (fontified nil face (rainbow-delimiters-depth-1-face)) 38 39 (fontified nil) 39 43 (fontified nil) 43 46 (fontified nil face font-lock-keyword-face) 46 47 (fontified nil) 47 53 (fontified nil face font-lock-variable-name-face) 53 55 (fontified nil) 55 58 (fontified nil face font-lock-type-face) 58 59 (fontified nil face (rainbow-delimiters-depth-2-face)) 59 60 (fontified nil face (rainbow-delimiters-depth-3-face)) 60 61 (fontified nil face font-lock-type-face) 61 63 (fontified nil) 63 75 (fontified nil face font-lock-type-face) 75 76 (fontified nil face (rainbow-delimiters-depth-3-face)) 76 77 (fontified nil face (rainbow-delimiters-depth-2-face)) 77 79 (fontified nil) 79 80 (fontified nil face (rainbow-delimiters-depth-1-face)) 80 82 (fontified nil) 82 86 (fontified nil face font-lock-keyword-face) 86 87 (fontified nil face (rainbow-delimiters-depth-1-face)) 87 88 (fontified nil face font-lock-type-face) 88 89 (fontified nil face (rainbow-delimiters-depth-1-face)) 89 90 (fontified nil) 90 95 (fontified nil face font-lock-type-face) 95 96 (fontified nil face (rainbow-delimiters-depth-1-face)) 96 97 (fontified nil face font-lock-type-face) 97 98 (fontified nil face (rainbow-delimiters-depth-1-face)) 98 99 (fontified nil) 99 100 (fontified nil face (rainbow-delimiters-depth-1-face)) 100 101 (fontified nil) 101 105 (fontified nil) 105 108 (fontified nil face font-lock-keyword-face) 108 109 (fontified nil) 109 111 (fontified nil face font-lock-keyword-face) 111 112 (fontified nil) 112 118 (fontified nil face font-lock-function-name-face) 118 119 (fontified nil face (rainbow-delimiters-depth-2-face)) 119 124 (fontified nil face font-lock-variable-name-face) 124 126 (fontified nil) 126 127 (fontified nil face font-lock-type-face) 127 129 (fontified nil) 129 132 (fontified nil face font-lock-variable-name-face) 132 134 (fontified nil) 134 140 (fontified nil face font-lock-type-face) 140 141 (fontified nil face (rainbow-delimiters-depth-2-face)) 141 143 (fontified nil) 143 144 (fontified nil syntax-table #4#) 144 145 (fontified nil) 145 149 (fontified nil face font-lock-type-face) 149 150 (fontified nil) 150 151 (fontified nil face (rainbow-delimiters-depth-2-face)) 151 152 (fontified nil) 152 160 (fontified nil) 160 164 (fontified nil face font-lock-type-face) 164 165 (fontified nil) 165 166 (fontified nil face (rainbow-delimiters-depth-3-face)) 166 167 (fontified nil) 167 179 (fontified nil) 179 185 (fontified nil face font-lock-variable-name-face) 185 187 (fontified nil) 187 191 (fontified nil face font-lock-preprocessor-face) 191 192 (fontified nil face (rainbow-delimiters-depth-4-face)) 192 193 (fontified nil face (rainbow-delimiters-depth-5-face)) 193 199 (fontified nil) 199 200 (fontified nil) 200 209 (fontified nil face font-lock-type-face) 209 211 (fontified nil) 211 217 (fontified nil face font-lock-type-face) 217 218 (fontified nil face (rainbow-delimiters-depth-6-face)) 218 221 (fontified nil) 221 222 (fontified nil face (rainbow-delimiters-depth-6-face)) 222 223 (fontified nil face (rainbow-delimiters-depth-5-face)) 223 224 (fontified nil face (rainbow-delimiters-depth-4-face)) 224 226 (fontified nil) 226 234 (fontified nil) 234 235 (fontified nil face (rainbow-delimiters-depth-3-face)) 235 236 (fontified nil) 236 240 (fontified nil) 240 241 (fontified nil face (rainbow-delimiters-depth-2-face)) 241 242 (fontified nil) 242 243 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-1-face))) . 179) (undo-tree-id207 . -243) (undo-tree-id208 . -17) (undo-tree-id209 . -17) (undo-tree-id210 . -39) (undo-tree-id211 . -39) (undo-tree-id212 . -79) (undo-tree-id213 . -79) (undo-tree-id214 . -81) (undo-tree-id215 . -81) (undo-tree-id216 . -82) (undo-tree-id217 . -82) (undo-tree-id218 . -101) (undo-tree-id219 . -101) (undo-tree-id220 . -152) (undo-tree-id221 . -152) (undo-tree-id222 . -167) (undo-tree-id223 . -167) (undo-tree-id224 . -226) (undo-tree-id225 . -226) (undo-tree-id226 . -236) (undo-tree-id227 . -236) (undo-tree-id228 . -242) (undo-tree-id229 . -242) (undo-tree-id230 . -243) (undo-tree-id231 . -243) (undo-tree-id232 . -242) (undo-tree-id233 . -243) (undo-tree-id234 . -243) (undo-tree-id235 . -243) (undo-tree-id236 . -243) (undo-tree-id237 . -243) (undo-tree-id238 . -243) (undo-tree-id239 . -243) (undo-tree-id240 . -243) (undo-tree-id241 . -243) (undo-tree-id242 . -243) (undo-tree-id243 . -243) (undo-tree-id244 . -243) (undo-tree-id245 . -200) (undo-tree-id246 . -209) (undo-tree-id247 . -243) (undo-tree-id248 . -243) (undo-tree-id249 . -242) (undo-tree-id250 . -243) (undo-tree-id251 . -242) (undo-tree-id252 . -243) (undo-tree-id253 . -242) (undo-tree-id254 . -243) (undo-tree-id255 . -242) (undo-tree-id256 . -243) (undo-tree-id257 . -242) (undo-tree-id258 . -243) (undo-tree-id259 . -242) (undo-tree-id260 . -243) (undo-tree-id261 . -240) (undo-tree-id262 . -241) (undo-tree-id263 . -234) (undo-tree-id264 . -235) (undo-tree-id265 . -165) (undo-tree-id266 . -166) (undo-tree-id267 . -150) (undo-tree-id268 . -151) (undo-tree-id269 . -99) (undo-tree-id270 . -100) (undo-tree-id271 . 144) (undo-tree-id272 . -100) (undo-tree-id273 . 143) (undo-tree-id274 . -242) (undo-tree-id275 . 1) (undo-tree-id276 . -243) (undo-tree-id277 . -243) (nil fontified t 195 . 196) (nil fontified t 217 . 218) (nil fontified t 256 . 258) (nil fontified t 259 . 261) (nil fontified t 279 . 280) (nil fontified t 330 . 331) (nil fontified t 345 . 346) (nil fontified t 403 . 405) (nil fontified t 414 . 415) (nil fontified t 420 . 421) (nil rear-nonsticky t 421 . 422) (t 24167 37649 514263 109000)) (24167 37649 502367 0) 0 nil]) ((178 . 180)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 178) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1)) (24167 37653 496978 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -288) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 289) ((288 . 289)) (24167 37653 766078 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -289) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 290) ((289 . 290)) (24167 37654 63066 0) 0 nil]) ((#("#[derive(Debug)]
pub struct Error<I> {
    pub errors: Vec<(I, NomErrorKind)>,
}

impl<I> Error<I> {
    pub fn custom(input: I, msg: String) -> Self {
        Self {
            errors: vec![(input, ErrorKind::Custom(msg))],
        }
    }
}" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 2 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 9 14 (fontified t face font-lock-preprocessor-face) 14 15 (fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 16 17 (fontified t) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 33 (fontified t face font-lock-type-face) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 35 (fontified t face font-lock-type-face) 35 36 (fontified t face (rainbow-delimiters-depth-1-face)) 36 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 43 (fontified t) 43 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 53 (fontified t face font-lock-variable-name-face) 53 55 (fontified t) 55 58 (fontified t face font-lock-type-face) 58 59 (fontified t face (rainbow-delimiters-depth-2-face)) 59 60 (fontified t face (rainbow-delimiters-depth-3-face)) 60 61 (fontified t face font-lock-type-face) 61 63 (fontified t) 63 75 (fontified t face font-lock-type-face) 75 76 (fontified t face (rainbow-delimiters-depth-3-face)) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 79 (fontified t) 79 80 (fontified t face (rainbow-delimiters-depth-1-face)) 80 82 (fontified t) 82 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t face (rainbow-delimiters-depth-1-face)) 87 88 (fontified t face font-lock-type-face) 88 89 (fontified t face (rainbow-delimiters-depth-1-face)) 89 90 (fontified t) 90 95 (fontified t face font-lock-type-face) 95 96 (fontified t face (rainbow-delimiters-depth-1-face)) 96 97 (fontified t face font-lock-type-face) 97 98 (fontified t face (rainbow-delimiters-depth-1-face)) 98 99 (fontified t) 99 100 (fontified t face (rainbow-delimiters-depth-1-face)) 100 105 (fontified t) 105 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 111 (fontified t face font-lock-keyword-face) 111 112 (fontified t) 112 118 (fontified t face font-lock-function-name-face) 118 119 (fontified t face (rainbow-delimiters-depth-2-face)) 119 124 (fontified t face font-lock-variable-name-face) 124 126 (fontified t) 126 127 (fontified t face font-lock-type-face) 127 129 (fontified t) 129 132 (fontified t face font-lock-variable-name-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-type-face) 140 141 (fontified t face (rainbow-delimiters-depth-2-face)) 141 143 (fontified t) 143 144 (syntax-table #4# fontified t) 144 145 (fontified t) 145 149 (fontified t face font-lock-type-face) 149 150 (fontified t) 150 151 (fontified t face (rainbow-delimiters-depth-2-face)) 151 160 (fontified t) 160 164 (fontified t face font-lock-type-face) 164 165 (fontified t) 165 166 (fontified t face (rainbow-delimiters-depth-3-face)) 166 179 (fontified t) 179 185 (fontified t face font-lock-variable-name-face) 185 187 (fontified t) 187 191 (fontified t face font-lock-preprocessor-face) 191 192 (fontified t face (rainbow-delimiters-depth-4-face)) 192 193 (fontified t face (rainbow-delimiters-depth-5-face)) 193 199 (fontified t) 199 200 (fontified t) 200 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 217 (fontified t face font-lock-type-face) 217 218 (fontified t face (rainbow-delimiters-depth-6-face)) 218 221 (fontified t) 221 222 (fontified t face (rainbow-delimiters-depth-6-face)) 222 223 (fontified t face (rainbow-delimiters-depth-5-face)) 223 224 (fontified t face (rainbow-delimiters-depth-4-face)) 224 226 (fontified t) 226 234 (fontified t) 234 235 (fontified t face (rainbow-delimiters-depth-3-face)) 235 236 (fontified t) 236 240 (fontified t) 240 241 (fontified t face (rainbow-delimiters-depth-2-face)) 241 242 (fontified t) 242 243 (fontified t face (rainbow-delimiters-depth-1-face))) . 290) (undo-tree-id145 . -242) (undo-tree-id146 . -242) (undo-tree-id147 . -236) (undo-tree-id148 . -236) (undo-tree-id149 . -226) (undo-tree-id150 . -226) (undo-tree-id151 . -167) (undo-tree-id152 . -167) (undo-tree-id153 . -152) (undo-tree-id154 . -152) (undo-tree-id155 . -101) (undo-tree-id156 . -101) (undo-tree-id157 . -82) (undo-tree-id158 . -82) (undo-tree-id159 . -81) (undo-tree-id160 . -81) (undo-tree-id161 . -79) (undo-tree-id162 . -79) (undo-tree-id163 . -39) (undo-tree-id164 . -39) (undo-tree-id165 . -17) (undo-tree-id166 . -17) (undo-tree-id167 . -166) (undo-tree-id168 . -243) (undo-tree-id169 . -243) (undo-tree-id170 . -236) (undo-tree-id171 . -236) (undo-tree-id172 . -236) (undo-tree-id173 . -236) (undo-tree-id174 . -236) (undo-tree-id175 . -236) (undo-tree-id176 . -236) (undo-tree-id177 . -236) (undo-tree-id178 . -236) (undo-tree-id179 . -236) (undo-tree-id180 . -236) (undo-tree-id181 . -236) (undo-tree-id182 . -236) (undo-tree-id183 . -242) (undo-tree-id184 . -242) (undo-tree-id185 . -200) (undo-tree-id186 . -209) (undo-tree-id187 . -242) (undo-tree-id188 . -242) (undo-tree-id189 . -242) (undo-tree-id190 . -243) (undo-tree-id191 . -243) (undo-tree-id192 . -243) (undo-tree-id193 . -243) (undo-tree-id194 . -243) (undo-tree-id195 . -243) (undo-tree-id196 . -243) (undo-tree-id197 . -243) (undo-tree-id198 . -243) (undo-tree-id199 . -242) (undo-tree-id200 . -242) (undo-tree-id201 . -242) (undo-tree-id202 . -242) (undo-tree-id203 . -242) (undo-tree-id204 . -81) (undo-tree-id205 . -81) (undo-tree-id206 . -81) (t 24167 37617 136697 85000)) ((290 . 533)) (24167 37654 429738 0) 0 nil] [nil nil ((526 . 527) (t 24167 37617 136697 85000)) ((#("p" 0 1 (fontified t)) . 526) (undo-tree-id7 . -1)) (24167 37640 867748 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 267) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1)) nil (24167 37654 818129 0) 0 nil]) ((#("    // new!" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 11 (fontified t face font-lock-comment-face)) . 267) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -11) (t 24167 37415 47776 703000)) nil (24167 37617 132343 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 302) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1)) nil (24167 37415 35778 0) 0 nil]) ((#("// new!" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 7 (face font-lock-comment-face fontified t)) . 384) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -7)) nil (24167 37415 35789 0) 0 nil]) ((nil rear-nonsticky nil 382 . 383) (nil fontified nil 382 . 383) (nil fontified nil 380 . 382) (nil fontified nil 379 . 380) (nil fontified nil 378 . 379) (nil fontified nil 366 . 378) (nil fontified nil 364 . 366) (nil fontified nil 363 . 364) (nil fontified nil 362 . 363) (nil fontified nil 361 . 362) (nil fontified nil 358 . 361) (nil fontified nil 356 . 358) (nil fontified nil 350 . 356) (nil fontified nil 349 . 350) (nil fontified nil 346 . 349) (nil fontified nil 341 . 346) (nil fontified nil 340 . 341) (nil fontified nil 339 . 340) (nil fontified nil 338 . 339) (nil fontified nil 337 . 338) (nil fontified nil 336 . 337) (nil fontified nil 331 . 336) (nil fontified nil 330 . 331) (nil fontified nil 324 . 330) (nil fontified nil 323 . 324) (nil fontified nil 320 . 323) (nil fontified nil 319 . 320) (nil fontified nil 318 . 319) (nil fontified nil 317 . 318) (nil fontified nil 312 . 317) (nil fontified nil 311 . 312) (nil fontified nil 305 . 311) (nil fontified nil 304 . 305) (nil fontified nil 303 . 304) (303 . 383)) nil (24167 37415 35798 0) 0 nil]) ((301 . 303)) nil (24167 37415 35800 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -471) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("
" 0 1 (fontified t)) . -472) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 473) nil (24167 37415 35977 0) 0 nil]) ((#("#[derive(Debug)]
pub struct Error<I> {
    pub errors: Vec<(I, NomErrorKind)>,
}" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 14 (face font-lock-preprocessor-face fontified t) 14 15 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 16 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (face font-lock-type-face fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 43 (fontified t) 43 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 53 (face font-lock-variable-name-face fontified t) 53 55 (fontified t) 55 58 (face font-lock-type-face fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 61 (face font-lock-type-face fontified t) 61 63 (fontified t) 63 75 (face font-lock-type-face fontified t) 75 76 (face (rainbow-delimiters-depth-3-face) fontified t) 76 77 (face (rainbow-delimiters-depth-2-face) fontified t) 77 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t)) . 473) (undo-tree-id167 . -17) (undo-tree-id168 . -20) (undo-tree-id169 . -39) (undo-tree-id170 . -39) (undo-tree-id171 . -79) (undo-tree-id172 . -79) (undo-tree-id173 . -80) (undo-tree-id174 . -17) (undo-tree-id175 . -17) (undo-tree-id176 . -17) (undo-tree-id177 . -17) (undo-tree-id178 . -17) (undo-tree-id179 . -39) (undo-tree-id180 . -39) (undo-tree-id181 . -39) (undo-tree-id182 . -79) (undo-tree-id183 . -79) (undo-tree-id184 . -79) (undo-tree-id185 . -80) (undo-tree-id186 . -80) (undo-tree-id187 . -79) (undo-tree-id188 . -80) (undo-tree-id189 . -79) (undo-tree-id190 . -80) (undo-tree-id191 . -79) (undo-tree-id192 . -80) (undo-tree-id193 . -79) (undo-tree-id194 . -80) (undo-tree-id195 . -79) (undo-tree-id196 . -80) (undo-tree-id197 . -79) (undo-tree-id198 . -80) (undo-tree-id199 . -37) (undo-tree-id200 . -38) (undo-tree-id201 . -80) (undo-tree-id202 . -80) (undo-tree-id203 . -80) (undo-tree-id204 . -80) (undo-tree-id205 . -80) (undo-tree-id206 . -80) (undo-tree-id207 . -79) (undo-tree-id208 . -79) (undo-tree-id209 . -79) (undo-tree-id210 . -39) (undo-tree-id211 . -39) (undo-tree-id212 . -39) (undo-tree-id213 . -39) (undo-tree-id214 . -39) (undo-tree-id215 . -17) (undo-tree-id216 . -17) (undo-tree-id217 . -17) (t 24167 37390 625079 418000)) nil (24167 37415 36043 0) 0 nil]) ((nil rear-nonsticky nil 470 . 471) (nil fontified nil 179 . 471) (179 . 471)) nil (24167 37390 611594 0) 0 nil]) ((178 . 180) (t 24167 32395 387166 818000)) nil (24167 37390 611600 0) 0 nil]) nil nil (24167 36752 754205 0) 0 nil] #5# 17684 90 nil)