"a827c7abe1745c8ee52f5173bedea943ea555831"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((#("
" 0 1 (fontified t)) . 33) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1)) nil (24167 38389 642602 0) 0 nil]) ((#("use custom_debug_derive::CustomDebug;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 36 (fontified t face font-lock-type-face) 36 37 (fontified t)) . 33) (undo-tree-id135 . -4) (undo-tree-id136 . -23) (undo-tree-id137 . -37) (t 24167 38339 419786 334000)) nil (24167 38389 642613 0) 0 nil]) ((nil rear-nonsticky nil 1030 . 1031) (nil fontified nil 355 . 1031) (355 . 1031)) nil (24167 38339 403616 0) 0 nil]) ((#("impl EtherType {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        let original_i = i;
        let (i, x) = context(\"EtherType\", be_u16)(i)?;
        // `i` is now the remaining input after reading the be_u16

        match EtherType::try_from(x) {
            Some(typ) => Ok((i, typ)),
            None => {
                let msg = format!(\"unknown EtherType 0x{:04X}\", x);
                // we could hardcode `&original_i[..4]` but why bother?
                use nom::Offset;
                let err_slice = &original_i[..original_i.offset(i)];

                Err(nom::Err::Error(parse::Error::custom(err_slice, msg)))
            }
        }
    }
}" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 14 (fontified t face font-lock-type-face) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 21 (fontified t) 21 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 33 (fontified t face font-lock-function-name-face) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t face font-lock-variable-name-face) 35 37 (fontified t) 37 42 (fontified t face font-lock-constant-face) 42 44 (fontified t) 44 49 (fontified t face font-lock-type-face) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 52 (fontified t) 52 53 (syntax-table #1=(1) fontified t) 53 54 (fontified t) 54 59 (fontified t face font-lock-constant-face) 59 61 (fontified t) 61 67 (fontified t face font-lock-type-face) 67 68 (fontified t face (rainbow-delimiters-depth-2-face)) 68 72 (fontified t face font-lock-type-face) 72 73 (fontified t face (rainbow-delimiters-depth-2-face)) 73 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-2-face)) 75 84 (fontified t) 84 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 98 (fontified t face font-lock-variable-name-face) 98 112 (fontified t) 112 115 (fontified t face font-lock-keyword-face) 115 116 (fontified t) 116 117 (fontified t face (rainbow-delimiters-depth-3-face)) 117 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-3-face)) 122 132 (fontified t) 132 133 (fontified t face (rainbow-delimiters-depth-3-face)) 133 144 (fontified t face font-lock-string-face) 144 146 (fontified t) 146 152 (fontified t) 152 153 (fontified t face (rainbow-delimiters-depth-3-face)) 153 154 (fontified t face (rainbow-delimiters-depth-3-face)) 154 155 (fontified t) 155 156 (fontified t face (rainbow-delimiters-depth-3-face)) 156 157 (fontified t face rust-question-mark-face) 157 159 (fontified t) 159 167 (fontified t) 167 170 (fontified t face font-lock-comment-delimiter-face) 170 226 (fontified t face font-lock-comment-face) 226 235 (fontified t) 235 240 (fontified t face font-lock-keyword-face) 240 241 (fontified t) 241 250 (fontified t face font-lock-type-face) 250 260 (fontified t) 260 261 (fontified t face (rainbow-delimiters-depth-3-face)) 261 262 (fontified t) 262 263 (fontified t face (rainbow-delimiters-depth-3-face)) 263 264 (fontified t) 264 265 (fontified t face (rainbow-delimiters-depth-3-face)) 265 278 (fontified t) 278 282 (fontified t face font-lock-type-face) 282 283 (fontified t face (rainbow-delimiters-depth-4-face)) 283 286 (fontified t) 286 287 (fontified t face (rainbow-delimiters-depth-4-face)) 287 289 (fontified t) 289 290 (syntax-table #1# fontified t) 290 291 (fontified t) 291 293 (fontified t face font-lock-type-face) 293 294 (fontified t face (rainbow-delimiters-depth-4-face)) 294 295 (fontified t face (rainbow-delimiters-depth-5-face)) 295 301 (fontified t) 301 302 (fontified t face (rainbow-delimiters-depth-5-face)) 302 303 (fontified t face (rainbow-delimiters-depth-4-face)) 303 317 (fontified t) 317 321 (fontified t face font-lock-type-face) 321 323 (fontified t) 323 324 (syntax-table #1# fontified t) 324 325 (fontified t) 325 326 (fontified t face (rainbow-delimiters-depth-4-face)) 326 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 350 (fontified t face font-lock-variable-name-face) 350 353 (fontified t) 353 360 (fontified t face rust-builtin-formatting-macro-face) 360 361 (fontified t face (rainbow-delimiters-depth-5-face)) 361 382 (fontified t face font-lock-string-face) 382 388 (fontified t face rust-string-interpolation-face) 388 389 (fontified t face font-lock-string-face) 389 392 (fontified t) 392 393 (fontified t face (rainbow-delimiters-depth-5-face)) 393 411 (fontified t) 411 414 (fontified t face font-lock-comment-delimiter-face) 414 467 (fontified t face font-lock-comment-face) 467 483 (fontified t) 483 486 (fontified t face font-lock-keyword-face) 486 487 (fontified t) 487 490 (fontified t face font-lock-constant-face) 490 492 (fontified t) 492 498 (fontified t face font-lock-type-face) 498 516 (fontified t) 516 519 (fontified t face font-lock-keyword-face) 519 520 (fontified t) 520 529 (fontified t face font-lock-variable-name-face) 529 543 (fontified t) 543 544 (fontified t face (rainbow-delimiters-depth-5-face)) 544 563 (fontified t) 563 564 (fontified t face (rainbow-delimiters-depth-6-face)) 564 565 (fontified t) 565 566 (fontified t face (rainbow-delimiters-depth-6-face)) 566 567 (fontified t face (rainbow-delimiters-depth-5-face)) 567 586 (fontified t) 586 589 (fontified t face font-lock-type-face) 589 590 (fontified t face (rainbow-delimiters-depth-5-face)) 590 593 (fontified t face font-lock-constant-face) 593 595 (fontified t) 595 598 (fontified t face font-lock-type-face) 598 600 (fontified t) 600 605 (fontified t face font-lock-type-face) 605 606 (fontified t face (rainbow-delimiters-depth-6-face)) 606 611 (fontified t face font-lock-constant-face) 611 613 (fontified t) 613 618 (fontified t face font-lock-type-face) 618 626 (fontified t) 626 627 (fontified t face (rainbow-delimiters-depth-7-face)) 627 641 (fontified t) 641 642 (fontified t face (rainbow-delimiters-depth-7-face)) 642 643 (fontified t face (rainbow-delimiters-depth-6-face)) 643 644 (fontified t face (rainbow-delimiters-depth-5-face)) 644 657 (fontified t) 657 658 (fontified t face (rainbow-delimiters-depth-4-face)) 658 659 (fontified t) 659 667 (fontified t) 667 668 (fontified t face (rainbow-delimiters-depth-3-face)) 668 673 (fontified t) 673 674 (fontified t face (rainbow-delimiters-depth-2-face)) 674 675 (fontified t) 675 676 (fontified t face (rainbow-delimiters-depth-1-face))) . 355) (undo-tree-id0 . -395) (undo-tree-id1 . -395) (undo-tree-id2 . -327) (undo-tree-id3 . -327) (undo-tree-id4 . -305) (undo-tree-id5 . -305) (undo-tree-id6 . -266) (undo-tree-id7 . -266) (undo-tree-id8 . -17) (undo-tree-id9 . -17) (undo-tree-id10 . -76) (undo-tree-id11 . -76) (undo-tree-id12 . -104) (undo-tree-id13 . -104) (undo-tree-id14 . -159) (undo-tree-id15 . -159) (undo-tree-id16 . -226) (undo-tree-id17 . -226) (undo-tree-id18 . -227) (undo-tree-id19 . -227) (undo-tree-id20 . -226) (undo-tree-id21 . -226) (undo-tree-id22 . -226) (undo-tree-id23 . -226) (undo-tree-id24 . -569) (undo-tree-id25 . -569) (undo-tree-id26 . -569) (undo-tree-id27 . -569) (undo-tree-id28 . -569) (undo-tree-id29 . -569) (undo-tree-id30 . -570) (undo-tree-id31 . -570) (undo-tree-id32 . -570) (undo-tree-id33 . -645) (undo-tree-id34 . -645) (undo-tree-id35 . -645) (undo-tree-id36 . -659) (undo-tree-id37 . -659) (undo-tree-id38 . -659) (undo-tree-id39 . -669) (undo-tree-id40 . -669) (undo-tree-id41 . -669) (undo-tree-id42 . -674) (undo-tree-id43 . -674) (undo-tree-id44 . -673) (undo-tree-id45 . -674) (undo-tree-id46 . -673) (undo-tree-id47 . -674) (undo-tree-id48 . -673) (undo-tree-id49 . -674) (undo-tree-id50 . -673) (undo-tree-id51 . -674) (undo-tree-id52 . -449) (undo-tree-id53 . -450) (undo-tree-id54 . -449) (undo-tree-id55 . -450) (undo-tree-id56 . -673) (undo-tree-id57 . -674) (undo-tree-id58 . -673) (undo-tree-id59 . -674) (undo-tree-id60 . -667) (undo-tree-id61 . -668) (undo-tree-id62 . -657) (undo-tree-id63 . -658) (undo-tree-id64 . -387) (undo-tree-id65 . -388) (undo-tree-id66 . -382) (undo-tree-id67 . -383) (undo-tree-id68 . -325) (undo-tree-id69 . -326) (undo-tree-id70 . -264) (undo-tree-id71 . -265) (undo-tree-id72 . -74) (undo-tree-id73 . -75) (undo-tree-id74 . -674) (undo-tree-id75 . -676) (undo-tree-id76 . -676) (undo-tree-id77 . -675) (undo-tree-id78 . -676) (undo-tree-id79 . -675) (undo-tree-id80 . -676) (undo-tree-id81 . -675) (undo-tree-id82 . -676) (undo-tree-id83 . -675) (undo-tree-id84 . -676) (undo-tree-id85 . -449) (undo-tree-id86 . -450) (undo-tree-id87 . -449) (undo-tree-id88 . -450) (undo-tree-id89 . -675) (undo-tree-id90 . -676) (undo-tree-id91 . -675) (undo-tree-id92 . -676) (undo-tree-id93 . -673) (undo-tree-id94 . -674) (undo-tree-id95 . -667) (undo-tree-id96 . -668) (undo-tree-id97 . -657) (undo-tree-id98 . -658) (undo-tree-id99 . -387) (undo-tree-id100 . -388) (undo-tree-id101 . -382) (undo-tree-id102 . -383) (undo-tree-id103 . -325) (undo-tree-id104 . -326) (undo-tree-id105 . -264) (undo-tree-id106 . -265) (undo-tree-id107 . -74) (undo-tree-id108 . -75) (undo-tree-id109 . -15) (undo-tree-id110 . -16) (undo-tree-id111 . -676) (undo-tree-id112 . -676) (undo-tree-id113 . -676) (undo-tree-id114 . -676) (undo-tree-id115 . -676) (undo-tree-id116 . -676) (undo-tree-id117 . -676) (undo-tree-id118 . -675) (undo-tree-id119 . -675) (undo-tree-id120 . -675) (undo-tree-id121 . -675) (undo-tree-id122 . -675) (undo-tree-id123 . -569) (undo-tree-id124 . -569) (undo-tree-id125 . -569) (undo-tree-id126 . -226) (undo-tree-id127 . -226) (undo-tree-id128 . -226) (undo-tree-id129 . -226) (undo-tree-id130 . -226) (undo-tree-id131 . -226) (t 24167 37441 340000 852000)) nil (24167 38339 403798 0) 0 nil]) ((nil rear-nonsticky nil 1030 . 1031) (nil fontified nil 355 . 1031) (355 . 1031)) nil (24167 37441 324931 0) 0 nil]) ((354 . 355)) nil (24167 37441 324936 0) 0 nil]) ((#("
impl EtherType {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        context(
            \"EtherType\",
            map(be_u16, |x| EtherType::try_from(x).unwrap()),
        )(i)
    }
}
}" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 15 (face font-lock-type-face fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 34 (face font-lock-function-name-face fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (face font-lock-variable-name-face fontified t) 36 38 (fontified t) 38 43 (face font-lock-constant-face fontified t) 43 45 (fontified t) 45 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 53 (fontified t) 53 54 (fontified t syntax-table #2=(1)) 54 55 (fontified t) 55 60 (face font-lock-constant-face fontified t) 60 62 (fontified t) 62 68 (face font-lock-type-face fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 73 (face font-lock-type-face fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-2-face) fontified t) 76 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-3-face) fontified t) 93 106 (fontified t) 106 117 (face font-lock-string-face fontified t) 117 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-4-face) fontified t) 135 147 (fontified t) 147 156 (face font-lock-type-face fontified t) 156 166 (fontified t) 166 167 (face (rainbow-delimiters-depth-5-face) fontified t) 167 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-5-face) fontified t) 169 176 (fontified t) 176 177 (face (rainbow-delimiters-depth-5-face) fontified t) 177 178 (face (rainbow-delimiters-depth-5-face) fontified t) 178 179 (face (rainbow-delimiters-depth-4-face) fontified t) 179 189 (fontified t) 189 190 (face (rainbow-delimiters-depth-3-face) fontified t) 190 191 (face (rainbow-delimiters-depth-3-face) fontified t) 191 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-3-face) fontified t) 193 198 (fontified t) 198 199 (face (rainbow-delimiters-depth-2-face) fontified t) 199 200 (fontified t) 200 201 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 201 202 (fontified t) 202 203 (face (rainbow-delimiters-unmatched-face) fontified t rear-nonsticky t)) . 354) (undo-tree-id491 . -203) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -202) (undo-tree-id497 . -202) (undo-tree-id498 . -200) (undo-tree-id499 . -200) (undo-tree-id500 . -194) (undo-tree-id501 . -194) (undo-tree-id502 . -181) (undo-tree-id503 . -181) (undo-tree-id504 . -119) (undo-tree-id505 . -119) (undo-tree-id506 . -18) (undo-tree-id507 . -18) (undo-tree-id508 . -77) (undo-tree-id509 . -77) (undo-tree-id510 . -94) (undo-tree-id511 . -94) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -18) (undo-tree-id540 . -18) (undo-tree-id541 . -18) (undo-tree-id542 . -18) (undo-tree-id543 . -18) (undo-tree-id544 . -18) (undo-tree-id545 . -18) (undo-tree-id546 . -18) (undo-tree-id547 . -18) (undo-tree-id548 . -18) (undo-tree-id549 . -18) (undo-tree-id550 . -18) (undo-tree-id551 . -18) (undo-tree-id552 . -18) (undo-tree-id553 . -18) (undo-tree-id554 . -18) (undo-tree-id555 . -18) (undo-tree-id556 . -18) (undo-tree-id557 . -18) (undo-tree-id558 . -77) (undo-tree-id559 . -77) (undo-tree-id560 . -77) (undo-tree-id561 . -94) (undo-tree-id562 . -94) (undo-tree-id563 . -94) (undo-tree-id564 . -119) (undo-tree-id565 . -119) (undo-tree-id566 . -119) (undo-tree-id567 . -181) (undo-tree-id568 . -181) (undo-tree-id569 . -181) (undo-tree-id570 . -194) (undo-tree-id571 . -194) (undo-tree-id572 . -194) (undo-tree-id573 . -200) (undo-tree-id574 . -200) (undo-tree-id575 . -200) (undo-tree-id576 . -202) (undo-tree-id577 . -202) (undo-tree-id578 . -202) (undo-tree-id579 . -202) (undo-tree-id580 . -202) (undo-tree-id581 . -203) (undo-tree-id582 . -203) (undo-tree-id583 . -202) (undo-tree-id584 . -203) (undo-tree-id585 . -202) (undo-tree-id586 . -203) (undo-tree-id587 . -202) (undo-tree-id588 . -203) (undo-tree-id589 . -202) (undo-tree-id590 . -203) (undo-tree-id591 . -145) (undo-tree-id592 . -146) (undo-tree-id593 . -145) (undo-tree-id594 . -146) (undo-tree-id595 . -202) (undo-tree-id596 . -203) (undo-tree-id597 . -202) (undo-tree-id598 . -203) (undo-tree-id599 . -200) (undo-tree-id600 . -201) (undo-tree-id601 . -198) (undo-tree-id602 . -199) (undo-tree-id603 . -75) (undo-tree-id604 . -76) (undo-tree-id605 . -16) (undo-tree-id606 . -17) (undo-tree-id607 . -203) (undo-tree-id608 . -1) (undo-tree-id609 . -203) (undo-tree-id610 . -203) (undo-tree-id611 . -203) (undo-tree-id612 . -203) (undo-tree-id613 . -203) (undo-tree-id614 . -202) (undo-tree-id615 . -202) (undo-tree-id616 . -202) (undo-tree-id617 . -202) (undo-tree-id618 . -202) (t 24167 37349 600517 265000)) nil (24167 37441 325099 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 355) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1)) nil (24167 37349 587311 0) 0 nil]) ((#("impl EtherType {" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 14 (face font-lock-type-face fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t)) . 355) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -16) (t 24167 37345 572823 82000)) nil (24167 37349 587328 0) 0 nil]) ((nil rear-nonsticky nil 571 . 572) (nil fontified nil 372 . 572) (372 . 572)) nil (24167 37345 559542 0) 0 nil]) ((#("    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        let original_i = i;
        let (i, x) = context(\"EtherType\", be_u16)(i)?;
        // `i` is now the remaining input after reading the be_u16

        match EtherType::try_from(x) {
            Some(typ) => Ok((i, typ)),
            None => {
                let msg = format!(\"unknown EtherType 0x{:04X}\", x);
                // we could hardcode `&original_i[..4]` but why bother?
                use nom::Offset;
                let err_slice = &original_i[..original_i.offset(i)];

                Err(nom::Err::Error(parse::Error::custom(err_slice, msg)))
            }
        }
    }" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-function-name-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 20 (fontified t) 20 25 (face font-lock-constant-face fontified t) 25 27 (fontified t) 27 32 (face font-lock-type-face fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 35 (fontified t) 35 36 (fontified t syntax-table #2#) 36 37 (fontified t) 37 42 (face font-lock-constant-face fontified t) 42 44 (fontified t) 44 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 55 (face font-lock-type-face fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 67 (fontified t) 67 70 (face font-lock-keyword-face fontified t) 70 71 (fontified t) 71 81 (face font-lock-variable-name-face fontified t) 81 95 (fontified t) 95 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-3-face) fontified t) 100 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-3-face) fontified t) 105 115 (fontified t) 115 116 (face (rainbow-delimiters-depth-3-face) fontified t) 116 127 (face font-lock-string-face fontified t) 127 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-3-face) fontified t) 136 137 (face (rainbow-delimiters-depth-3-face) fontified t) 137 138 (fontified t) 138 139 (face (rainbow-delimiters-depth-3-face) fontified t) 139 140 (face rust-question-mark-face fontified t) 140 150 (fontified t) 150 153 (face font-lock-comment-delimiter-face fontified t) 153 209 (face font-lock-comment-face fontified t) 209 218 (fontified t) 218 223 (face font-lock-keyword-face fontified t) 223 224 (fontified t) 224 233 (face font-lock-type-face fontified t) 233 243 (fontified t) 243 244 (face (rainbow-delimiters-depth-3-face) fontified t) 244 245 (fontified t) 245 246 (face (rainbow-delimiters-depth-3-face) fontified t) 246 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-3-face) fontified t) 248 257 (fontified t) 257 258 (fontified t) 258 261 (fontified t) 261 265 (face font-lock-type-face fontified t) 265 266 (face (rainbow-delimiters-depth-4-face) fontified t) 266 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-4-face) fontified t) 270 272 (fontified t) 272 273 (fontified t syntax-table #2#) 273 274 (fontified t) 274 276 (face font-lock-type-face fontified t) 276 277 (face (rainbow-delimiters-depth-4-face) fontified t) 277 278 (face (rainbow-delimiters-depth-5-face) fontified t) 278 284 (fontified t) 284 285 (face (rainbow-delimiters-depth-5-face) fontified t) 285 286 (face (rainbow-delimiters-depth-4-face) fontified t) 286 288 (fontified t) 288 300 (fontified t) 300 304 (face font-lock-type-face fontified t) 304 306 (fontified t) 306 307 (fontified t syntax-table #2#) 307 308 (fontified t) 308 309 (face (rainbow-delimiters-depth-4-face) fontified t) 309 326 (fontified t) 326 329 (face font-lock-keyword-face fontified t) 329 330 (fontified t) 330 333 (face font-lock-variable-name-face fontified t) 333 336 (fontified t) 336 343 (face rust-builtin-formatting-macro-face fontified t) 343 344 (face (rainbow-delimiters-depth-5-face) fontified t) 344 355 (face font-lock-string-face fontified t) 355 365 (fontified t face font-lock-string-face) 365 371 (fontified t face rust-string-interpolation-face) 371 372 (fontified t face font-lock-string-face) 372 375 (fontified t) 375 376 (fontified t face (rainbow-delimiters-depth-5-face)) 376 378 (fontified t) 378 394 (fontified t) 394 397 (face font-lock-comment-delimiter-face fontified t) 397 402 (face font-lock-comment-face fontified t) 402 403 (face font-lock-comment-face fontified t) 403 450 (face font-lock-comment-face fontified t) 450 466 (fontified t) 466 469 (face font-lock-keyword-face fontified t) 469 470 (fontified t) 470 473 (face font-lock-constant-face fontified t) 473 475 (fontified t) 475 481 (face font-lock-type-face fontified t) 481 483 (fontified t) 483 499 (fontified t) 499 502 (face font-lock-keyword-face fontified t) 502 503 (fontified t) 503 512 (face font-lock-variable-name-face fontified t) 512 526 (fontified t) 526 527 (face (rainbow-delimiters-depth-5-face) fontified t) 527 546 (fontified t) 546 547 (face (rainbow-delimiters-depth-6-face) fontified t) 547 548 (fontified t) 548 549 (face (rainbow-delimiters-depth-6-face) fontified t) 549 550 (face (rainbow-delimiters-depth-5-face) fontified t) 550 569 (fontified t) 569 572 (face font-lock-type-face fontified t) 572 573 (face (rainbow-delimiters-depth-5-face) fontified t) 573 576 (face font-lock-constant-face fontified t) 576 578 (fontified t) 578 581 (face font-lock-type-face fontified t) 581 583 (fontified t) 583 588 (face font-lock-type-face fontified t) 588 589 (face (rainbow-delimiters-depth-6-face) fontified t) 589 594 (face font-lock-constant-face fontified t) 594 596 (fontified t) 596 601 (face font-lock-type-face fontified t) 601 609 (fontified t) 609 610 (face (rainbow-delimiters-depth-7-face) fontified t) 610 624 (fontified t) 624 625 (face (rainbow-delimiters-depth-7-face) fontified t) 625 626 (face (rainbow-delimiters-depth-6-face) fontified t) 626 627 (face (rainbow-delimiters-depth-5-face) fontified t) 627 640 (fontified t) 640 641 (face (rainbow-delimiters-depth-4-face) fontified t) 641 650 (fontified t) 650 651 (face (rainbow-delimiters-depth-3-face) fontified t) 651 656 (fontified t) 656 657 (face (rainbow-delimiters-depth-2-face) fontified t)) . 372) (undo-tree-id291 . -288) (undo-tree-id292 . -288) (undo-tree-id293 . -249) (undo-tree-id294 . -249) (undo-tree-id295 . -657) (undo-tree-id296 . -210) (undo-tree-id297 . -210) (undo-tree-id298 . -450) (undo-tree-id299 . -450) (undo-tree-id300 . -59) (undo-tree-id301 . -59) (undo-tree-id302 . -87) (undo-tree-id303 . -87) (undo-tree-id304 . -142) (undo-tree-id305 . -142) (undo-tree-id306 . -310) (undo-tree-id307 . -310) (undo-tree-id308 . -378) (undo-tree-id309 . -378) (undo-tree-id310 . -209) (undo-tree-id311 . -209) (undo-tree-id312 . -483) (undo-tree-id313 . -483) (undo-tree-id314 . -552) (undo-tree-id315 . -552) (undo-tree-id316 . -553) (undo-tree-id317 . -553) (undo-tree-id318 . -628) (undo-tree-id319 . -628) (undo-tree-id320 . -642) (undo-tree-id321 . -642) (undo-tree-id322 . -652) (undo-tree-id323 . -652) (undo-tree-id324 . -652) (undo-tree-id325 . -652) (undo-tree-id326 . -652) (undo-tree-id327 . -657) (undo-tree-id328 . -657) (undo-tree-id329 . -656) (undo-tree-id330 . -657) (undo-tree-id331 . -656) (undo-tree-id332 . -657) (undo-tree-id333 . -656) (undo-tree-id334 . -657) (undo-tree-id335 . -656) (undo-tree-id336 . -657) (undo-tree-id337 . -432) (undo-tree-id338 . -433) (undo-tree-id339 . -432) (undo-tree-id340 . -433) (undo-tree-id341 . -656) (undo-tree-id342 . -657) (undo-tree-id343 . -656) (undo-tree-id344 . -657) (undo-tree-id345 . -650) (undo-tree-id346 . -651) (undo-tree-id347 . -640) (undo-tree-id348 . -641) (undo-tree-id349 . -370) (undo-tree-id350 . -371) (undo-tree-id351 . -365) (undo-tree-id352 . -366) (undo-tree-id353 . -308) (undo-tree-id354 . -309) (undo-tree-id355 . -247) (undo-tree-id356 . -248) (undo-tree-id357 . -57) (undo-tree-id358 . -58) (undo-tree-id359 . -657) (undo-tree-id360 . -657) (undo-tree-id361 . -657) (undo-tree-id362 . -657) (undo-tree-id363 . -657) (undo-tree-id364 . -656) (undo-tree-id365 . -657) (undo-tree-id366 . -656) (undo-tree-id367 . -657) (undo-tree-id368 . -656) (undo-tree-id369 . -657) (undo-tree-id370 . -656) (undo-tree-id371 . -657) (undo-tree-id372 . -432) (undo-tree-id373 . -433) (undo-tree-id374 . -432) (undo-tree-id375 . -433) (undo-tree-id376 . -656) (undo-tree-id377 . -657) (undo-tree-id378 . -656) (undo-tree-id379 . -657) (undo-tree-id380 . -650) (undo-tree-id381 . -651) (undo-tree-id382 . -640) (undo-tree-id383 . -641) (undo-tree-id384 . -370) (undo-tree-id385 . -371) (undo-tree-id386 . -365) (undo-tree-id387 . -366) (undo-tree-id388 . -308) (undo-tree-id389 . -309) (undo-tree-id390 . -247) (undo-tree-id391 . -248) (undo-tree-id392 . -57) (undo-tree-id393 . -58) (undo-tree-id394 . -657) (undo-tree-id395 . -552) (undo-tree-id396 . -552) (undo-tree-id397 . -552) (undo-tree-id398 . -552) (undo-tree-id399 . -209) (undo-tree-id400 . -209) (undo-tree-id401 . -209) (undo-tree-id402 . -209) (t 24167 37269 383873 586000)) nil (24167 37345 559693 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1916) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1)) nil (24167 37269 371060 0) 0 nil]) ((#("    #[debug(format = \"0x{:04x}\")]" 0 4 (fontified t) 4 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 6 11 (face font-lock-preprocessor-face fontified t) 11 12 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 12 21 (face font-lock-preprocessor-face fontified t) 21 27 (face font-lock-string-face fontified t) 27 31 (face font-lock-string-face fontified t) 31 32 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 32 33 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t)) . 1916) (undo-tree-id255 . -16) (undo-tree-id256 . -16) (undo-tree-id257 . -16) (undo-tree-id258 . -16) (undo-tree-id259 . -16) (undo-tree-id260 . -33)) nil (24167 37269 371072 0) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1858) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 1859) nil (24167 37269 371082 0) 0 nil]) ((nil rear-nonsticky nil 1858 . 1859) (nil fontified nil 1842 . 1859) (1842 . 1859)) nil (24167 37269 371085 0) 0 nil]) ((#("#[derive(CustomDebug)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 20 (face font-lock-preprocessor-face fontified t) 20 21 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 21 22 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 1842) (undo-tree-id268 . -22) (undo-tree-id269 . -22) (undo-tree-id270 . -22) (undo-tree-id271 . -21) (undo-tree-id272 . -22) (undo-tree-id273 . -21) (undo-tree-id274 . -22) (undo-tree-id275 . -21) (undo-tree-id276 . -22) (undo-tree-id277 . -21) (undo-tree-id278 . -22) (undo-tree-id279 . -21) (undo-tree-id280 . -22) (undo-tree-id281 . -21) (undo-tree-id282 . -22) (undo-tree-id283 . -1) (undo-tree-id284 . -2) (undo-tree-id285 . -22) (undo-tree-id286 . -22) (undo-tree-id287 . -22) (undo-tree-id288 . -22) (undo-tree-id289 . -22) (undo-tree-id290 . -22) (t 24167 37233 356046 999000)) nil (24167 37269 371112 0) 0 nil]) ((nil rear-nonsticky nil 2378 . 2379) (nil fontified nil 1990 . 2379) (1990 . 2379)) nil (24167 37233 343164 0) 0 nil]) ((#("impl Frame {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        context(
            \"Ethernet frame\",
            map(
                tuple((Addr::parse, Addr::parse, context(\"EtherType\", be_u16))),
                |(dst, src, ether_type)| Self {
                    dst,
                    src,
                    ether_type,
                },
            ),
        )(i)
    }
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 29 (face font-lock-function-name-face fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (face font-lock-variable-name-face fontified t) 31 33 (fontified t) 33 38 (face font-lock-constant-face fontified t) 38 40 (fontified t) 40 45 (face font-lock-type-face fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 48 (fontified t) 48 49 (fontified t syntax-table #2#) 49 50 (fontified t) 50 55 (face font-lock-constant-face fontified t) 55 57 (fontified t) 57 60 (face font-lock-type-face fontified t) 60 63 (face font-lock-type-face fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 68 (face font-lock-type-face fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t) 72 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-3-face) fontified t) 88 101 (fontified t) 101 117 (face font-lock-string-face fontified t) 117 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-4-face) fontified t) 135 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-5-face) fontified t) 158 159 (face (rainbow-delimiters-depth-6-face) fontified t) 159 163 (face font-lock-type-face fontified t) 163 172 (fontified t) 172 176 (face font-lock-type-face fontified t) 176 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-7-face) fontified t) 193 204 (face font-lock-string-face fontified t) 204 212 (fontified t) 212 213 (face (rainbow-delimiters-depth-7-face) fontified t) 213 214 (face (rainbow-delimiters-depth-6-face) fontified t) 214 215 (face (rainbow-delimiters-depth-5-face) fontified t) 215 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-5-face) fontified t) 235 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-5-face) fontified t) 256 258 (fontified t) 258 262 (face font-lock-type-face fontified t) 262 263 (fontified t) 263 264 (face (rainbow-delimiters-depth-5-face) fontified t) 264 284 (fontified t) 284 290 (fontified t) 290 363 (fontified t) 363 364 (face (rainbow-delimiters-depth-5-face) fontified t) 364 378 (fontified t) 378 379 (face (rainbow-delimiters-depth-4-face) fontified t) 379 389 (fontified t) 389 390 (face (rainbow-delimiters-depth-3-face) fontified t) 390 391 (face (rainbow-delimiters-depth-3-face) fontified t) 391 392 (fontified t) 392 393 (face (rainbow-delimiters-depth-3-face) fontified t) 393 398 (fontified t) 398 399 (face (rainbow-delimiters-depth-2-face) fontified t) 399 400 (fontified t) 400 401 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1990) (undo-tree-id132 . -315) (undo-tree-id133 . -315) (undo-tree-id134 . -347) (undo-tree-id135 . -347) (undo-tree-id136 . -366) (undo-tree-id137 . -366) (undo-tree-id138 . -401) (undo-tree-id139 . -265) (undo-tree-id140 . -265) (undo-tree-id141 . -290) (undo-tree-id142 . -290) (undo-tree-id143 . -89) (undo-tree-id144 . -89) (undo-tree-id145 . -217) (undo-tree-id146 . -217) (undo-tree-id147 . -72) (undo-tree-id148 . -72) (undo-tree-id149 . -13) (undo-tree-id150 . -13) (undo-tree-id151 . -136) (undo-tree-id152 . -136) (undo-tree-id153 . -119) (undo-tree-id154 . -119) (undo-tree-id155 . -394) (undo-tree-id156 . -394) (undo-tree-id157 . -400) (undo-tree-id158 . -400) (undo-tree-id159 . -381) (undo-tree-id160 . -381) (undo-tree-id161 . -13) (undo-tree-id162 . -13) (undo-tree-id163 . -13) (undo-tree-id164 . -13) (undo-tree-id165 . -13) (undo-tree-id166 . -13) (undo-tree-id167 . -13) (undo-tree-id168 . -72) (undo-tree-id169 . -72) (undo-tree-id170 . -72) (undo-tree-id171 . -89) (undo-tree-id172 . -89) (undo-tree-id173 . -89) (undo-tree-id174 . -119) (undo-tree-id175 . -119) (undo-tree-id176 . -119) (undo-tree-id177 . -136) (undo-tree-id178 . -136) (undo-tree-id179 . -136) (undo-tree-id180 . -136) (undo-tree-id181 . -136) (undo-tree-id182 . -136) (undo-tree-id183 . -136) (undo-tree-id184 . -217) (undo-tree-id185 . -217) (undo-tree-id186 . -217) (undo-tree-id187 . -265) (undo-tree-id188 . -265) (undo-tree-id189 . -265) (undo-tree-id190 . -290) (undo-tree-id191 . -290) (undo-tree-id192 . -290) (undo-tree-id193 . -315) (undo-tree-id194 . -315) (undo-tree-id195 . -315) (undo-tree-id196 . -347) (undo-tree-id197 . -347) (undo-tree-id198 . -347) (undo-tree-id199 . -366) (undo-tree-id200 . -366) (undo-tree-id201 . -366) (undo-tree-id202 . -381) (undo-tree-id203 . -381) (undo-tree-id204 . -381) (undo-tree-id205 . -394) (undo-tree-id206 . -394) (undo-tree-id207 . -394) (undo-tree-id208 . -400) (undo-tree-id209 . -400) (undo-tree-id210 . -400) (undo-tree-id211 . -400) (undo-tree-id212 . -400) (undo-tree-id213 . -401) (undo-tree-id214 . -401) (undo-tree-id215 . -400) (undo-tree-id216 . -401) (undo-tree-id217 . -400) (undo-tree-id218 . -401) (undo-tree-id219 . -400) (undo-tree-id220 . -401) (undo-tree-id221 . -400) (undo-tree-id222 . -401) (undo-tree-id223 . -256) (undo-tree-id224 . -257) (undo-tree-id225 . -256) (undo-tree-id226 . -257) (undo-tree-id227 . -400) (undo-tree-id228 . -401) (undo-tree-id229 . -400) (undo-tree-id230 . -401) (undo-tree-id231 . -398) (undo-tree-id232 . -399) (undo-tree-id233 . -363) (undo-tree-id234 . -364) (undo-tree-id235 . -263) (undo-tree-id236 . -264) (undo-tree-id237 . -70) (undo-tree-id238 . -71) (undo-tree-id239 . -11) (undo-tree-id240 . -12) (undo-tree-id241 . -401) (undo-tree-id242 . -401) (undo-tree-id243 . -401) (undo-tree-id244 . -401) (undo-tree-id245 . -401) (undo-tree-id246 . -401) (undo-tree-id247 . -400) (undo-tree-id248 . -400) (undo-tree-id249 . -400) (undo-tree-id250 . -400) (undo-tree-id251 . -400) (t 24167 37185 875227 769000)) nil (24167 37233 343332 0) 0 nil]) ((1976 . 1985)) nil (24167 37185 862954 0) 0 nil]) ((#("u16" 0 3 (face font-lock-type-face fontified t)) . -1976) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) 1979 (t 24167 37132 550413 616000)) nil (24167 37185 862979 0) 0 nil]) ((#("n" 0 1 (fontified t)) . -226) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 227) nil (24167 37132 538200 0) 0 nil]) ((nil rear-nonsticky nil 274 . 275) (nil fontified nil 228 . 275) (228 . 275)) nil (24167 37132 538206 0) 0 nil]) ((#("#[derive(CustomDebug)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 20 (face font-lock-preprocessor-face fontified t) 20 21 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 21 22 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 228) (undo-tree-id98 . -22) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -22) (undo-tree-id105 . -22) (undo-tree-id106 . -21) (undo-tree-id107 . -22) (undo-tree-id108 . -21) (undo-tree-id109 . -22) (undo-tree-id110 . -21) (undo-tree-id111 . -22) (undo-tree-id112 . -21) (undo-tree-id113 . -22) (undo-tree-id114 . -21) (undo-tree-id115 . -22) (undo-tree-id116 . -21) (undo-tree-id117 . -22) (undo-tree-id118 . -1) (undo-tree-id119 . -2) (undo-tree-id120 . -22) (undo-tree-id121 . -22) (undo-tree-id122 . -22) (undo-tree-id123 . -22) (undo-tree-id124 . -22) (undo-tree-id125 . -22)) nil (24167 37132 538243 0) 0 nil]) ((226 . 227) (t 24167 37121 120213 313000)) nil (24167 37132 538245 0) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . -104) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 105) nil (24167 37121 106667 0) 0 nil]) ((nil rear-nonsticky nil 104 . 105) (nil fontified nil 71 . 105) (71 . 105)) nil (24167 37121 106672 0) 0 nil]) ((70 . 71) (t 24167 37050 254828 578000)) nil (24167 37121 106674 0) 0 nil]) ((nil rear-nonsticky nil 971 . 972) (nil fontified nil 296 . 972) (296 . 972)) nil (24167 37050 250442 0) 0 nil]) ((294 . 296)) nil (24167 37050 250447 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -192) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 193 (t 24167 36837 650154 847000)) nil (24167 37050 250489 0) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 869 . 870) (nil fontified nil 194 . 870) (194 . 870)) ((#("impl EtherType {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        let original_i = i;
        let (i, x) = context(\"EtherType\", be_u16)(i)?;
        // `i` is now the remaining input after reading the be_u16

        match EtherType::try_from(x) {
            Some(typ) => Ok((i, typ)),
            None => {
                let msg = format!(\"unknown EtherType 0x{:04X}\", x);
                // we could hardcode `&original_i[..4]` but why bother?
                use nom::Offset;
                let err_slice = &original_i[..original_i.offset(i)];

                Err(nom::Err::Error(parse::Error::custom(err_slice, msg)))
            }
        }
    }
}" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-1-face) fontified nil) 16 21 (fontified nil) 21 24 (face font-lock-keyword-face fontified nil) 24 25 (fontified nil) 25 27 (face font-lock-keyword-face fontified nil) 27 28 (fontified nil) 28 33 (face font-lock-function-name-face fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (face font-lock-variable-name-face fontified nil) 35 37 (fontified nil) 37 42 (face font-lock-constant-face fontified nil) 42 44 (fontified nil) 44 49 (face font-lock-type-face fontified nil) 49 50 (face (rainbow-delimiters-depth-2-face) fontified nil) 50 52 (fontified nil) 52 53 (syntax-table #2# fontified nil) 53 54 (fontified nil) 54 59 (face font-lock-constant-face fontified nil) 59 61 (fontified nil) 61 67 (face font-lock-type-face fontified nil) 67 68 (face (rainbow-delimiters-depth-2-face) fontified nil) 68 72 (face font-lock-type-face fontified nil) 72 73 (face (rainbow-delimiters-depth-2-face) fontified nil) 73 74 (fontified nil) 74 75 (face (rainbow-delimiters-depth-2-face) fontified nil) 75 84 (fontified nil) 84 87 (face font-lock-keyword-face fontified nil) 87 88 (fontified nil) 88 98 (face font-lock-variable-name-face fontified nil) 98 112 (fontified nil) 112 115 (face font-lock-keyword-face fontified nil) 115 116 (fontified nil) 116 117 (face (rainbow-delimiters-depth-3-face) fontified nil) 117 121 (fontified nil) 121 122 (face (rainbow-delimiters-depth-3-face) fontified nil) 122 132 (fontified nil) 132 133 (face (rainbow-delimiters-depth-3-face) fontified nil) 133 144 (face font-lock-string-face fontified nil) 144 152 (fontified nil) 152 153 (face (rainbow-delimiters-depth-3-face) fontified nil) 153 154 (face (rainbow-delimiters-depth-3-face) fontified nil) 154 155 (fontified nil) 155 156 (face (rainbow-delimiters-depth-3-face) fontified nil) 156 157 (face rust-question-mark-face fontified nil) 157 167 (fontified nil) 167 170 (face font-lock-comment-delimiter-face fontified nil) 170 226 (face font-lock-comment-face fontified nil) 226 235 (fontified nil) 235 240 (face font-lock-keyword-face fontified nil) 240 241 (fontified nil) 241 250 (face font-lock-type-face fontified nil) 250 260 (fontified nil) 260 261 (face (rainbow-delimiters-depth-3-face) fontified nil) 261 262 (fontified nil) 262 263 (face (rainbow-delimiters-depth-3-face) fontified nil) 263 264 (fontified nil) 264 265 (face (rainbow-delimiters-depth-3-face) fontified nil) 265 278 (fontified nil) 278 282 (face font-lock-type-face fontified nil) 282 283 (face (rainbow-delimiters-depth-4-face) fontified nil) 283 286 (fontified nil) 286 287 (face (rainbow-delimiters-depth-4-face) fontified nil) 287 289 (fontified nil) 289 290 (syntax-table #2# fontified nil) 290 291 (fontified nil) 291 293 (face font-lock-type-face fontified nil) 293 294 (face (rainbow-delimiters-depth-4-face) fontified nil) 294 295 (face (rainbow-delimiters-depth-5-face) fontified nil) 295 301 (fontified nil) 301 302 (face (rainbow-delimiters-depth-5-face) fontified nil) 302 303 (face (rainbow-delimiters-depth-4-face) fontified nil) 303 317 (fontified nil) 317 321 (face font-lock-type-face fontified nil) 321 323 (fontified nil) 323 324 (syntax-table #2# fontified nil) 324 325 (fontified nil) 325 326 (face (rainbow-delimiters-depth-4-face) fontified nil) 326 343 (fontified nil) 343 346 (face font-lock-keyword-face fontified nil) 346 347 (fontified nil) 347 350 (face font-lock-variable-name-face fontified nil) 350 353 (fontified nil) 353 360 (face rust-builtin-formatting-macro-face fontified nil) 360 361 (face (rainbow-delimiters-depth-5-face) fontified nil) 361 382 (face font-lock-string-face fontified nil) 382 388 (face rust-string-interpolation-face fontified nil) 388 389 (face font-lock-string-face fontified nil) 389 392 (fontified nil) 392 393 (face (rainbow-delimiters-depth-5-face) fontified nil) 393 411 (fontified nil) 411 414 (face font-lock-comment-delimiter-face fontified nil) 414 467 (face font-lock-comment-face fontified nil) 467 483 (fontified nil) 483 486 (face font-lock-keyword-face fontified nil) 486 487 (fontified nil) 487 490 (face font-lock-constant-face fontified nil) 490 492 (fontified nil) 492 498 (face font-lock-type-face fontified nil) 498 500 (fontified nil) 500 516 (fontified nil) 516 519 (face font-lock-keyword-face fontified nil) 519 520 (fontified nil) 520 529 (face font-lock-variable-name-face fontified nil) 529 543 (fontified nil) 543 544 (face (rainbow-delimiters-depth-5-face) fontified nil) 544 563 (fontified nil) 563 564 (face (rainbow-delimiters-depth-6-face) fontified nil) 564 565 (fontified nil) 565 566 (face (rainbow-delimiters-depth-6-face) fontified nil) 566 567 (face (rainbow-delimiters-depth-5-face) fontified nil) 567 586 (fontified nil) 586 589 (face font-lock-type-face fontified nil) 589 590 (face (rainbow-delimiters-depth-5-face) fontified nil) 590 593 (face font-lock-constant-face fontified nil) 593 595 (fontified nil) 595 598 (face font-lock-type-face fontified nil) 598 600 (fontified nil) 600 605 (face font-lock-type-face fontified nil) 605 606 (face (rainbow-delimiters-depth-6-face) fontified nil) 606 611 (face font-lock-constant-face fontified nil) 611 613 (fontified nil) 613 618 (face font-lock-type-face fontified nil) 618 626 (fontified nil) 626 627 (face (rainbow-delimiters-depth-7-face) fontified nil) 627 641 (fontified nil) 641 642 (face (rainbow-delimiters-depth-7-face) fontified nil) 642 643 (face (rainbow-delimiters-depth-6-face) fontified nil) 643 644 (face (rainbow-delimiters-depth-5-face) fontified nil) 644 657 (fontified nil) 657 658 (face (rainbow-delimiters-depth-4-face) fontified nil) 658 667 (fontified nil) 667 668 (face (rainbow-delimiters-depth-3-face) fontified nil) 668 673 (fontified nil) 673 674 (face (rainbow-delimiters-depth-2-face) fontified nil) 674 675 (fontified nil) 675 676 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 194) (undo-tree-id0 . -76) (undo-tree-id1 . -76) (undo-tree-id2 . -104) (undo-tree-id3 . -104) (undo-tree-id4 . -159) (undo-tree-id5 . -159) (undo-tree-id6 . -226) (undo-tree-id7 . -226) (undo-tree-id8 . -659) (undo-tree-id9 . -659) (undo-tree-id10 . -645) (undo-tree-id11 . -645) (undo-tree-id12 . -227) (undo-tree-id13 . -227) (undo-tree-id14 . -266) (undo-tree-id15 . -266) (undo-tree-id16 . -305) (undo-tree-id17 . -305) (undo-tree-id18 . -327) (undo-tree-id19 . -327) (undo-tree-id20 . -395) (undo-tree-id21 . -395) (undo-tree-id22 . -467) (undo-tree-id23 . -467) (undo-tree-id24 . -569) (undo-tree-id25 . -569) (undo-tree-id26 . -500) (undo-tree-id27 . -500) (undo-tree-id28 . -570) (undo-tree-id29 . -570) (undo-tree-id30 . -17) (undo-tree-id31 . -17) (undo-tree-id32 . -226) (undo-tree-id33 . -252) (undo-tree-id34 . -260) (undo-tree-id35 . -620) (undo-tree-id36 . -626) (undo-tree-id37 . -226) (undo-tree-id38 . -226) (nil fontified t 868 . 869) (nil fontified t 867 . 868) (nil fontified t 862 . 867) (nil fontified t 861 . 862) (nil fontified t 852 . 861) (nil fontified t 851 . 852) (nil fontified t 838 . 851) (nil fontified t 837 . 838) (nil fontified t 836 . 837) (nil fontified t 835 . 836) (nil fontified t 821 . 835) (nil fontified t 820 . 821) (nil fontified t 812 . 820) (nil fontified t 807 . 812) (nil fontified t 805 . 807) (nil fontified t 800 . 805) (nil fontified t 799 . 800) (nil fontified t 794 . 799) (nil fontified t 792 . 794) (nil fontified t 789 . 792) (nil fontified t 787 . 789) (nil fontified t 784 . 787) (nil fontified t 783 . 784) (nil fontified t 780 . 783) (nil fontified t 761 . 780) (nil fontified t 760 . 761) (nil fontified t 759 . 760) (nil fontified t 758 . 759) (nil fontified t 757 . 758) (nil fontified t 738 . 757) (nil fontified t 737 . 738) (nil fontified t 723 . 737) (nil fontified t 714 . 723) (nil fontified t 713 . 714) (nil fontified t 710 . 713) (nil fontified t 694 . 710) (nil fontified t 692 . 694) (nil fontified t 686 . 692) (nil fontified t 684 . 686) (nil fontified t 681 . 684) (nil fontified t 680 . 681) (nil fontified t 677 . 680) (nil fontified t 661 . 677) (nil fontified t 608 . 661) (nil fontified t 605 . 608) (nil fontified t 587 . 605) (nil fontified t 586 . 587) (nil fontified t 583 . 586) (nil fontified t 582 . 583) (nil fontified t 576 . 582) (nil fontified t 555 . 576) (nil fontified t 554 . 555) (nil fontified t 547 . 554) (nil fontified t 544 . 547) (nil fontified t 541 . 544) (nil fontified t 540 . 541) (nil fontified t 537 . 540) (nil fontified t 520 . 537) (nil fontified t 519 . 520) (nil fontified t 518 . 519) (nil fontified t 517 . 518) (nil fontified t 515 . 517) (nil fontified t 511 . 515) (nil fontified t 497 . 511) (nil fontified t 496 . 497) (nil fontified t 495 . 496) (nil fontified t 489 . 495) (nil fontified t 488 . 489) (nil fontified t 487 . 488) (nil fontified t 485 . 487) (nil fontified t 484 . 485) (nil fontified t 483 . 484) (nil fontified t 481 . 483) (nil fontified t 480 . 481) (nil fontified t 477 . 480) (nil fontified t 476 . 477) (nil fontified t 472 . 476) (nil fontified t 459 . 472) (nil fontified t 458 . 459) (nil fontified t 457 . 458) (nil fontified t 456 . 457) (nil fontified t 455 . 456) (nil fontified t 454 . 455) (nil fontified t 444 . 454) (nil fontified t 435 . 444) (nil fontified t 434 . 435) (nil fontified t 429 . 434) (nil fontified t 420 . 429) (nil fontified t 364 . 420) (nil fontified t 361 . 364) (nil fontified t 351 . 361) (nil fontified t 350 . 351) (nil fontified t 349 . 350) (nil fontified t 348 . 349) (nil fontified t 347 . 348) (nil fontified t 346 . 347) (nil fontified t 338 . 346) (nil fontified t 327 . 338) (nil fontified t 326 . 327) (nil fontified t 316 . 326) (nil fontified t 315 . 316) (nil fontified t 311 . 315) (nil fontified t 310 . 311) (nil fontified t 309 . 310) (nil fontified t 306 . 309) (nil fontified t 292 . 306) (nil fontified t 282 . 292) (nil fontified t 281 . 282) (nil fontified t 278 . 281) (nil fontified t 269 . 278) (nil fontified t 268 . 269) (nil fontified t 267 . 268) (nil fontified t 266 . 267) (nil fontified t 262 . 266) (nil fontified t 261 . 262) (nil fontified t 255 . 261) (nil fontified t 253 . 255) (nil fontified t 248 . 253) (nil fontified t 247 . 248) (nil fontified t 246 . 247) (nil fontified t 244 . 246) (nil fontified t 243 . 244) (nil fontified t 238 . 243) (nil fontified t 236 . 238) (nil fontified t 231 . 236) (nil fontified t 229 . 231) (nil fontified t 228 . 229) (nil fontified t 227 . 228) (nil fontified t 222 . 227) (nil fontified t 221 . 222) (nil fontified t 219 . 221) (nil fontified t 218 . 219) (nil fontified t 215 . 218) (nil fontified t 210 . 215) (nil fontified t 209 . 210) (nil fontified t 208 . 209) (nil fontified t 199 . 208) (nil fontified t 198 . 199) (nil fontified t 194 . 198) (nil rear-nonsticky t 869 . 870)) (24167 37043 689656 0) 0 nil]) ((193 . 195) (t 24167 36837 650154 847000)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 193) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1)) (24167 37043 690738 0) 0 nil] [nil nil ((#("crate::" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) . -5) (undo-tree-id0 . -7) (undo-tree-id1 . -5) (undo-tree-id2 . -5) (undo-tree-id3 . -7) (undo-tree-id4 . -7) 12 (t 24167 34069 212581 630000)) ((5 . 12) (t 24167 36767 133970 826000)) (24167 36767 121492 0) 0 nil]) nil nil (24167 37044 189385 0) 0 nil] #3# 10570 33 nil)