"98e424af617c9cebe72c7117b7aea9a01b002aa5"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#14=[nil nil ((555 . 559) (t 24169 50898 964478 123000)) nil (24169 61453 423365 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 39) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1)) nil (24169 50898 928602 0) 0 nil]) ((#("use byteorder::{ReadBytesExt, WriteBytesExt, BigEndian, LittleEndian};" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 28 (face font-lock-type-face fontified t) 28 30 (fontified t) 30 43 (face font-lock-type-face fontified t) 43 45 (fontified t) 45 54 (face font-lock-type-face fontified t) 54 56 (fontified t) 56 68 (face font-lock-type-face fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 70 (fontified t)) . 39) (undo-tree-id10950 . -16) (undo-tree-id10951 . -28) (undo-tree-id10952 . -30) (undo-tree-id10953 . -43) (undo-tree-id10954 . -45) (undo-tree-id10955 . -54) (undo-tree-id10956 . -56) (undo-tree-id10957 . -68) (undo-tree-id10958 . -70) (t 24169 50896 65543 413000)) nil (24169 50898 928619 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 502) (undo-tree-id10836 . -1) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1)) nil (24169 50896 36356 0) 0 nil]) ((#("	println!(\"{}\", rdr.read_u16::<BigEndian>().unwrap());" 0 1 (fontified t) 1 9 (face rust-builtin-formatting-macro-face fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face rust-string-interpolation-face fontified t) 12 13 (face rust-string-interpolation-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 16 (fontified t) 16 30 (fontified t) 30 31 (syntax-table #1=(1) fontified t) 31 40 (face font-lock-type-face fontified t) 40 41 (syntax-table #1# fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 44 (fontified t) 44 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 52 (face (rainbow-delimiters-depth-4-face) fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 54 (fontified t)) . 502) (undo-tree-id10839 . -54) (undo-tree-id10840 . -52) (undo-tree-id10841 . -44) (undo-tree-id10842 . -44) (undo-tree-id10843 . -28) (undo-tree-id10844 . -26) (undo-tree-id10845 . -26) (undo-tree-id10846 . -26) (undo-tree-id10847 . -26) (undo-tree-id10848 . -26) (undo-tree-id10849 . -26) (undo-tree-id10850 . -26) (undo-tree-id10851 . -26) (undo-tree-id10852 . -26) (undo-tree-id10853 . -28) (undo-tree-id10854 . -28) (undo-tree-id10855 . -28) (undo-tree-id10856 . -28) (undo-tree-id10857 . -28) (undo-tree-id10858 . -28) (undo-tree-id10859 . -28) (undo-tree-id10860 . -28) (undo-tree-id10861 . -28) (undo-tree-id10862 . -28) (undo-tree-id10863 . -28) (undo-tree-id10864 . -28) (undo-tree-id10865 . -28) (undo-tree-id10866 . -28) (undo-tree-id10867 . -28) (undo-tree-id10868 . -28) (undo-tree-id10869 . -28) (undo-tree-id10870 . -28) (undo-tree-id10871 . -28) (undo-tree-id10872 . -28) (undo-tree-id10873 . -28) (undo-tree-id10874 . -28) (undo-tree-id10875 . -28) (undo-tree-id10876 . -28) (undo-tree-id10877 . -28) (undo-tree-id10878 . -28) (undo-tree-id10879 . -28) (undo-tree-id10880 . -28) (undo-tree-id10881 . -28) (undo-tree-id10882 . -28) (undo-tree-id10883 . -28) (undo-tree-id10884 . -28) (undo-tree-id10885 . -28) (undo-tree-id10886 . -28) (undo-tree-id10887 . -28) (undo-tree-id10888 . -28) (undo-tree-id10889 . -28) (undo-tree-id10890 . -28) (undo-tree-id10891 . -28) (undo-tree-id10892 . -28) (undo-tree-id10893 . -28) (undo-tree-id10894 . -28) (undo-tree-id10895 . -28) (undo-tree-id10896 . -28) (undo-tree-id10897 . -28) (undo-tree-id10898 . -28) (undo-tree-id10899 . -28) (undo-tree-id10900 . -28) (undo-tree-id10901 . -28) (undo-tree-id10902 . -28) (undo-tree-id10903 . -28) (undo-tree-id10904 . -28) (undo-tree-id10905 . -28) (undo-tree-id10906 . -28) (undo-tree-id10907 . -28) (undo-tree-id10908 . -28) (undo-tree-id10909 . -28) (undo-tree-id10910 . -28) (undo-tree-id10911 . -10) (undo-tree-id10912 . -11) (undo-tree-id10913 . -9) (undo-tree-id10914 . -9) (undo-tree-id10915 . -10) (undo-tree-id10916 . -11) (undo-tree-id10917 . -9) (undo-tree-id10918 . -9) (undo-tree-id10919 . -9) (undo-tree-id10920 . -54) (undo-tree-id10921 . -54) (undo-tree-id10922 . -54) (undo-tree-id10923 . -52) (undo-tree-id10924 . -54) (undo-tree-id10925 . -54) (undo-tree-id10926 . -54) (undo-tree-id10927 . -54) (undo-tree-id10928 . -54)) nil (24169 50896 36485 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 502) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (undo-tree-id10933 . -1) (undo-tree-id10934 . -1)) nil (24169 50896 36498 0) 0 nil]) ((#("	let mut rdr = std::io::Cursor::new(i);" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 12 (face font-lock-variable-name-face fontified t) 12 15 (fontified t) 15 18 (face font-lock-constant-face fontified t) 18 20 (fontified t) 20 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 30 (face font-lock-type-face fontified t) 30 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (fontified t)) . 502) (undo-tree-id10935 . -28) (undo-tree-id10936 . -28) (undo-tree-id10937 . -28) (undo-tree-id10938 . -28) (undo-tree-id10939 . -28) (undo-tree-id10940 . -28) (undo-tree-id10941 . -28) (undo-tree-id10942 . -28) (undo-tree-id10943 . -9) (undo-tree-id10944 . -9) (undo-tree-id10945 . -9) (undo-tree-id10946 . -39) (t 24169 50768 790400 834000)) nil (24169 50896 36515 0) 0 nil]) ((568 . 570)) nil (24169 50768 755073 0) 0 nil]) ((#("6" 0 1 (fontified t)) . -568) (undo-tree-id10821 . -1) (undo-tree-id10822 . -1) (undo-tree-id10823 . -1) (undo-tree-id10824 . -1) (undo-tree-id10825 . -1) (undo-tree-id10826 . -1) (undo-tree-id10827 . -1) (undo-tree-id10828 . -1) (undo-tree-id10829 . -1) (undo-tree-id10830 . -1) (undo-tree-id10831 . -1) (#("4" 0 1 (fontified t)) . -569) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1) (undo-tree-id10834 . -1) (undo-tree-id10835 . -1) 570) nil (24169 50768 755113 0) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil nil ((#("
" 0 1 (fontified t)) . 39) (undo-tree-id10809 . -1) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1)) ((39 . 40) (t 24169 50737 80435 658000)) (24169 50737 50595 0) 0 nil]) ((#("use byteorder::{ReadBytesExt, WriteBytesExt, BigEndian, LittleEndian};" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 28 (face font-lock-type-face fontified t) 28 30 (fontified t) 30 43 (face font-lock-type-face fontified t) 43 45 (fontified t) 45 54 (face font-lock-type-face fontified t) 54 56 (fontified t) 56 68 (face font-lock-type-face fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 70 (fontified t)) . 39) (undo-tree-id10812 . -16) (undo-tree-id10813 . -28) (undo-tree-id10814 . -30) (undo-tree-id10815 . -43) (undo-tree-id10816 . -45) (undo-tree-id10817 . -54) (undo-tree-id10818 . -56) (undo-tree-id10819 . -68) (undo-tree-id10820 . -70) (t 24169 50732 662185 698000)) ((39 . 109)) (24169 50759 192457 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 502) (undo-tree-id10596 . -1) (undo-tree-id10597 . -1) (undo-tree-id10598 . -1) (undo-tree-id10600 . -1) (undo-tree-id10602 . -1) (undo-tree-id10604 . -1) (undo-tree-id10606 . -1) (undo-tree-id10608 . -1) (undo-tree-id10610 . -1) (undo-tree-id10612 . -1) (undo-tree-id10614 . -1) (undo-tree-id10616 . -1) (undo-tree-id10618 . -1) (undo-tree-id10620 . -1) (undo-tree-id10622 . -1) (undo-tree-id10624 . -1) (undo-tree-id10626 . -1) (undo-tree-id10628 . -1) (undo-tree-id10630 . -1) (undo-tree-id10632 . -1) (undo-tree-id10634 . -1) (undo-tree-id10636 . -1) (undo-tree-id10638 . -1) (undo-tree-id10640 . -1) (undo-tree-id10642 . -1) (undo-tree-id10644 . -1) (undo-tree-id10646 . -1) (undo-tree-id10648 . -1) (undo-tree-id10650 . -1) (undo-tree-id10652 . -1) (undo-tree-id10654 . -1) (undo-tree-id10656 . -1) (undo-tree-id10658 . -1) (undo-tree-id10660 . -1) (undo-tree-id10662 . -1) (undo-tree-id10664 . -1) (undo-tree-id10666 . -1) (undo-tree-id10668 . -1) (undo-tree-id10670 . -1) (undo-tree-id10672 . -1) (undo-tree-id10674 . -1) (undo-tree-id10676 . -1) (undo-tree-id10678 . -1) (undo-tree-id10680 . -1) (undo-tree-id10682 . -1) (undo-tree-id10684 . -1) (undo-tree-id10686 . -1) (undo-tree-id10688 . -1) (undo-tree-id10690 . -1) (undo-tree-id10692 . -1) (undo-tree-id10694 . -1) (undo-tree-id10696 . -1) (undo-tree-id10698 . -1) (undo-tree-id10700 . -1) (undo-tree-id10702 . -1) (undo-tree-id10704 . -1) (undo-tree-id10706 . -1) (undo-tree-id10708 . -1) (undo-tree-id10710 . -1) (undo-tree-id10712 . -1) (undo-tree-id10714 . -1) (undo-tree-id10716 . -1) (undo-tree-id10718 . -1) (undo-tree-id10720 . -1) (undo-tree-id10722 . -1) (undo-tree-id10724 . -1) (undo-tree-id10726 . -1) (undo-tree-id10728 . -1) (undo-tree-id10730 . -1) (undo-tree-id10732 . -1) (undo-tree-id10734 . -1) (undo-tree-id10736 . -1) (undo-tree-id10738 . -1) (undo-tree-id10740 . -1) (undo-tree-id10742 . -1) (undo-tree-id10744 . -1) (undo-tree-id10746 . -1) (undo-tree-id10748 . -1) (undo-tree-id10749 . -1) (undo-tree-id10751 . -1) (undo-tree-id10753 . -1) (undo-tree-id10755 . -1) (undo-tree-id10757 . -1) (undo-tree-id10759 . -1) (undo-tree-id10761 . -1) (undo-tree-id10763 . -1) (undo-tree-id10765 . -1) (undo-tree-id10767 . -1) (undo-tree-id10769 . -1) (undo-tree-id10771 . -1) (undo-tree-id10773 . -1) (undo-tree-id10775 . -1) (undo-tree-id10777 . -1) (undo-tree-id10779 . -1) (undo-tree-id10781 . -1) (undo-tree-id10783 . -1) (undo-tree-id10785 . -1) (undo-tree-id10787 . -1) (undo-tree-id10789 . -1) (undo-tree-id10791 . -1) (undo-tree-id10793 . -1) (undo-tree-id10795 . -1) (undo-tree-id10797 . -1) (undo-tree-id10799 . -1) (undo-tree-id10801 . -1) (undo-tree-id10803 . -1)) ((502 . 503)) (24169 50759 926621 0) 0 nil]) ((#("	let mut rdr = std::io::Cursor::new(i);" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 12 (face font-lock-variable-name-face fontified t) 12 15 (fontified t) 15 18 (face font-lock-constant-face fontified t) 18 20 (fontified t) 20 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 30 (face font-lock-type-face fontified t) 30 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (fontified t)) . 502) (undo-tree-id10805 . -12) (undo-tree-id10807 . -8) (t 24169 50730 949432 373000)) ((502 . 541)) (24169 50760 213926 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 542) (undo-tree-id10413 . -1) (undo-tree-id10414 . -1)) ((542 . 543)) (24169 50760 430647 0) 0 nil]) ((#("	println!(\"{}\", rdr.read_u64::<BigEndian>().unwrap());" 0 1 (fontified t) 1 9 (face rust-builtin-formatting-macro-face fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face rust-string-interpolation-face fontified t) 12 13 (face rust-string-interpolation-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 16 (fontified t) 16 30 (fontified t) 30 31 (syntax-table #1# fontified t) 31 40 (face font-lock-type-face fontified t) 40 41 (syntax-table #1# fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 44 (fontified t) 44 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 52 (face (rainbow-delimiters-depth-4-face) fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 54 (fontified t)) . 542) (undo-tree-id10416 . -52) (undo-tree-id10418 . -52) (undo-tree-id10420 . -52) (undo-tree-id10422 . -52) (undo-tree-id10424 . -52) (undo-tree-id10426 . -52) (undo-tree-id10428 . -52) (undo-tree-id10430 . -52) (undo-tree-id10432 . -52) (undo-tree-id10434 . -52) (undo-tree-id10436 . -52) (undo-tree-id10438 . -52) (undo-tree-id10440 . -52) (undo-tree-id10442 . -52) (undo-tree-id10444 . -52) (undo-tree-id10446 . -52) (undo-tree-id10448 . -52) (undo-tree-id10450 . -52) (undo-tree-id10452 . -52) (undo-tree-id10454 . -52) (undo-tree-id10456 . -52) (undo-tree-id10458 . -52) (undo-tree-id10460 . -52) (undo-tree-id10462 . -52) (undo-tree-id10464 . -52) (undo-tree-id10466 . -52) (undo-tree-id10468 . -52) (undo-tree-id10470 . -52) (undo-tree-id10472 . -52) (undo-tree-id10474 . -52) (undo-tree-id10476 . -52) (undo-tree-id10478 . -52) (undo-tree-id10480 . -52) (undo-tree-id10482 . -52) (undo-tree-id10484 . -52) (undo-tree-id10486 . -52) (undo-tree-id10488 . -52) (undo-tree-id10490 . -52) (undo-tree-id10492 . -52) (undo-tree-id10494 . -52) (undo-tree-id10496 . -52) (undo-tree-id10498 . -52) (undo-tree-id10500 . -52) (undo-tree-id10502 . -52) (undo-tree-id10504 . -52) (undo-tree-id10506 . -52) (undo-tree-id10508 . -9) (undo-tree-id10510 . -10) (undo-tree-id10512 . -11) (undo-tree-id10514 . -13) (undo-tree-id10516 . -13) (undo-tree-id10518 . -13) (undo-tree-id10520 . -16) (undo-tree-id10522 . -16) (undo-tree-id10524 . -16) (undo-tree-id10526 . -16) (undo-tree-id10528 . -16) (undo-tree-id10530 . -52) (undo-tree-id10532 . -52) (undo-tree-id10534 . -52) (undo-tree-id10536 . -54) (undo-tree-id10538 . -54) (undo-tree-id10540 . -54) (undo-tree-id10542 . -54) (undo-tree-id10544 . -54) (undo-tree-id10546 . -54) (undo-tree-id10548 . -54) (undo-tree-id10550 . -54) (undo-tree-id10552 . -54) (undo-tree-id10554 . -54) (undo-tree-id10556 . -54) (undo-tree-id10558 . -54) (undo-tree-id10560 . -54) (undo-tree-id10562 . -44) (undo-tree-id10564 . -44) (undo-tree-id10566 . -44) (undo-tree-id10567 . -44) (undo-tree-id10569 . -44) (undo-tree-id10571 . -44) (undo-tree-id10573 . -44) (undo-tree-id10575 . -44) (undo-tree-id10577 . -44) (undo-tree-id10579 . -44) (undo-tree-id10581 . -44) (undo-tree-id10583 . -44) (undo-tree-id10585 . -44) (undo-tree-id10587 . -44) (undo-tree-id10589 . -44) (undo-tree-id10591 . -44) (undo-tree-id10593 . -44) (undo-tree-id10595 . -54) (t 24169 50678 63582 839000)) ((542 . 596)) (24169 50760 726882 0) 0 nil]) ((594 . 596)) nil (24169 50761 135751 0) 0 nil]) ((#(";" 0 1 (fontified t)) . -594) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (undo-tree-id10237 . -1) (undo-tree-id10238 . -1) (undo-tree-id10239 . -1) (undo-tree-id10240 . -1) (undo-tree-id10241 . -1) (undo-tree-id10242 . -1) (undo-tree-id10243 . -1) (undo-tree-id10244 . -1) (undo-tree-id10245 . -1) (undo-tree-id10246 . -1) (undo-tree-id10247 . -1) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (undo-tree-id10263 . -1) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) (undo-tree-id10291 . -1) (undo-tree-id10292 . -1) (undo-tree-id10293 . -1) (undo-tree-id10294 . -1) (undo-tree-id10295 . -1) (undo-tree-id10296 . -1) (undo-tree-id10297 . -1) (undo-tree-id10298 . -1) (undo-tree-id10299 . -1) (undo-tree-id10300 . -1) (undo-tree-id10301 . -1) (undo-tree-id10302 . -1) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) (undo-tree-id10311 . -1) (undo-tree-id10312 . -1) (undo-tree-id10313 . -1) (undo-tree-id10314 . -1) (undo-tree-id10315 . -1) (undo-tree-id10316 . -1) (undo-tree-id10317 . -1) (undo-tree-id10318 . -1) (undo-tree-id10319 . -1) (undo-tree-id10320 . -1) (undo-tree-id10321 . -1) (undo-tree-id10322 . -1) (undo-tree-id10323 . -1) (undo-tree-id10324 . -1) (undo-tree-id10325 . -1) (undo-tree-id10326 . -1) (undo-tree-id10327 . -1) 595) nil (24169 50678 35110 0) 0 nil]) ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -558) (undo-tree-id10328 . -1) (undo-tree-id10329 . -1) (undo-tree-id10330 . -1) (undo-tree-id10331 . -1) (undo-tree-id10332 . -1) (undo-tree-id10333 . -1) (undo-tree-id10334 . -1) (undo-tree-id10335 . -1) (undo-tree-id10336 . -1) (undo-tree-id10337 . -1) (undo-tree-id10338 . 1) (undo-tree-id10339 . -1) (undo-tree-id10340 . -1) (undo-tree-id10341 . -1) 559) nil (24169 50678 35134 0) 0 nil]) ((556 . 558)) nil (24169 50678 35136 0) 0 nil]) ((#("," 0 1 (face font-lock-string-face fontified t)) . -555) (undo-tree-id10342 . -1) (undo-tree-id10343 . -1) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) (undo-tree-id10347 . -1) (undo-tree-id10348 . -1) (undo-tree-id10349 . -1) (undo-tree-id10350 . -1) 556) nil (24169 50678 35149 0) 0 nil]) ((555 . 556)) nil (24169 50678 35150 0) 0 nil]) ((553 . 555) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -553) (undo-tree-id10351 . 1) (undo-tree-id10352 . -1) (undo-tree-id10353 . -1) (553 . 554) (552 . 554) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -552) (undo-tree-id10354 . -1) (undo-tree-id10355 . -1) (552 . 553) (551 . 553) (#("(" 0 1 (fontified nil)) . -551) (undo-tree-id10356 . -1) (undo-tree-id10357 . -1) (543 . 552)) nil (24169 50678 35161 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -580) (undo-tree-id10358 . -1) (undo-tree-id10359 . -1) (undo-tree-id10360 . -1) (undo-tree-id10361 . -1) (undo-tree-id10362 . -1) (undo-tree-id10363 . -1) (undo-tree-id10364 . -1) (undo-tree-id10365 . -1) (undo-tree-id10366 . -1) (undo-tree-id10367 . -1) (undo-tree-id10368 . -1) (undo-tree-id10369 . -1) (undo-tree-id10370 . -1) (undo-tree-id10371 . -1) (undo-tree-id10372 . -1) (undo-tree-id10373 . -1) (undo-tree-id10374 . -1) (undo-tree-id10375 . -1) (undo-tree-id10376 . -1) (undo-tree-id10377 . -1) (undo-tree-id10378 . -1) (undo-tree-id10379 . -1) (undo-tree-id10380 . -1) (undo-tree-id10381 . -1) (undo-tree-id10382 . -1) (undo-tree-id10383 . -1) (undo-tree-id10384 . -1) (undo-tree-id10385 . -1) (undo-tree-id10386 . -1) (undo-tree-id10387 . -1) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (undo-tree-id10391 . -1) (undo-tree-id10392 . -1) (undo-tree-id10393 . -1) (undo-tree-id10394 . -1) (undo-tree-id10395 . -1) (undo-tree-id10396 . -1) (undo-tree-id10397 . -1) (undo-tree-id10398 . -1) (undo-tree-id10399 . -1) 581) nil (24169 50678 35213 0) 0 nil]) ((#("	println!(\"{}\", a);" 0 1 (fontified t) 1 9 (face rust-builtin-formatting-macro-face fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face rust-string-interpolation-face fontified t) 12 13 (face rust-string-interpolation-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (fontified t)) . 581) (undo-tree-id10400 . -19) (undo-tree-id10401 . -19) (undo-tree-id10402 . -19) (undo-tree-id10403 . -16) (undo-tree-id10404 . -17) (undo-tree-id10405 . -19) (undo-tree-id10406 . -19) (undo-tree-id10407 . -19) (undo-tree-id10408 . -19) (undo-tree-id10409 . -19) (undo-tree-id10410 . -19) (undo-tree-id10411 . -19) (undo-tree-id10412 . -19) (t 24169 50657 63862 126000)) nil (24169 50678 35231 0) 0 nil]) ((579 . 580)) nil (24169 50657 28897 0) 0 nil]) ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -579) (undo-tree-id10199 . -1) (undo-tree-id10200 . -1) (undo-tree-id10201 . -1) (undo-tree-id10202 . -1) (undo-tree-id10203 . -1) (undo-tree-id10204 . -1) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) (undo-tree-id10207 . -1) (undo-tree-id10208 . -1) (undo-tree-id10209 . -1) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -1) (undo-tree-id10215 . -1) (undo-tree-id10216 . -1) (undo-tree-id10217 . -1) (#(";" 0 1 (fontified t rear-nonsticky t)) . -580) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) (undo-tree-id10225 . -1) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (undo-tree-id10229 . -1) 581) nil (24169 50657 28946 0) 0 nil] [nil ([nil nil ((#("BigEndian>()." 0 9 (face font-lock-type-face fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t) 12 13 (fontified t)) . -558) (undo-tree-id10107 . -13) (undo-tree-id10108 . -13) (undo-tree-id10109 . -13) (undo-tree-id10110 . -13) (undo-tree-id10111 . -13) (undo-tree-id10112 . -13) (undo-tree-id10113 . -13) (undo-tree-id10114 . -13) (undo-tree-id10115 . -13) (undo-tree-id10116 . -13) (undo-tree-id10117 . -13) (undo-tree-id10118 . -13) 571) ((558 . 571)) (24169 50654 685903 0) 0 nil]) ((#("unwrap());" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (face (rainbow-delimiters-mismatched-face) fontified t) 9 10 (fontified t rear-nonsticky t)) . -571) (undo-tree-id10119 . -10) (undo-tree-id10120 . -10) (undo-tree-id10121 . -10) (undo-tree-id10122 . -10) (undo-tree-id10123 . -8) (undo-tree-id10124 . -9) (undo-tree-id10125 . -10) (undo-tree-id10126 . -10) (undo-tree-id10127 . -10) 581) ((571 . 581)) (24169 50654 686245 0) 0 nil]) ((#("assert_" 0 7 (fontified t)) . -543) (undo-tree-id10128 . -7) (undo-tree-id10129 . -7) (undo-tree-id10130 . -7) (undo-tree-id10131 . -7) (undo-tree-id10132 . -7) (undo-tree-id10133 . -7) (undo-tree-id10134 . -7) (undo-tree-id10135 . -7) (undo-tree-id10136 . -7) (undo-tree-id10137 . -7) (undo-tree-id10138 . -7) (undo-tree-id10139 . -7) (undo-tree-id10140 . -7) (undo-tree-id10141 . -7) (undo-tree-id10142 . -7) (undo-tree-id10143 . -7) (undo-tree-id10144 . -7) (undo-tree-id10145 . -7) (undo-tree-id10146 . -7) (undo-tree-id10147 . -7) (undo-tree-id10148 . -7) (undo-tree-id10149 . -7) (undo-tree-id10150 . -7) (undo-tree-id10151 . -7) (undo-tree-id10152 . -7) (undo-tree-id10153 . -7) (undo-tree-id10154 . -7) (undo-tree-id10155 . -7) (undo-tree-id10156 . -7) (undo-tree-id10157 . -7) (undo-tree-id10158 . -7) (undo-tree-id10159 . -7) (undo-tree-id10160 . -7) 550) nil (24169 50655 130275 0) 0 nil]) ((#("eq!(" 0 3 (face font-lock-preprocessor-face fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -550) (undo-tree-id10161 . -4) (undo-tree-id10162 . -4) (undo-tree-id10163 . -4) (undo-tree-id10164 . -4) (undo-tree-id10165 . -4) (undo-tree-id10166 . -4) (undo-tree-id10167 . -4) (undo-tree-id10168 . -4) (undo-tree-id10169 . -4) (undo-tree-id10170 . -4) (undo-tree-id10171 . -4) (undo-tree-id10172 . -4) (undo-tree-id10173 . -4) (undo-tree-id10174 . -4) (undo-tree-id10175 . -4) (undo-tree-id10176 . -4) (undo-tree-id10177 . -4) (undo-tree-id10178 . -4) (undo-tree-id10179 . -4) (undo-tree-id10180 . -4) (undo-tree-id10181 . -4) (undo-tree-id10182 . -4) (undo-tree-id10183 . -4) (undo-tree-id10184 . -4) (undo-tree-id10185 . -4) (undo-tree-id10186 . -4) (undo-tree-id10187 . -4) (undo-tree-id10188 . -4) (undo-tree-id10189 . -4) (undo-tree-id10190 . -4) 554) nil (24169 50654 685998 0) 0 nil]) ((#("517, " 0 3 (face highlight-numbers-number fontified t) 3 5 (fontified t)) . -554) (undo-tree-id10191 . -5) (undo-tree-id10192 . -5) (undo-tree-id10193 . -5) (undo-tree-id10194 . -5) (undo-tree-id10195 . -5) (undo-tree-id10196 . -5) (undo-tree-id10197 . -5) (undo-tree-id10198 . -5) 559 (t 24169 50644 173801 870000)) nil (24169 50654 686009 0) 0 nil]) ((569 . 571)) nil (24169 50644 148114 0) 0 nil]) ((#("1" 0 1 (fontified t)) . -569) (undo-tree-id10077 . -1) (undo-tree-id10078 . -1) (undo-tree-id10079 . -1) (undo-tree-id10080 . -1) (undo-tree-id10081 . -1) (undo-tree-id10082 . -1) (undo-tree-id10083 . -1) (undo-tree-id10084 . -1) (undo-tree-id10085 . -1) (undo-tree-id10086 . -1) (undo-tree-id10087 . -1) (undo-tree-id10088 . -1) (undo-tree-id10089 . -1) (undo-tree-id10090 . -1) (undo-tree-id10091 . -1) (undo-tree-id10092 . -1) (undo-tree-id10093 . -1) (undo-tree-id10094 . -1) (undo-tree-id10095 . -1) (undo-tree-id10096 . -1) (undo-tree-id10097 . -1) (undo-tree-id10098 . -1) (undo-tree-id10099 . -1) (undo-tree-id10100 . -1) (undo-tree-id10101 . -1) (undo-tree-id10102 . -1) (#("6" 0 1 (fontified t)) . -570) (undo-tree-id10103 . -1) (undo-tree-id10104 . -1) (undo-tree-id10105 . -1) (undo-tree-id10106 . -1) 571 (t 24169 50635 902704 231000)) nil (24169 50644 148169 0) 0 nil]) ((538 . 539)) nil (24169 50635 875511 0) 0 nil]) ((#("vec![" 0 4 (face font-lock-preprocessor-face fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -538) (undo-tree-id9822 . -5) (undo-tree-id9823 . -5) (undo-tree-id9824 . -5) (undo-tree-id9825 . -5) (undo-tree-id9826 . -5) (undo-tree-id9827 . -5) (undo-tree-id9828 . -5) (undo-tree-id9829 . -5) (undo-tree-id9830 . -5) (undo-tree-id9831 . -5) (undo-tree-id9832 . -5) (undo-tree-id9833 . -5) (undo-tree-id9834 . -5) (undo-tree-id9835 . -5) (undo-tree-id9836 . -5) (undo-tree-id9837 . -5) (undo-tree-id9838 . -5) (undo-tree-id9839 . -5) (undo-tree-id9840 . -5) (undo-tree-id9841 . -5) (undo-tree-id9842 . -5) (undo-tree-id9843 . -4) (undo-tree-id9844 . -5) (undo-tree-id9845 . -5) (undo-tree-id9846 . -5) (undo-tree-id9847 . -5) (undo-tree-id9848 . -5) (undo-tree-id9849 . -5) (undo-tree-id9850 . -5) (undo-tree-id9851 . -5) (undo-tree-id9852 . -5) (undo-tree-id9853 . -5) (undo-tree-id9854 . -5) (undo-tree-id9855 . -5) (undo-tree-id9856 . -5) (undo-tree-id9857 . -5) (undo-tree-id9858 . -5) (undo-tree-id9859 . -5) (undo-tree-id9860 . -5) (undo-tree-id9861 . -5) (undo-tree-id9862 . -5) (undo-tree-id9863 . -5) (undo-tree-id9864 . -5) (undo-tree-id9865 . -5) (undo-tree-id9866 . -5) (undo-tree-id9867 . -5) (undo-tree-id9868 . -5) (undo-tree-id9869 . -5) (undo-tree-id9870 . -5) (undo-tree-id9871 . -5) (undo-tree-id9872 . -5) (undo-tree-id9873 . -5) (undo-tree-id9874 . -5) (undo-tree-id9875 . -5) (undo-tree-id9876 . -5) (undo-tree-id9877 . -5) (undo-tree-id9878 . -5) (undo-tree-id9879 . -5) (undo-tree-id9880 . -5) (undo-tree-id9881 . -5) (undo-tree-id9882 . -5) (undo-tree-id9883 . -4) (undo-tree-id9884 . -5) (undo-tree-id9885 . -4) (undo-tree-id9886 . -5) (undo-tree-id9887 . -5) (undo-tree-id9888 . -5) (undo-tree-id9889 . -5) (undo-tree-id9890 . -5) (undo-tree-id9891 . -5) 543) nil (24169 50635 875614 0) 0 nil]) ((#("2, " 0 1 (face highlight-numbers-number fontified t) 1 3 (fontified t)) . -543) (undo-tree-id9892 . -3) (undo-tree-id9893 . -3) (undo-tree-id9894 . -3) (undo-tree-id9895 . -3) (undo-tree-id9896 . -3) (undo-tree-id9897 . -3) (undo-tree-id9898 . -3) (undo-tree-id9899 . -3) (undo-tree-id9900 . -3) (undo-tree-id9901 . -3) (undo-tree-id9902 . -3) (undo-tree-id9903 . -3) (undo-tree-id9904 . -3) (undo-tree-id9905 . -3) (undo-tree-id9906 . -3) (undo-tree-id9907 . -3) (undo-tree-id9908 . -3) (undo-tree-id9909 . -3) (undo-tree-id9910 . -3) (undo-tree-id9911 . -3) (undo-tree-id9912 . -3) (undo-tree-id9913 . -3) (undo-tree-id9914 . -3) (undo-tree-id9915 . -3) (undo-tree-id9916 . -3) (undo-tree-id9917 . -3) (undo-tree-id9918 . -3) (undo-tree-id9919 . -3) (undo-tree-id9920 . -3) (undo-tree-id9921 . -3) (undo-tree-id9922 . -3) (undo-tree-id9923 . -3) (undo-tree-id9924 . -3) (undo-tree-id9925 . -3) (undo-tree-id9926 . -3) (undo-tree-id9927 . -3) (undo-tree-id9928 . -3) (undo-tree-id9929 . -3) (undo-tree-id9930 . -3) (undo-tree-id9931 . -3) (undo-tree-id9932 . -3) (undo-tree-id9933 . -3) (undo-tree-id9934 . -3) (undo-tree-id9935 . -3) (undo-tree-id9936 . -3) (undo-tree-id9937 . -3) (undo-tree-id9938 . -3) (undo-tree-id9939 . -3) (undo-tree-id9940 . -3) (undo-tree-id9941 . -3) (undo-tree-id9942 . -3) (undo-tree-id9943 . -3) (undo-tree-id9944 . -3) (undo-tree-id9945 . -3) (undo-tree-id9946 . -3) (undo-tree-id9947 . -3) (undo-tree-id9948 . -3) 546) nil (24169 50635 875683 0) 0 nil]) ((#("5, " 0 1 (face highlight-numbers-number fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -546) (undo-tree-id9949 . -3) (undo-tree-id9950 . -3) (undo-tree-id9951 . -3) (undo-tree-id9952 . -3) (undo-tree-id9953 . -3) (undo-tree-id9954 . -3) (undo-tree-id9955 . -3) (undo-tree-id9956 . -3) (undo-tree-id9957 . -3) (undo-tree-id9958 . -3) (undo-tree-id9959 . -3) (undo-tree-id9960 . -3) (undo-tree-id9961 . -3) (undo-tree-id9962 . -3) (undo-tree-id9963 . -3) (undo-tree-id9964 . -3) (undo-tree-id9965 . -3) (undo-tree-id9966 . -3) (undo-tree-id9967 . -3) (undo-tree-id9968 . -3) (undo-tree-id9969 . -3) (undo-tree-id9970 . -3) (undo-tree-id9971 . -3) (undo-tree-id9972 . -3) (undo-tree-id9973 . -3) (undo-tree-id9974 . -3) (undo-tree-id9975 . -3) (undo-tree-id9976 . -3) (undo-tree-id9977 . -3) (undo-tree-id9978 . -3) (undo-tree-id9979 . -3) (undo-tree-id9980 . -3) (undo-tree-id9981 . -3) (undo-tree-id9982 . -3) (undo-tree-id9983 . -3) (undo-tree-id9984 . -3) (undo-tree-id9985 . -3) (undo-tree-id9986 . -3) (undo-tree-id9987 . -3) (undo-tree-id9988 . -3) (undo-tree-id9989 . -3) (undo-tree-id9990 . -3) (undo-tree-id9991 . -3) (undo-tree-id9992 . -3) (undo-tree-id9993 . -3) (undo-tree-id9994 . -3) (undo-tree-id9995 . -3) (undo-tree-id9996 . -3) (undo-tree-id9997 . -3) (undo-tree-id9998 . -3) (undo-tree-id9999 . -3) (undo-tree-id10000 . -3) 549) nil (24169 50635 875746 0) 0 nil]) ((#("3, " 0 1 (face highlight-numbers-number fontified t) 1 3 (fontified t)) . -549) (undo-tree-id10001 . -3) (undo-tree-id10002 . -3) (undo-tree-id10003 . -3) (undo-tree-id10004 . -3) (undo-tree-id10005 . -3) (undo-tree-id10006 . -3) (undo-tree-id10007 . -3) (undo-tree-id10008 . -3) (undo-tree-id10009 . -3) (undo-tree-id10010 . -3) (undo-tree-id10011 . -3) (undo-tree-id10012 . -3) (undo-tree-id10013 . -3) (undo-tree-id10014 . -3) (undo-tree-id10015 . -3) (undo-tree-id10016 . -3) (undo-tree-id10017 . -3) (undo-tree-id10018 . -3) (undo-tree-id10019 . -3) (undo-tree-id10020 . -3) (undo-tree-id10021 . -3) (undo-tree-id10022 . -3) (undo-tree-id10023 . -3) (undo-tree-id10024 . -3) (undo-tree-id10025 . -3) (undo-tree-id10026 . -3) (undo-tree-id10027 . -3) (undo-tree-id10028 . -3) (undo-tree-id10029 . -3) (undo-tree-id10030 . -3) (undo-tree-id10031 . -3) (undo-tree-id10032 . -3) (undo-tree-id10033 . -3) (undo-tree-id10034 . -3) (undo-tree-id10035 . -3) (undo-tree-id10036 . -3) (undo-tree-id10037 . -3) (undo-tree-id10038 . -3) (undo-tree-id10039 . -3) (undo-tree-id10040 . -3) (undo-tree-id10041 . -3) (undo-tree-id10042 . -3) (undo-tree-id10043 . -3) (undo-tree-id10044 . -3) (undo-tree-id10045 . -3) (undo-tree-id10046 . -3) (undo-tree-id10047 . -3) (undo-tree-id10048 . -3) (undo-tree-id10049 . -3) 552) nil (24169 50635 875803 0) 0 nil]) ((#("0]" 0 1 (face highlight-numbers-number fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . -552) (undo-tree-id10050 . -2) (undo-tree-id10051 . -2) (undo-tree-id10052 . -2) (undo-tree-id10053 . -2) (undo-tree-id10054 . -2) (undo-tree-id10055 . -2) (undo-tree-id10056 . -2) (undo-tree-id10057 . -2) (undo-tree-id10058 . -2) (undo-tree-id10059 . -1) (undo-tree-id10060 . -2) (undo-tree-id10061 . -1) (undo-tree-id10062 . -2) (undo-tree-id10063 . -1) (undo-tree-id10064 . -2) (undo-tree-id10065 . -1) (undo-tree-id10066 . -2) (undo-tree-id10067 . -1) (undo-tree-id10068 . -2) (undo-tree-id10069 . -1) (undo-tree-id10070 . -2) (undo-tree-id10071 . -1) (undo-tree-id10072 . 1) (undo-tree-id10073 . -2) (undo-tree-id10074 . -2) (undo-tree-id10075 . -2) (undo-tree-id10076 . -2) 554 (t 24169 50630 774673 801000)) nil (24169 50635 875836 0) 0 nil]) ((517 . 526)) nil (24169 50630 747628 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -38) (undo-tree-id9677 . -1) (undo-tree-id9678 . -1) (undo-tree-id9679 . -1) (undo-tree-id9680 . -1) (undo-tree-id9681 . -1) (undo-tree-id9682 . 1) (undo-tree-id9683 . -1) (undo-tree-id9684 . -1) (undo-tree-id9685 . -1) (undo-tree-id9686 . -1) (undo-tree-id9687 . -1) (undo-tree-id9688 . -1) (undo-tree-id9689 . -1) (undo-tree-id9690 . -1) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) (undo-tree-id9694 . -1) (undo-tree-id9695 . -1) (undo-tree-id9696 . -1) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1) (undo-tree-id9701 . -1) (undo-tree-id9702 . -1) (undo-tree-id9703 . -1) (undo-tree-id9704 . -1) (undo-tree-id9705 . -1) (undo-tree-id9706 . -1) (undo-tree-id9707 . -1) (undo-tree-id9708 . -1) (undo-tree-id9709 . -1) (undo-tree-id9710 . -1) (undo-tree-id9711 . -1) (undo-tree-id9712 . -1) (undo-tree-id9713 . -1) (undo-tree-id9714 . -1) (undo-tree-id9715 . -1) (undo-tree-id9716 . -1) (undo-tree-id9717 . -1) (undo-tree-id9718 . -1) (undo-tree-id9719 . -1) (undo-tree-id9720 . -1) (undo-tree-id9721 . -1) (undo-tree-id9722 . -1) (undo-tree-id9723 . -1) (undo-tree-id9724 . -1) (undo-tree-id9725 . -1) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) (undo-tree-id9730 . -1) (undo-tree-id9731 . -1) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1) (undo-tree-id9739 . -1) (undo-tree-id9740 . -1) (undo-tree-id9741 . -1) (undo-tree-id9742 . -1) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) (undo-tree-id9746 . -1) 39) nil (24169 50630 747738 0) 0 nil]) ((#("use std::io" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 11 (fontified t)) . 39) (undo-tree-id9747 . -11) (undo-tree-id9748 . -11) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) (undo-tree-id9752 . -2) (undo-tree-id9753 . -2) (undo-tree-id9754 . -2) (undo-tree-id9755 . -3) (undo-tree-id9756 . -3) (undo-tree-id9757 . -3) (undo-tree-id9758 . -3) (undo-tree-id9759 . -3) (undo-tree-id9760 . -4) (undo-tree-id9761 . -4) (undo-tree-id9762 . -4) (undo-tree-id9763 . -5) (undo-tree-id9764 . -5) (undo-tree-id9765 . -5) (undo-tree-id9766 . -6) (undo-tree-id9767 . -6) (undo-tree-id9768 . -6) (undo-tree-id9769 . -7) (undo-tree-id9770 . -7) (undo-tree-id9771 . -7) (undo-tree-id9772 . -8) (undo-tree-id9773 . -8) (undo-tree-id9774 . -8) (undo-tree-id9775 . -8) (undo-tree-id9776 . -8) (undo-tree-id9777 . -9) (undo-tree-id9778 . -9) (undo-tree-id9779 . -9) (undo-tree-id9780 . -9) (undo-tree-id9781 . -9) (undo-tree-id9782 . -9) (undo-tree-id9783 . -9) (undo-tree-id9784 . -9) (undo-tree-id9785 . -10) (undo-tree-id9786 . -10) (undo-tree-id9787 . -10) (undo-tree-id9788 . -10) (undo-tree-id9789 . -10) (undo-tree-id9790 . -11) (undo-tree-id9791 . -11) (undo-tree-id9792 . -9) (undo-tree-id9793 . -11) (undo-tree-id9794 . -11) (undo-tree-id9795 . -11) (undo-tree-id9796 . -11) (undo-tree-id9797 . -11) (undo-tree-id9798 . -11) (undo-tree-id9799 . -11) (undo-tree-id9800 . -11) (undo-tree-id9801 . -11) (undo-tree-id9802 . -11) (undo-tree-id9803 . -11)) nil (24169 50630 747812 0) 0 nil]) ((39 . 50)) nil (24169 50630 747815 0) 0 nil]) ((38 . 39)) nil (24169 50630 747816 0) 0 nil]) ((502 . 503)) nil (24169 50630 747817 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 547) (undo-tree-id9804 . -1) (undo-tree-id9805 . -1) (undo-tree-id9806 . -1)) nil (24169 50630 747822 0) 0 nil]) ((#("// we want!" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 11 (face font-lock-comment-face fontified t)) . 547) (undo-tree-id9807 . -11) (undo-tree-id9808 . -11) (undo-tree-id9809 . -11) (undo-tree-id9810 . -11) (undo-tree-id9811 . -11) (undo-tree-id9812 . -11)) nil (24169 50630 747831 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 547) (undo-tree-id9813 . -1) (undo-tree-id9814 . -1) (undo-tree-id9815 . -1)) nil (24169 50630 747837 0) 0 nil]) ((#("// Note that we use type parameters to indicate which kind of byte order" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 72 (face font-lock-comment-face fontified t)) . 547) (undo-tree-id9816 . -62) (undo-tree-id9817 . -62) (undo-tree-id9818 . -62) (undo-tree-id9819 . -62) (undo-tree-id9820 . -62) (undo-tree-id9821 . -72)) nil (24169 50630 747845 0) 0 nil]) ((632 . 633) 686) nil (24169 50630 747847 0) 0 nil]) ((nil rear-nonsticky nil 685 . 686) (nil fontified nil 502 . 686) (502 . 686) (t 24169 50561 286367 108000)) nil (24169 50630 747849 0) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . -109) (undo-tree-id9519 . -1) (undo-tree-id9520 . -1) (undo-tree-id9521 . -1) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) (undo-tree-id9524 . -1) (undo-tree-id9525 . -1) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) 110) nil (24169 50561 252596 0) 0 nil]) ((nil rear-nonsticky nil 109 . 110) (nil fontified nil 39 . 110) (39 . 110)) nil (24169 50561 252601 0) 0 nil]) ((#("u" 0 1 (fontified t)) . -39) (undo-tree-id9528 . -1) (undo-tree-id9529 . -1) (undo-tree-id9530 . -1) (undo-tree-id9531 . -1) (undo-tree-id9532 . -1) (undo-tree-id9533 . -1) (undo-tree-id9534 . -1) (undo-tree-id9535 . -1) (undo-tree-id9536 . -1) (undo-tree-id9537 . -1) (undo-tree-id9538 . -1) (undo-tree-id9539 . -1) (undo-tree-id9540 . -1) (undo-tree-id9541 . -1) (undo-tree-id9542 . -1) (undo-tree-id9543 . -1) (undo-tree-id9544 . -1) (undo-tree-id9545 . -1) (undo-tree-id9546 . -1) (undo-tree-id9547 . -1) (undo-tree-id9548 . -1) (undo-tree-id9549 . -1) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) (undo-tree-id9552 . -1) (undo-tree-id9553 . -1) (undo-tree-id9554 . -1) (undo-tree-id9555 . -1) (undo-tree-id9556 . -1) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (undo-tree-id9559 . -1) (undo-tree-id9560 . -1) (undo-tree-id9561 . -1) (undo-tree-id9562 . -1) (#("s" 0 1 (fontified t)) . -40) (undo-tree-id9563 . -1) (undo-tree-id9564 . -1) (undo-tree-id9565 . -1) (undo-tree-id9566 . -1) (undo-tree-id9567 . -1) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (undo-tree-id9572 . -1) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) (undo-tree-id9587 . -1) (undo-tree-id9588 . -1) (undo-tree-id9589 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -41) (undo-tree-id9590 . -1) (undo-tree-id9591 . -1) (undo-tree-id9592 . -1) (undo-tree-id9593 . -1) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) (undo-tree-id9597 . -1) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) (undo-tree-id9602 . -1) (undo-tree-id9603 . -1) (undo-tree-id9604 . -1) (undo-tree-id9605 . -1) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id9606 . -1) (undo-tree-id9607 . -1) (undo-tree-id9608 . -1) (undo-tree-id9609 . -1) (undo-tree-id9610 . -1) (undo-tree-id9611 . -1) (undo-tree-id9612 . -1) (undo-tree-id9613 . -1) 43) nil (24169 50561 252706 0) 0 nil]) ((39 . 43)) nil (24169 50561 252711 0) 0 nil]) ((38 . 39)) nil (24169 50561 252712 0) 0 nil]) ((#("	let a = i.iter().rev().fold(0, |acc, &b| acc*2 + b as u64);" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 9 (fontified t) 9 10 (fontified t) 10 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face highlight-numbers-number fontified t) 30 46 (fontified t) 46 47 (face highlight-numbers-number fontified t) 47 52 (fontified t) 52 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 58 (face font-lock-type-face fontified t) 58 59 (face (rainbow-delimiters-depth-3-face) rear-nonsticky t fontified t) 59 60 (fontified t)) . 431) (undo-tree-id9614 . -56) (undo-tree-id9615 . -60) (undo-tree-id9616 . -1) (undo-tree-id9617 . -56) (undo-tree-id9618 . -56) (undo-tree-id9619 . -56) (undo-tree-id9620 . -56) (undo-tree-id9621 . -56) (undo-tree-id9622 . -56) (undo-tree-id9623 . -56) (undo-tree-id9624 . -56) (undo-tree-id9625 . -56) (undo-tree-id9626 . -56) (undo-tree-id9627 . -56) (undo-tree-id9628 . -56) (undo-tree-id9629 . -56) (undo-tree-id9630 . -56) (undo-tree-id9631 . -56) (undo-tree-id9632 . -56) (undo-tree-id9633 . -56) (undo-tree-id9634 . -56) (undo-tree-id9635 . -56) (undo-tree-id9636 . -56) (undo-tree-id9637 . -56) (undo-tree-id9638 . -56) (undo-tree-id9639 . -56) (undo-tree-id9640 . -56) (undo-tree-id9641 . -56) (undo-tree-id9642 . -56) (undo-tree-id9643 . -56) (undo-tree-id9644 . -56) (undo-tree-id9645 . -56) (undo-tree-id9646 . -56) (undo-tree-id9647 . -56) (undo-tree-id9648 . -60) (undo-tree-id9649 . -60) (undo-tree-id9650 . -60) (undo-tree-id9651 . -60) (undo-tree-id9652 . -60) (undo-tree-id9653 . -60) (undo-tree-id9654 . -60) (undo-tree-id9655 . -60) (undo-tree-id9656 . -60) (undo-tree-id9657 . -60) (undo-tree-id9658 . -60) (undo-tree-id9659 . -60) (undo-tree-id9660 . -60) (undo-tree-id9661 . -60) (undo-tree-id9662 . -60) (undo-tree-id9663 . -60) (undo-tree-id9664 . -60) (undo-tree-id9665 . -60) (undo-tree-id9666 . -60) (undo-tree-id9667 . -60) (undo-tree-id9668 . -60) (undo-tree-id9669 . -60) (undo-tree-id9670 . -60) (undo-tree-id9671 . -60) (undo-tree-id9672 . -60) (undo-tree-id9673 . -60) (undo-tree-id9674 . -60) (undo-tree-id9675 . -60) (undo-tree-id9676 . -60) (t 24169 50380 521207 820000)) nil (24169 50561 252787 0) 0 nil]) ((487 . 489)) nil (24169 50380 490569 0) 0 nil]) ((#("3" 0 1 (fontified t)) . -487) (undo-tree-id9467 . -1) (undo-tree-id9468 . -1) (undo-tree-id9469 . -1) (undo-tree-id9470 . -1) (undo-tree-id9471 . -1) (undo-tree-id9472 . -1) (undo-tree-id9473 . -1) (undo-tree-id9474 . -1) (undo-tree-id9475 . -1) (undo-tree-id9476 . -1) (undo-tree-id9477 . -1) (undo-tree-id9478 . -1) (undo-tree-id9479 . -1) (undo-tree-id9480 . -1) (undo-tree-id9481 . -1) (undo-tree-id9482 . -1) (undo-tree-id9483 . -1) (undo-tree-id9484 . -1) (undo-tree-id9485 . -1) (undo-tree-id9486 . -1) (undo-tree-id9487 . -1) (undo-tree-id9488 . -1) (undo-tree-id9489 . -1) (undo-tree-id9490 . -1) (undo-tree-id9491 . -1) (undo-tree-id9492 . -1) (undo-tree-id9493 . -1) (undo-tree-id9494 . -1) (undo-tree-id9495 . -1) (undo-tree-id9496 . -1) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) (undo-tree-id9499 . -1) (undo-tree-id9500 . -1) (undo-tree-id9501 . -1) (undo-tree-id9502 . -1) (undo-tree-id9503 . -1) (undo-tree-id9504 . -1) (undo-tree-id9505 . -1) (undo-tree-id9506 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -488) (undo-tree-id9507 . -1) (undo-tree-id9508 . -1) (undo-tree-id9509 . -1) (undo-tree-id9510 . -1) (undo-tree-id9511 . -1) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) (undo-tree-id9514 . -1) (undo-tree-id9515 . -1) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) (undo-tree-id9518 . -1) 489 (t 24169 50362 748706 281000)) nil (24169 50380 490671 0) 0 nil]) ((510 . 511)) nil (24169 50362 721313 0) 0 nil]) ((506 . 509)) nil (24169 50362 721317 0) 0 nil]) ((503 . 505) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -503) (undo-tree-id9424 . 1) (undo-tree-id9425 . -1) (undo-tree-id9426 . -1) (503 . 504) (502 . 504) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -502) (undo-tree-id9427 . -1) (undo-tree-id9428 . -1) (502 . 503) (501 . 503) (#("(" 0 1 (fontified nil)) . -501) (undo-tree-id9429 . -1) (undo-tree-id9430 . -1) (501 . 502)) nil (24169 50362 721339 0) 0 nil]) ((apply yas--snippet-revive 493 501 #2=#s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #2#) (493 . 501) (#("println!" 0 8 (fontified nil)) . 493) (493 . 501) (#("println!" 0 8 (fontified nil)) . -493) (493 . 501) (#("println" 0 7 (fontified t)) . -493) (undo-tree-id9431 . -7) (undo-tree-id9432 . -1) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) (undo-tree-id9435 . -2) (undo-tree-id9436 . -2) (undo-tree-id9437 . -2) (undo-tree-id9438 . -3) (undo-tree-id9439 . -3) (undo-tree-id9440 . -3) (undo-tree-id9441 . -4) (undo-tree-id9442 . -4) (undo-tree-id9443 . -4) (undo-tree-id9444 . -5) (undo-tree-id9445 . -5) (undo-tree-id9446 . -5) (undo-tree-id9447 . -5) (undo-tree-id9448 . -5) (undo-tree-id9449 . -5) (undo-tree-id9450 . -5) (undo-tree-id9451 . -5) (undo-tree-id9452 . -5) (undo-tree-id9453 . -5) (undo-tree-id9454 . -6) (undo-tree-id9455 . -6) (undo-tree-id9456 . -6) (undo-tree-id9457 . -7) (undo-tree-id9458 . -7) (undo-tree-id9459 . -7) (undo-tree-id9460 . -7) (undo-tree-id9461 . -7) (undo-tree-id9462 . -7) (undo-tree-id9463 . -7) (undo-tree-id9464 . -7) (undo-tree-id9465 . -7) (undo-tree-id9466 . -7) 500) nil (24169 50362 721389 0) 0 nil]) ((493 . 500)) nil (24169 50362 721392 0) 0 nil]) ((491 . 493) (t 24169 50351 513152 717000)) nil (24169 50362 721393 0) 0 nil]) ((432 . 440) (t 24169 50345 591161 776000)) nil (24169 50351 483849 0) 0 nil]) ((432 . 433)) nil (24169 50345 558019 0) 0 nil]) ((#("slice" 0 5 (fontified t)) . -432) (undo-tree-id9416 . -5) (undo-tree-id9417 . -5) (undo-tree-id9418 . -5) (undo-tree-id9419 . -5) (undo-tree-id9420 . -5) (undo-tree-id9421 . -5) (undo-tree-id9422 . -5) (undo-tree-id9423 . -5) 437 (t 24169 50340 216122 614000)) nil (24169 50345 558045 0) 0 nil]) ((486 . 487)) nil (24169 50340 182710 0) 0 nil]) ((nil rear-nonsticky nil 485 . 486) (nil fontified nil 432 . 486) (432 . 486)) nil (24169 50340 182716 0) 0 nil]) ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -432) (undo-tree-id9119 . -5) (undo-tree-id9120 . -3) (undo-tree-id9121 . -1) (undo-tree-id9122 . -1) (undo-tree-id9123 . -1) (undo-tree-id9124 . -2) (undo-tree-id9125 . -2) (undo-tree-id9126 . -2) (undo-tree-id9127 . -3) (undo-tree-id9128 . -3) (undo-tree-id9129 . -3) (undo-tree-id9130 . -3) (undo-tree-id9131 . -3) (undo-tree-id9132 . -4) (undo-tree-id9133 . -4) (undo-tree-id9134 . -4) (undo-tree-id9135 . -5) (undo-tree-id9136 . -5) (undo-tree-id9137 . -5) (undo-tree-id9138 . -5) (undo-tree-id9139 . -5) (undo-tree-id9140 . -5) (undo-tree-id9141 . -5) (undo-tree-id9142 . -5) (undo-tree-id9143 . -5) (undo-tree-id9144 . -5) (undo-tree-id9145 . -5) (undo-tree-id9146 . -5) (undo-tree-id9147 . -5) (undo-tree-id9148 . -5) (undo-tree-id9149 . -5) (undo-tree-id9150 . -5) (undo-tree-id9151 . -5) (undo-tree-id9152 . -5) (undo-tree-id9153 . -5) (undo-tree-id9154 . -5) (undo-tree-id9155 . -5) (undo-tree-id9156 . -5) (undo-tree-id9157 . -5) (undo-tree-id9158 . -5) (undo-tree-id9159 . -5) (undo-tree-id9160 . -5) (undo-tree-id9161 . -5) (undo-tree-id9162 . -5) (undo-tree-id9163 . -5) 437) nil (24169 50340 182781 0) 0 nil]) ((#("by" 0 2 (fontified t)) . -437) (undo-tree-id9164 . -2) (undo-tree-id9165 . -1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (undo-tree-id9174 . -1) (undo-tree-id9175 . -2) (undo-tree-id9176 . -2) (undo-tree-id9177 . -2) (undo-tree-id9178 . -2) (undo-tree-id9179 . -2) (undo-tree-id9180 . -2) (undo-tree-id9181 . -2) (undo-tree-id9182 . -2) (undo-tree-id9183 . -2) (undo-tree-id9184 . -2) 439) nil (24169 50340 182810 0) 0 nil]) ((432 . 439)) nil (24169 50340 182812 0) 0 nil]) ((431 . 432)) nil (24169 50340 182813 0) 0 nil]) ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -431) (undo-tree-id9185 . -5) (undo-tree-id9186 . -3) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (undo-tree-id9189 . -1) (undo-tree-id9190 . -2) (undo-tree-id9191 . -2) (undo-tree-id9192 . -2) (undo-tree-id9193 . -3) (undo-tree-id9194 . -3) (undo-tree-id9195 . -3) (undo-tree-id9196 . -3) (undo-tree-id9197 . -3) (undo-tree-id9198 . -3) (undo-tree-id9199 . -3) (undo-tree-id9200 . -4) (undo-tree-id9201 . -4) (undo-tree-id9202 . -4) (undo-tree-id9203 . -4) (undo-tree-id9204 . -4) (undo-tree-id9205 . -5) (undo-tree-id9206 . -5) (undo-tree-id9207 . -5) (undo-tree-id9208 . -5) (undo-tree-id9209 . -5) (undo-tree-id9210 . -5) (undo-tree-id9211 . -5) (undo-tree-id9212 . -5) (undo-tree-id9213 . -5) (undo-tree-id9214 . -5) (undo-tree-id9215 . -5) (undo-tree-id9216 . -5) (undo-tree-id9217 . -5) (undo-tree-id9218 . -5) (undo-tree-id9219 . -5) (undo-tree-id9220 . -5) (undo-tree-id9221 . -5) (undo-tree-id9222 . -5) (undo-tree-id9223 . -5) (undo-tree-id9224 . -5) 436) nil (24169 50340 182862 0) 0 nil]) ((#("B" 0 1 (face font-lock-type-face fontified t)) . -436) (undo-tree-id9225 . -1) (undo-tree-id9226 . -1) (undo-tree-id9227 . -1) (undo-tree-id9228 . -1) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) 437) nil (24169 50340 182874 0) 0 nil]) ((431 . 437)) nil (24169 50340 182876 0) 0 nil]) ((#("	BigEndian::read_i32(i);" 0 1 (fontified t) 1 10 (face font-lock-type-face fontified t) 10 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (fontified t)) . 431) (undo-tree-id9234 . -24) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) (undo-tree-id9237 . -1) (undo-tree-id9238 . -1) (undo-tree-id9239 . -1) (undo-tree-id9240 . -1) (undo-tree-id9241 . -1) (undo-tree-id9242 . -1) (undo-tree-id9243 . -1) (undo-tree-id9244 . -1) (undo-tree-id9245 . -1) (undo-tree-id9246 . -1) (undo-tree-id9247 . -1) (undo-tree-id9248 . -1) (undo-tree-id9249 . -1) (undo-tree-id9250 . -1) (undo-tree-id9251 . -1) (undo-tree-id9252 . -1) (undo-tree-id9253 . -1) (undo-tree-id9254 . -1) (undo-tree-id9255 . -1) (undo-tree-id9256 . -1) (undo-tree-id9257 . -1) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (undo-tree-id9280 . -1) (undo-tree-id9281 . -1) (undo-tree-id9282 . -1) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (undo-tree-id9290 . -1) (undo-tree-id9291 . -1) (undo-tree-id9292 . -1) (undo-tree-id9293 . -1) (undo-tree-id9294 . -1) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) (undo-tree-id9297 . -1) (undo-tree-id9298 . -1) (undo-tree-id9299 . -1) (undo-tree-id9300 . -1) (undo-tree-id9301 . -1) (undo-tree-id9302 . -1) (undo-tree-id9303 . -1) (undo-tree-id9304 . -1) (undo-tree-id9305 . -1) (undo-tree-id9306 . -1) (undo-tree-id9307 . -1) (undo-tree-id9308 . -1) (undo-tree-id9309 . -1) (undo-tree-id9310 . -1) (undo-tree-id9311 . -1) (undo-tree-id9312 . -1) (undo-tree-id9313 . -1) (undo-tree-id9314 . -1) (undo-tree-id9315 . -1) (undo-tree-id9316 . -1) (undo-tree-id9317 . -1) (undo-tree-id9318 . -1) (undo-tree-id9319 . -1) (undo-tree-id9320 . -1) (undo-tree-id9321 . -1) (undo-tree-id9322 . -1) (undo-tree-id9323 . -1) (undo-tree-id9324 . -1) (undo-tree-id9325 . -1) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) (undo-tree-id9328 . -1) (undo-tree-id9329 . -1) (undo-tree-id9330 . -1) (undo-tree-id9331 . -1) (undo-tree-id9332 . -1) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1) (undo-tree-id9356 . -20) (undo-tree-id9357 . -20) (undo-tree-id9358 . -24) (undo-tree-id9359 . -24) (undo-tree-id9360 . -24) (undo-tree-id9361 . -24) (undo-tree-id9362 . -24) (undo-tree-id9363 . -24) (undo-tree-id9364 . -24) (undo-tree-id9365 . -24) (undo-tree-id9366 . -24) (undo-tree-id9367 . -24) (undo-tree-id9368 . -24) (undo-tree-id9369 . -24) (undo-tree-id9370 . -24) (undo-tree-id9371 . -24) (undo-tree-id9372 . -24) (undo-tree-id9373 . -24) (undo-tree-id9374 . -24) (undo-tree-id9375 . -24) (undo-tree-id9376 . -24) (undo-tree-id9377 . -24) (undo-tree-id9378 . -24) (undo-tree-id9379 . -24) (undo-tree-id9380 . -24) (undo-tree-id9381 . -1) (undo-tree-id9382 . -10) (undo-tree-id9383 . -24) (undo-tree-id9384 . -24) (undo-tree-id9385 . -24) (undo-tree-id9386 . -21) (undo-tree-id9387 . -21) (undo-tree-id9388 . -21) (undo-tree-id9389 . -17) (undo-tree-id9390 . -17) (undo-tree-id9391 . -17) (undo-tree-id9392 . -12) (undo-tree-id9393 . -12) (undo-tree-id9394 . -12) (undo-tree-id9395 . -12) (undo-tree-id9396 . -12) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9399 . -1) (undo-tree-id9400 . -1) (undo-tree-id9401 . -1) (undo-tree-id9402 . -1) (undo-tree-id9403 . -1) (undo-tree-id9404 . -1) (undo-tree-id9405 . -24) (undo-tree-id9406 . -1) (undo-tree-id9407 . -24) (undo-tree-id9408 . -24) (undo-tree-id9409 . -24) (undo-tree-id9410 . -1) (undo-tree-id9411 . -24) (undo-tree-id9412 . -24) (undo-tree-id9413 . -24) (undo-tree-id9414 . -24) (undo-tree-id9415 . -24) (t 24169 50248 789945 131000)) nil (24169 50340 183095 0) 0 nil]) ((454 . 455)) nil (24169 50248 760778 0) 0 nil]) ((452 . 453) (451 . 453) (#("(" 0 1 (fontified nil)) . -451) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (451 . 452)) nil (24169 50248 760793 0) 0 nil]) ((432 . 451)) nil (24169 50248 760796 0) 0 nil]) ((#("u64::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -432) (undo-tree-id8819 . -5) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -5) (undo-tree-id8849 . -5) (undo-tree-id8850 . -3) (undo-tree-id8851 . -3) (undo-tree-id8852 . -3) (undo-tree-id8853 . -3) (undo-tree-id8854 . -3) (undo-tree-id8855 . -3) (undo-tree-id8856 . -3) (undo-tree-id8857 . -3) (undo-tree-id8858 . -3) (undo-tree-id8859 . -3) (undo-tree-id8860 . -3) (undo-tree-id8861 . -3) (undo-tree-id8862 . -3) (undo-tree-id8863 . -3) (undo-tree-id8864 . -3) (undo-tree-id8865 . -3) (undo-tree-id8866 . -3) (undo-tree-id8867 . -3) (undo-tree-id8868 . -3) (undo-tree-id8869 . -3) (undo-tree-id8870 . -3) (undo-tree-id8871 . -3) (undo-tree-id8872 . -3) (undo-tree-id8873 . -3) (undo-tree-id8874 . -3) (undo-tree-id8875 . -3) (undo-tree-id8876 . -5) (undo-tree-id8877 . -5) (undo-tree-id8878 . -5) (undo-tree-id8879 . -5) (undo-tree-id8880 . -5) (undo-tree-id8881 . -5) (undo-tree-id8882 . -5) (undo-tree-id8883 . -5) (undo-tree-id8884 . -5) (undo-tree-id8885 . -5) (undo-tree-id8886 . -5) (undo-tree-id8887 . -5) (undo-tree-id8888 . -5) (undo-tree-id8889 . -5) (undo-tree-id8890 . -5) (undo-tree-id8891 . -5) (undo-tree-id8892 . -5) (undo-tree-id8893 . -5) (undo-tree-id8894 . -5) (undo-tree-id8895 . -5) (undo-tree-id8896 . -5) (undo-tree-id8897 . -5) (undo-tree-id8898 . -5) (undo-tree-id8899 . -5) (undo-tree-id8900 . -5) (undo-tree-id8901 . -5) (undo-tree-id8902 . -5) (undo-tree-id8903 . -5) (undo-tree-id8904 . -5) (undo-tree-id8905 . -5) (undo-tree-id8906 . -5) (undo-tree-id8907 . -5) (undo-tree-id8908 . -5) (undo-tree-id8909 . -5) (undo-tree-id8910 . -5) (undo-tree-id8911 . -5) (undo-tree-id8912 . -5) (undo-tree-id8913 . -5) (undo-tree-id8914 . -5) (undo-tree-id8915 . -5) (undo-tree-id8916 . -5) (undo-tree-id8917 . -5) (undo-tree-id8918 . -5) (undo-tree-id8919 . -5) (undo-tree-id8920 . -5) (undo-tree-id8921 . -5) (undo-tree-id8922 . -5) (undo-tree-id8923 . -5) (undo-tree-id8924 . -5) (undo-tree-id8925 . -5) (undo-tree-id8926 . -5) (undo-tree-id8927 . -5) (undo-tree-id8928 . -5) (undo-tree-id8929 . -5) (undo-tree-id8930 . -5) (undo-tree-id8931 . -5) (undo-tree-id8932 . -5) (undo-tree-id8933 . -5) (undo-tree-id8934 . -5) (undo-tree-id8935 . -5) (undo-tree-id8936 . -5) (undo-tree-id8937 . -5) (undo-tree-id8938 . -5) (undo-tree-id8939 . -5) (undo-tree-id8940 . -5) (undo-tree-id8941 . -5) (undo-tree-id8942 . -5) 437) nil (24169 50248 760944 0) 0 nil]) ((#("from_" 0 5 (fontified t)) . -437) (undo-tree-id8943 . -5) (undo-tree-id8944 . -5) (undo-tree-id8945 . -5) (undo-tree-id8946 . -4) (undo-tree-id8947 . -4) (undo-tree-id8948 . -4) (undo-tree-id8949 . -5) (undo-tree-id8950 . -5) (undo-tree-id8951 . -5) (undo-tree-id8952 . -5) (undo-tree-id8953 . -5) (undo-tree-id8954 . -5) (undo-tree-id8955 . -5) (undo-tree-id8956 . -5) (undo-tree-id8957 . -5) (undo-tree-id8958 . -5) (undo-tree-id8959 . -5) (undo-tree-id8960 . -5) (undo-tree-id8961 . -5) (undo-tree-id8962 . -5) (undo-tree-id8963 . -5) (undo-tree-id8964 . -5) (undo-tree-id8965 . -5) (undo-tree-id8966 . -5) (undo-tree-id8967 . -5) (undo-tree-id8968 . -5) (undo-tree-id8969 . -5) (undo-tree-id8970 . -5) (undo-tree-id8971 . -5) (undo-tree-id8972 . -5) (undo-tree-id8973 . -5) (undo-tree-id8974 . -5) (undo-tree-id8975 . -5) (undo-tree-id8976 . -5) (undo-tree-id8977 . -5) (undo-tree-id8978 . -5) (undo-tree-id8979 . -5) (undo-tree-id8980 . -5) (undo-tree-id8981 . -5) (undo-tree-id8982 . -5) (undo-tree-id8983 . -5) (undo-tree-id8984 . -5) (undo-tree-id8985 . -5) (undo-tree-id8986 . -5) (undo-tree-id8987 . -5) (undo-tree-id8988 . -5) (undo-tree-id8989 . -5) (undo-tree-id8990 . -5) (undo-tree-id8991 . -5) (undo-tree-id8992 . -5) (undo-tree-id8993 . -5) (undo-tree-id8994 . -5) (undo-tree-id8995 . -5) (undo-tree-id8996 . -5) (undo-tree-id8997 . -5) (undo-tree-id8998 . -5) (undo-tree-id8999 . -5) (undo-tree-id9000 . -5) (undo-tree-id9001 . -5) (undo-tree-id9002 . -5) (undo-tree-id9003 . -5) (undo-tree-id9004 . -5) (undo-tree-id9005 . -5) (undo-tree-id9006 . -5) (undo-tree-id9007 . -5) 442) nil (24169 50248 761019 0) 0 nil]) ((#("be_" 0 3 (fontified t)) . -442) (undo-tree-id9008 . -3) (undo-tree-id9009 . -3) (undo-tree-id9010 . -3) (undo-tree-id9011 . -2) (undo-tree-id9012 . -2) (undo-tree-id9013 . -2) (undo-tree-id9014 . -2) (undo-tree-id9015 . -2) (undo-tree-id9016 . -3) (undo-tree-id9017 . -3) (undo-tree-id9018 . -3) (undo-tree-id9019 . -3) (undo-tree-id9020 . -3) (undo-tree-id9021 . -3) (undo-tree-id9022 . -3) (undo-tree-id9023 . -3) (undo-tree-id9024 . -3) (undo-tree-id9025 . -3) (undo-tree-id9026 . -3) (undo-tree-id9027 . -3) (undo-tree-id9028 . -3) (undo-tree-id9029 . -3) (undo-tree-id9030 . -3) (undo-tree-id9031 . -3) (undo-tree-id9032 . -3) (undo-tree-id9033 . -3) (undo-tree-id9034 . -3) (undo-tree-id9035 . -3) (undo-tree-id9036 . -3) (undo-tree-id9037 . -3) (undo-tree-id9038 . -3) (undo-tree-id9039 . -3) (undo-tree-id9040 . -3) (undo-tree-id9041 . -3) (undo-tree-id9042 . -3) (undo-tree-id9043 . -3) (undo-tree-id9044 . -3) (undo-tree-id9045 . -3) (undo-tree-id9046 . -3) (undo-tree-id9047 . -3) (undo-tree-id9048 . -3) (undo-tree-id9049 . -3) (undo-tree-id9050 . -3) (undo-tree-id9051 . -3) (undo-tree-id9052 . -3) (undo-tree-id9053 . -3) (undo-tree-id9054 . -3) (undo-tree-id9055 . -3) (undo-tree-id9056 . -3) (undo-tree-id9057 . -3) (undo-tree-id9058 . -3) (undo-tree-id9059 . -3) (undo-tree-id9060 . -3) (undo-tree-id9061 . -3) (undo-tree-id9062 . -3) (undo-tree-id9063 . -3) (undo-tree-id9064 . -3) (undo-tree-id9065 . -3) (undo-tree-id9066 . -3) 445) nil (24169 50248 761089 0) 0 nil]) ((#("bytes(" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -445) (undo-tree-id9067 . -6) (undo-tree-id9068 . -6) (undo-tree-id9069 . -6) (undo-tree-id9070 . -5) (undo-tree-id9071 . -5) (undo-tree-id9072 . -5) (undo-tree-id9073 . -5) (undo-tree-id9074 . -5) (undo-tree-id9075 . -6) (undo-tree-id9076 . -6) (undo-tree-id9077 . -6) (undo-tree-id9078 . -6) (undo-tree-id9079 . -6) (undo-tree-id9080 . -6) (undo-tree-id9081 . -6) (undo-tree-id9082 . -6) (undo-tree-id9083 . -6) (undo-tree-id9084 . -6) (undo-tree-id9085 . -6) (undo-tree-id9086 . -6) (undo-tree-id9087 . -6) (undo-tree-id9088 . -6) (undo-tree-id9089 . -6) (undo-tree-id9090 . -6) (undo-tree-id9091 . -6) (undo-tree-id9092 . -6) (undo-tree-id9093 . -6) (undo-tree-id9094 . -6) (undo-tree-id9095 . -6) (undo-tree-id9096 . -6) (undo-tree-id9097 . -6) (undo-tree-id9098 . -6) (undo-tree-id9099 . -6) (undo-tree-id9100 . -6) (undo-tree-id9101 . -6) (undo-tree-id9102 . -6) (undo-tree-id9103 . -6) (undo-tree-id9104 . -6) (undo-tree-id9105 . -6) (undo-tree-id9106 . -6) (undo-tree-id9107 . -6) (undo-tree-id9108 . -6) (undo-tree-id9109 . -6) (undo-tree-id9110 . -6) (undo-tree-id9111 . -6) (undo-tree-id9112 . -6) 451) nil (24169 50248 761141 0) 0 nil]) ((#("i);" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) rear-nonsticky t fontified t) 2 3 (fontified t)) . -451) (undo-tree-id9113 . -3) (undo-tree-id9114 . -1) (undo-tree-id9115 . -3) (undo-tree-id9116 . -3) (undo-tree-id9117 . -3) (undo-tree-id9118 . -3) 454 (t 24169 50199 632258 235000)) nil (24169 50248 761152 0) 0 nil]) ((433 . 435)) nil (24169 50199 600089 0) 0 nil]) ((#("3" 0 1 (face font-lock-constant-face fontified t)) . -433) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -434) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) 435 (t 24169 50181 440590 297000)) nil (24169 50199 600154 0) 0 nil]) ((453 . 454) (t 24169 50179 633017 467000)) nil (24169 50181 408007 0) 0 nil]) ((451 . 452)) nil (24169 50179 606632 0) 0 nil]) ((#("buf" 0 3 (fontified t)) . -451) (undo-tree-id8400 . -3) (undo-tree-id8401 . -3) (undo-tree-id8402 . -3) (undo-tree-id8403 . -3) (undo-tree-id8404 . -3) (undo-tree-id8405 . -3) (undo-tree-id8406 . -3) (undo-tree-id8407 . -3) (undo-tree-id8408 . -3) (undo-tree-id8409 . -3) (undo-tree-id8410 . -3) (undo-tree-id8411 . -3) (undo-tree-id8412 . -3) (undo-tree-id8413 . -3) 454) nil (24169 50179 606666 0) 0 nil]) ((nil rear-nonsticky nil 454 . 455) (nil fontified nil 432 . 455) (432 . 455)) nil (24169 50179 606669 0) 0 nil]) ((431 . 432)) nil (24169 50179 606671 0) 0 nil]) ((#("	unsafe { std::mem::transmute::<[u8; 8], u32>(i) }.to_be();" 0 1 (fontified t) 1 7 (face rust-unsafe-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (fontified t) 10 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 18 (face font-lock-constant-face fontified t) 18 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-4-face) fontified t) 32 33 (face (rainbow-delimiters-depth-5-face) fontified t) 33 34 (face font-lock-type-face fontified t) 34 35 (face font-lock-type-face fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (face highlight-numbers-number fontified t) 38 39 (face (rainbow-delimiters-depth-5-face) fontified t) 39 41 (fontified t) 41 44 (face font-lock-type-face fontified t) 44 45 (face (rainbow-delimiters-depth-4-face) fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-4-face) fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) rear-nonsticky t fontified t) 58 59 (fontified t)) . 431) (undo-tree-id8414 . -59) (undo-tree-id8415 . -37) (undo-tree-id8416 . -37) (undo-tree-id8417 . -37) (undo-tree-id8418 . -37) (undo-tree-id8419 . -37) (undo-tree-id8420 . -37) (undo-tree-id8421 . -37) (undo-tree-id8422 . -37) (undo-tree-id8423 . -37) (undo-tree-id8424 . -37) (undo-tree-id8425 . -37) (undo-tree-id8426 . -37) (undo-tree-id8427 . -37) (undo-tree-id8428 . -37) (undo-tree-id8429 . -37) (undo-tree-id8430 . -37) (undo-tree-id8431 . -37) (undo-tree-id8432 . -37) (undo-tree-id8433 . -37) (undo-tree-id8434 . -37) (undo-tree-id8435 . -38) (undo-tree-id8436 . -38) (undo-tree-id8437 . -38) (undo-tree-id8438 . -38) (undo-tree-id8439 . -38) (undo-tree-id8440 . -38) (undo-tree-id8441 . -38) (undo-tree-id8442 . -38) (undo-tree-id8443 . -38) (undo-tree-id8444 . -38) (undo-tree-id8445 . -38) (undo-tree-id8446 . -38) (undo-tree-id8447 . -38) (undo-tree-id8448 . -38) (undo-tree-id8449 . -38) (undo-tree-id8450 . -38) (undo-tree-id8451 . -38) (undo-tree-id8452 . -38) (undo-tree-id8453 . -38) (undo-tree-id8454 . -38) (undo-tree-id8455 . -38) (undo-tree-id8456 . -38) (undo-tree-id8457 . -38) (undo-tree-id8458 . -38) (undo-tree-id8459 . -38) (undo-tree-id8460 . -38) (undo-tree-id8461 . -38) (undo-tree-id8462 . -38) (undo-tree-id8463 . -39) (undo-tree-id8464 . -39) (undo-tree-id8465 . -38) (undo-tree-id8466 . -39) (undo-tree-id8467 . -38) (undo-tree-id8468 . -39) (undo-tree-id8469 . -38) (undo-tree-id8470 . -39) (undo-tree-id8471 . -38) (undo-tree-id8472 . -39) (undo-tree-id8473 . -38) (undo-tree-id8474 . -39) (undo-tree-id8475 . -38) (undo-tree-id8476 . -39) (undo-tree-id8477 . -33) (undo-tree-id8478 . -39) (undo-tree-id8479 . -39) (undo-tree-id8480 . -39) (undo-tree-id8481 . -39) (undo-tree-id8482 . -39) (undo-tree-id8483 . -38) (undo-tree-id8484 . -39) (undo-tree-id8485 . -38) (undo-tree-id8486 . -39) (undo-tree-id8487 . -38) (undo-tree-id8488 . -39) (undo-tree-id8489 . -38) (undo-tree-id8490 . -39) (undo-tree-id8491 . -38) (undo-tree-id8492 . -39) (undo-tree-id8493 . -38) (undo-tree-id8494 . -39) (undo-tree-id8495 . -33) (undo-tree-id8496 . -39) (undo-tree-id8497 . -38) (undo-tree-id8498 . -38) (undo-tree-id8499 . -38) (undo-tree-id8500 . -38) (undo-tree-id8501 . -38) (undo-tree-id8502 . -39) (undo-tree-id8503 . -39) (undo-tree-id8504 . -38) (undo-tree-id8505 . -39) (undo-tree-id8506 . -38) (undo-tree-id8507 . -39) (undo-tree-id8508 . -38) (undo-tree-id8509 . -39) (undo-tree-id8510 . -38) (undo-tree-id8511 . -39) (undo-tree-id8512 . -38) (undo-tree-id8513 . -39) (undo-tree-id8514 . -38) (undo-tree-id8515 . -39) (undo-tree-id8516 . -33) (undo-tree-id8517 . -39) (undo-tree-id8518 . -39) (undo-tree-id8519 . -39) (undo-tree-id8520 . -38) (undo-tree-id8521 . -39) (undo-tree-id8522 . -38) (undo-tree-id8523 . -38) (undo-tree-id8524 . -38) (undo-tree-id8525 . -38) (undo-tree-id8526 . -38) (undo-tree-id8527 . -38) (undo-tree-id8528 . -38) (undo-tree-id8529 . -38) (undo-tree-id8530 . -38) (undo-tree-id8531 . -38) (undo-tree-id8532 . -38) (undo-tree-id8533 . -38) (undo-tree-id8534 . -38) (undo-tree-id8535 . -38) (undo-tree-id8536 . -38) (undo-tree-id8537 . -38) (undo-tree-id8538 . -38) (undo-tree-id8539 . -38) (undo-tree-id8540 . -38) (undo-tree-id8541 . -38) (undo-tree-id8542 . -38) (undo-tree-id8543 . -38) (undo-tree-id8544 . -38) (undo-tree-id8545 . -37) (undo-tree-id8546 . -37) (undo-tree-id8547 . -37) (undo-tree-id8548 . -36) (undo-tree-id8549 . -36) (undo-tree-id8550 . -36) (undo-tree-id8551 . -35) (undo-tree-id8552 . -35) (undo-tree-id8553 . -35) (undo-tree-id8554 . -35) (undo-tree-id8555 . -35) (undo-tree-id8556 . -34) (undo-tree-id8557 . -34) (undo-tree-id8558 . -34) (undo-tree-id8559 . -33) (undo-tree-id8560 . -33) (undo-tree-id8561 . -33) (undo-tree-id8562 . -33) (undo-tree-id8563 . -33) (undo-tree-id8564 . -33) (undo-tree-id8565 . -33) (undo-tree-id8566 . -32) (undo-tree-id8567 . -32) (undo-tree-id8568 . -32) (undo-tree-id8569 . -32) (undo-tree-id8570 . -32) (undo-tree-id8571 . -32) (undo-tree-id8572 . -32) (undo-tree-id8573 . -32) (undo-tree-id8574 . -32) (undo-tree-id8575 . -32) (undo-tree-id8576 . -32) (undo-tree-id8577 . -32) (undo-tree-id8578 . -32) (undo-tree-id8579 . -32) (undo-tree-id8580 . -32) (undo-tree-id8581 . -32) (undo-tree-id8582 . -32) (undo-tree-id8583 . -32) (undo-tree-id8584 . -32) (undo-tree-id8585 . -32) (undo-tree-id8586 . -32) (undo-tree-id8587 . -32) (undo-tree-id8588 . -32) (undo-tree-id8589 . -32) (undo-tree-id8590 . -32) (undo-tree-id8591 . -32) (undo-tree-id8592 . -32) (undo-tree-id8593 . -32) (undo-tree-id8594 . -32) (undo-tree-id8595 . -32) (undo-tree-id8596 . -7) (undo-tree-id8597 . -7) (undo-tree-id8598 . -7) (undo-tree-id8599 . -13) (undo-tree-id8600 . -13) (undo-tree-id8601 . -13) (undo-tree-id8602 . -13) (undo-tree-id8603 . -13) (undo-tree-id8604 . -12) (undo-tree-id8605 . -12) (undo-tree-id8606 . -12) (undo-tree-id8607 . -12) (undo-tree-id8608 . -12) (undo-tree-id8609 . -12) (undo-tree-id8610 . -12) (undo-tree-id8611 . -12) (undo-tree-id8612 . -32) (undo-tree-id8613 . -32) (undo-tree-id8614 . -32) (undo-tree-id8615 . -32) (undo-tree-id8616 . -32) (undo-tree-id8617 . -32) (undo-tree-id8618 . -32) (undo-tree-id8619 . -32) (undo-tree-id8620 . -32) (undo-tree-id8621 . -32) (undo-tree-id8622 . -32) (undo-tree-id8623 . -32) (undo-tree-id8624 . -32) (undo-tree-id8625 . -32) (undo-tree-id8626 . -32) (undo-tree-id8627 . -32) (undo-tree-id8628 . -32) (undo-tree-id8629 . -32) (undo-tree-id8630 . -32) (undo-tree-id8631 . -32) (undo-tree-id8632 . -32) (undo-tree-id8633 . -32) (undo-tree-id8634 . -32) (undo-tree-id8635 . -32) (undo-tree-id8636 . -32) (undo-tree-id8637 . -39) (undo-tree-id8638 . -39) (undo-tree-id8639 . -38) (undo-tree-id8640 . -39) (undo-tree-id8641 . -38) (undo-tree-id8642 . -39) (undo-tree-id8643 . -38) (undo-tree-id8644 . -39) (undo-tree-id8645 . -38) (undo-tree-id8646 . -39) (undo-tree-id8647 . -38) (undo-tree-id8648 . -39) (undo-tree-id8649 . -38) (undo-tree-id8650 . -39) (undo-tree-id8651 . -32) (undo-tree-id8652 . -33) (undo-tree-id8653 . -39) (undo-tree-id8654 . -39) (undo-tree-id8655 . -39) (undo-tree-id8656 . -37) (undo-tree-id8657 . -37) (undo-tree-id8658 . -37) (undo-tree-id8659 . -37) (undo-tree-id8660 . -37) (undo-tree-id8661 . -37) (undo-tree-id8662 . -37) (undo-tree-id8663 . -37) (undo-tree-id8664 . -37) (undo-tree-id8665 . -37) (undo-tree-id8666 . -37) (undo-tree-id8667 . -37) (undo-tree-id8668 . -37) (undo-tree-id8669 . -37) (undo-tree-id8670 . -37) (undo-tree-id8671 . -37) (undo-tree-id8672 . -37) (undo-tree-id8673 . -37) (undo-tree-id8674 . -37) (undo-tree-id8675 . -37) (undo-tree-id8676 . -37) (undo-tree-id8677 . -37) (undo-tree-id8678 . -37) (undo-tree-id8679 . -37) (undo-tree-id8680 . -37) (undo-tree-id8681 . -37) (undo-tree-id8682 . -37) (undo-tree-id8683 . -37) (undo-tree-id8684 . -37) (undo-tree-id8685 . -37) (undo-tree-id8686 . -37) (undo-tree-id8687 . -37) (undo-tree-id8688 . -37) (undo-tree-id8689 . -37) (undo-tree-id8690 . -37) (undo-tree-id8691 . -37) (undo-tree-id8692 . -37) (undo-tree-id8693 . -37) (undo-tree-id8694 . -37) (undo-tree-id8695 . -37) (undo-tree-id8696 . -37) (undo-tree-id8697 . -37) (undo-tree-id8698 . -37) (undo-tree-id8699 . -37) (undo-tree-id8700 . -37) (undo-tree-id8701 . -37) (undo-tree-id8702 . -37) (undo-tree-id8703 . -37) (undo-tree-id8704 . -37) (undo-tree-id8705 . -37) (undo-tree-id8706 . -37) (undo-tree-id8707 . -37) (undo-tree-id8708 . -37) (undo-tree-id8709 . -37) (undo-tree-id8710 . -37) (undo-tree-id8711 . -46) (undo-tree-id8712 . -47) (undo-tree-id8713 . -37) (undo-tree-id8714 . -37) (undo-tree-id8715 . -37) (undo-tree-id8716 . -37) (undo-tree-id8717 . -37) (undo-tree-id8718 . -38) (undo-tree-id8719 . -38) (undo-tree-id8720 . -38) (undo-tree-id8721 . -38) (undo-tree-id8722 . -38) (undo-tree-id8723 . -39) (undo-tree-id8724 . -39) (undo-tree-id8725 . -39) (undo-tree-id8726 . -40) (undo-tree-id8727 . -40) (undo-tree-id8728 . -40) (undo-tree-id8729 . -41) (undo-tree-id8730 . -41) (undo-tree-id8731 . -41) (undo-tree-id8732 . -42) (undo-tree-id8733 . -42) (undo-tree-id8734 . -42) (undo-tree-id8735 . -43) (undo-tree-id8736 . -43) (undo-tree-id8737 . -43) (undo-tree-id8738 . -44) (undo-tree-id8739 . -44) (undo-tree-id8740 . -44) (undo-tree-id8741 . -45) (undo-tree-id8742 . -45) (undo-tree-id8743 . -44) (undo-tree-id8744 . -45) (undo-tree-id8745 . -44) (undo-tree-id8746 . -45) (undo-tree-id8747 . -44) (undo-tree-id8748 . -45) (undo-tree-id8749 . -44) (undo-tree-id8750 . -45) (undo-tree-id8751 . -44) (undo-tree-id8752 . -45) (undo-tree-id8753 . -44) (undo-tree-id8754 . -45) (undo-tree-id8755 . -31) (undo-tree-id8756 . -32) (undo-tree-id8757 . -45) (undo-tree-id8758 . -46) (undo-tree-id8759 . -46) (undo-tree-id8760 . -46) (undo-tree-id8761 . -46) (undo-tree-id8762 . -46) (undo-tree-id8763 . -46) (undo-tree-id8764 . -46) (undo-tree-id8765 . -46) (undo-tree-id8766 . -46) (undo-tree-id8767 . -46) (undo-tree-id8768 . -46) (undo-tree-id8769 . -46) (undo-tree-id8770 . -46) (undo-tree-id8771 . -46) (undo-tree-id8772 . -46) (undo-tree-id8773 . -46) (undo-tree-id8774 . -59) (undo-tree-id8775 . -59) (undo-tree-id8776 . -59) (undo-tree-id8777 . -59) (undo-tree-id8778 . -59) (undo-tree-id8779 . -59) (undo-tree-id8780 . -59) (undo-tree-id8781 . -59) (t 24169 50098 24267 425000)) nil (24169 50179 607188 0) 0 nil] [nil ([nil nil ((465 . 467) (464 . 466) (#("[" 0 1 (fontified nil)) . -464) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (463 . 465)) ((#("&[" 0 1 (fontified nil) 1 2 (fontified nil)) . 463) (undo-tree-id8202 . -2) (undo-tree-id8203 . -2) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (464 . 465) (#("[]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 464) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -1) (undo-tree-id8236 . -1) (undo-tree-id8237 . -1) (undo-tree-id8238 . -1) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 465) (undo-tree-id8260 . -2) (undo-tree-id8261 . -2) (undo-tree-id8262 . -2) (undo-tree-id8263 . -2) (undo-tree-id8264 . -2) (undo-tree-id8265 . -2) (undo-tree-id8266 . -2) (undo-tree-id8267 . -2) (undo-tree-id8268 . -2) (undo-tree-id8269 . -2) (undo-tree-id8270 . -2) (undo-tree-id8271 . -2) (undo-tree-id8272 . -2) (undo-tree-id8273 . -2) (undo-tree-id8274 . -2) (undo-tree-id8275 . -2) (undo-tree-id8276 . -2) (undo-tree-id8277 . -2) (undo-tree-id8278 . -2) (undo-tree-id8279 . -2) (undo-tree-id8280 . -2) (undo-tree-id8281 . -2) (undo-tree-id8282 . -2) (undo-tree-id8283 . -2) (undo-tree-id8284 . -2) (undo-tree-id8285 . -2) (undo-tree-id8286 . -2) (undo-tree-id8287 . -2) (t 24169 50077 981788 926000)) (24169 50077 957008 0) 0 nil]) ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -463) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) (undo-tree-id7403 . -1) (undo-tree-id7404 . -1) (undo-tree-id7405 . -1) (undo-tree-id7406 . -1) (undo-tree-id7407 . -1) (undo-tree-id7408 . -1) (undo-tree-id7409 . -1) (undo-tree-id7410 . -1) (undo-tree-id7411 . -1) (undo-tree-id7412 . -1) (undo-tree-id7413 . -1) (undo-tree-id7414 . -1) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (undo-tree-id7433 . -1) (undo-tree-id7434 . -1) (undo-tree-id7435 . -1) (undo-tree-id7436 . -1) (undo-tree-id7437 . -1) (undo-tree-id7438 . -1) (undo-tree-id7439 . -1) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) (undo-tree-id7461 . -1) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (#("u" 0 1 (fontified t)) . -464) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (#("8" 0 1 (face font-lock-type-face fontified t)) . -465) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) (#(";" 0 1 (fontified t)) . -466) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (undo-tree-id7812 . -1) (undo-tree-id7813 . -1) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1) (undo-tree-id7821 . -1) (undo-tree-id7822 . -1) (undo-tree-id7823 . -1) (undo-tree-id7824 . -1) (undo-tree-id7825 . -1) (undo-tree-id7826 . -1) (undo-tree-id7827 . -1) (undo-tree-id7828 . -1) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -1) (undo-tree-id7847 . -1) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (undo-tree-id7865 . -1) (undo-tree-id7866 . -1) (undo-tree-id7867 . -1) (undo-tree-id7868 . -1) (undo-tree-id7869 . -1) (undo-tree-id7870 . -1) (undo-tree-id7871 . -1) (undo-tree-id7872 . -1) (undo-tree-id7873 . -1) (undo-tree-id7874 . -1) (undo-tree-id7875 . -1) (undo-tree-id7876 . -1) (undo-tree-id7877 . -1) (undo-tree-id7878 . -1) (undo-tree-id7879 . -1) (undo-tree-id7880 . -1) (undo-tree-id7881 . -1) (undo-tree-id7882 . -1) (undo-tree-id7883 . -1) (undo-tree-id7884 . -1) (undo-tree-id7885 . -1) (undo-tree-id7886 . -1) (undo-tree-id7887 . -1) (undo-tree-id7888 . -1) (undo-tree-id7889 . -1) (undo-tree-id7890 . -1) (undo-tree-id7891 . -1) (undo-tree-id7892 . -1) (undo-tree-id7893 . -1) (undo-tree-id7894 . -1) (undo-tree-id7895 . -1) (undo-tree-id7896 . -1) (undo-tree-id7897 . -1) (undo-tree-id7898 . -1) (undo-tree-id7899 . -1) (undo-tree-id7900 . -1) (undo-tree-id7901 . -1) (undo-tree-id7902 . -1) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (undo-tree-id7910 . -1) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) (undo-tree-id7914 . -1) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1) (undo-tree-id7919 . -1) (undo-tree-id7920 . -1) (undo-tree-id7921 . -1) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (#(" " 0 1 (fontified t)) . -467) (undo-tree-id7924 . -1) (undo-tree-id7925 . -1) (undo-tree-id7926 . -1) (undo-tree-id7927 . -1) (undo-tree-id7928 . -1) (undo-tree-id7929 . -1) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) (undo-tree-id7932 . -1) (undo-tree-id7933 . -1) (undo-tree-id7934 . -1) (undo-tree-id7935 . -1) (undo-tree-id7936 . -1) (undo-tree-id7937 . -1) (undo-tree-id7938 . -1) (undo-tree-id7939 . -1) (undo-tree-id7940 . -1) (undo-tree-id7941 . -1) (undo-tree-id7942 . -1) (undo-tree-id7943 . -1) (undo-tree-id7944 . -1) (undo-tree-id7945 . -1) (undo-tree-id7946 . -1) (undo-tree-id7947 . -1) (undo-tree-id7948 . -1) (undo-tree-id7949 . -1) (undo-tree-id7950 . -1) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (undo-tree-id7960 . -1) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) (undo-tree-id8056 . -1) (#("8" 0 1 (face highlight-numbers-number fontified t)) . -468) (undo-tree-id8057 . -1) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -1) (undo-tree-id8061 . -1) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) (undo-tree-id8066 . -1) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -1) (undo-tree-id8070 . -1) (undo-tree-id8071 . -1) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -469) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (undo-tree-id8173 . -1) (undo-tree-id8174 . -1) (undo-tree-id8175 . -1) (undo-tree-id8176 . -1) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . 1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) 470 (t 24169 50062 370781 760000)) ((463 . 470)) (24169 50094 246533 0) 0 nil]) ((468 . 469)) ((#("8" 0 1 (face highlight-numbers-number fontified t)) . 468) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1)) (24169 50097 133014 0) 0 nil]) ((#("4" 0 1 (face highlight-numbers-number fontified t)) . 468) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1)) ((468 . 469)) (24169 50096 797898 0) 0 nil] [nil ([nil nil ((468 . 469)) ((#("8" 0 1 (face highlight-numbers-number fontified t)) . 468) (undo-tree-id7305 . -1) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (t 24169 50056 672234 186000)) (24169 50056 651915 0) 0 nil]) ((#("4" 0 1 (face highlight-numbers-number fontified t)) . -468) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) 469 (t 24169 50045 959124 864000)) ((468 . 469)) (24169 50059 708191 0) 0 nil]) ((477 . 478)) nil (24169 50095 484658 0) 0 nil]) ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -477) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (#("0" 0 1 (face highlight-numbers-number fontified t)) . -478) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) (undo-tree-id6954 . -1) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (#("," 0 1 (fontified t)) . -479) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) 480) nil (24169 50045 938312 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -480) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1) (undo-tree-id7127 . -1) (undo-tree-id7128 . -1) (undo-tree-id7129 . -1) (undo-tree-id7130 . -1) (undo-tree-id7131 . -1) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) (undo-tree-id7139 . -1) (undo-tree-id7140 . -1) (undo-tree-id7141 . -1) (undo-tree-id7142 . -1) (undo-tree-id7143 . -1) (undo-tree-id7144 . -1) (undo-tree-id7145 . -1) (undo-tree-id7146 . -1) (undo-tree-id7147 . -1) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) 481) nil (24169 50045 938382 0) 0 nil]) ((#("0, " 0 1 (face highlight-numbers-number fontified t) 1 3 (fontified t)) . -481) (undo-tree-id7155 . -3) (undo-tree-id7156 . -3) (undo-tree-id7157 . -3) (undo-tree-id7158 . -3) (undo-tree-id7159 . -3) (undo-tree-id7160 . -3) (undo-tree-id7161 . -3) (undo-tree-id7162 . -3) (undo-tree-id7163 . -3) (undo-tree-id7164 . -3) (undo-tree-id7165 . -3) (undo-tree-id7166 . -3) (undo-tree-id7167 . -3) (undo-tree-id7168 . -3) (undo-tree-id7169 . -3) (undo-tree-id7170 . -3) (undo-tree-id7171 . -3) (undo-tree-id7172 . -3) (undo-tree-id7173 . -3) (undo-tree-id7174 . -3) (undo-tree-id7175 . -3) (undo-tree-id7176 . -3) (undo-tree-id7177 . -3) (undo-tree-id7178 . -3) (undo-tree-id7179 . -3) (undo-tree-id7180 . -3) (undo-tree-id7181 . -3) (undo-tree-id7182 . -3) (undo-tree-id7183 . -3) (undo-tree-id7184 . -3) (undo-tree-id7185 . -3) (undo-tree-id7186 . -3) (undo-tree-id7187 . -3) (undo-tree-id7188 . -3) (undo-tree-id7189 . -3) (undo-tree-id7190 . -3) (undo-tree-id7191 . -3) (undo-tree-id7192 . -3) (undo-tree-id7193 . -3) (undo-tree-id7194 . -3) (undo-tree-id7195 . -3) (undo-tree-id7196 . -3) (undo-tree-id7197 . -3) (undo-tree-id7198 . -3) (undo-tree-id7199 . -3) (undo-tree-id7200 . -3) (undo-tree-id7201 . -3) (undo-tree-id7202 . -3) (undo-tree-id7203 . -3) (undo-tree-id7204 . -3) (undo-tree-id7205 . -3) (undo-tree-id7206 . -3) (undo-tree-id7207 . -3) (undo-tree-id7208 . -3) (undo-tree-id7209 . -3) (undo-tree-id7210 . -3) (undo-tree-id7211 . -3) 484) nil (24169 50045 938440 0) 0 nil]) ((#("0, " 0 1 (face highlight-numbers-number fontified t) 1 3 (fontified t)) . -484) (undo-tree-id7212 . -3) (undo-tree-id7213 . -3) (undo-tree-id7214 . -3) (undo-tree-id7215 . -3) (undo-tree-id7216 . -3) (undo-tree-id7217 . -3) (undo-tree-id7218 . -3) (undo-tree-id7219 . -3) (undo-tree-id7220 . -3) (undo-tree-id7221 . -3) (undo-tree-id7222 . -3) (undo-tree-id7223 . -3) (undo-tree-id7224 . -3) (undo-tree-id7225 . -3) (undo-tree-id7226 . -3) (undo-tree-id7227 . -3) (undo-tree-id7228 . -3) (undo-tree-id7229 . -3) (undo-tree-id7230 . -3) (undo-tree-id7231 . -3) (undo-tree-id7232 . -3) (undo-tree-id7233 . -3) (undo-tree-id7234 . -3) (undo-tree-id7235 . -3) (undo-tree-id7236 . -3) (undo-tree-id7237 . -3) (undo-tree-id7238 . -3) (undo-tree-id7239 . -3) (undo-tree-id7240 . -3) (undo-tree-id7241 . -3) (undo-tree-id7242 . -3) (undo-tree-id7243 . -3) (undo-tree-id7244 . -3) (undo-tree-id7245 . -3) (undo-tree-id7246 . -3) (undo-tree-id7247 . -3) (undo-tree-id7248 . -3) (undo-tree-id7249 . -3) (undo-tree-id7250 . -3) (undo-tree-id7251 . -3) (undo-tree-id7252 . -3) (undo-tree-id7253 . -3) (undo-tree-id7254 . -3) (undo-tree-id7255 . -3) (undo-tree-id7256 . -3) (undo-tree-id7257 . -3) (undo-tree-id7258 . -3) (undo-tree-id7259 . -3) (undo-tree-id7260 . -3) (undo-tree-id7261 . -3) (undo-tree-id7262 . -3) (undo-tree-id7263 . -3) (undo-tree-id7264 . -3) (undo-tree-id7265 . -3) 487) nil (24169 50045 938495 0) 0 nil]) ((#("42]" 0 2 (face highlight-numbers-number fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t)) . -487) (undo-tree-id7266 . -3) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -2) (undo-tree-id7271 . -2) (undo-tree-id7272 . -2) (undo-tree-id7273 . -3) (undo-tree-id7274 . -3) (undo-tree-id7275 . -2) (undo-tree-id7276 . -3) (undo-tree-id7277 . -2) (undo-tree-id7278 . -3) (undo-tree-id7279 . -2) (undo-tree-id7280 . -3) (undo-tree-id7281 . -2) (undo-tree-id7282 . -3) (undo-tree-id7283 . -2) (undo-tree-id7284 . -3) (undo-tree-id7285 . -2) (undo-tree-id7286 . -3) (undo-tree-id7287 . -2) (undo-tree-id7288 . 1) (undo-tree-id7289 . -3) (undo-tree-id7290 . -3) (undo-tree-id7291 . -3) (undo-tree-id7292 . -3) 490 (t 24169 50038 816044 569000)) nil (24169 50045 938524 0) 0 nil]) ((501 . 502)) nil (24169 50038 788826 0) 0 nil]) ((431 . 432) 500 (t 24169 50035 629923 851000)) nil (24169 50038 788832 0) 0 nil]) ((nil rear-nonsticky nil 499 . 500) (nil fontified nil 431 . 500) (431 . 500)) nil (24169 50035 601994 0) 0 nil]) ((#("	std::mem::transmute::<[u8; 4], u32>(i).to_be();" 0 1 (fontified t) 1 4 (face font-lock-constant-face fontified t) 4 6 (fontified t) 6 9 (face font-lock-constant-face fontified t) 9 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 29 (face highlight-numbers-number fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 32 (fontified t) 32 35 (face font-lock-type-face fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 37 (face (rainbow-delimiters-depth-3-face) fontified t) 37 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t) 47 48 (rear-nonsticky t fontified t)) . 431) (undo-tree-id6759 . -48) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -48) (undo-tree-id6763 . -39) (undo-tree-id6764 . -39) (undo-tree-id6765 . -39) (undo-tree-id6766 . -39) (undo-tree-id6767 . -39) (undo-tree-id6768 . -39) (undo-tree-id6769 . -39) (undo-tree-id6770 . -39) (undo-tree-id6771 . -39) (undo-tree-id6772 . -39) (undo-tree-id6773 . -39) (undo-tree-id6774 . -39) (undo-tree-id6775 . -39) (undo-tree-id6776 . -39) (undo-tree-id6777 . -39) (undo-tree-id6778 . -39) (undo-tree-id6779 . -39) (undo-tree-id6780 . -39) (undo-tree-id6781 . -39) (undo-tree-id6782 . -39) (undo-tree-id6783 . -39) (undo-tree-id6784 . -39) (undo-tree-id6785 . -39) (undo-tree-id6786 . -39) (undo-tree-id6787 . -39) (undo-tree-id6788 . -39) (undo-tree-id6789 . -39) (undo-tree-id6790 . -39) (undo-tree-id6791 . -39) (undo-tree-id6792 . -39) (undo-tree-id6793 . -39) (undo-tree-id6794 . -39) (undo-tree-id6795 . -39) (undo-tree-id6796 . -39) (undo-tree-id6797 . -39) (undo-tree-id6798 . -39) (undo-tree-id6799 . -39) (undo-tree-id6800 . -39) (undo-tree-id6801 . -39) (undo-tree-id6802 . -39) (undo-tree-id6803 . -39) (undo-tree-id6804 . -39) (undo-tree-id6805 . -39) (undo-tree-id6806 . -39) (undo-tree-id6807 . -39) (undo-tree-id6808 . -39) (undo-tree-id6809 . -39) (undo-tree-id6810 . -39) (undo-tree-id6811 . -39) (undo-tree-id6812 . -39) (undo-tree-id6813 . -39) (undo-tree-id6814 . -39) (undo-tree-id6815 . -39) (undo-tree-id6816 . -39) (undo-tree-id6817 . -39) (undo-tree-id6818 . -39) (undo-tree-id6819 . -39) (undo-tree-id6820 . -39) (undo-tree-id6821 . -39) (undo-tree-id6822 . -39) (undo-tree-id6823 . -39) (undo-tree-id6824 . -39) (undo-tree-id6825 . -39) (undo-tree-id6826 . -39) (undo-tree-id6827 . -39) (undo-tree-id6828 . -37) (undo-tree-id6829 . -38) (undo-tree-id6830 . -39) (undo-tree-id6831 . -39) (undo-tree-id6832 . -38) (undo-tree-id6833 . -39) (undo-tree-id6834 . -38) (undo-tree-id6835 . -39) (undo-tree-id6836 . -38) (undo-tree-id6837 . -39) (undo-tree-id6838 . -38) (undo-tree-id6839 . -39) (undo-tree-id6840 . -38) (undo-tree-id6841 . -39) (undo-tree-id6842 . -38) (undo-tree-id6843 . -39) (undo-tree-id6844 . -36) (undo-tree-id6845 . -37) (undo-tree-id6846 . -39) (undo-tree-id6847 . -39) (undo-tree-id6848 . -38) (undo-tree-id6849 . -39) (undo-tree-id6850 . -38) (undo-tree-id6851 . -39) (undo-tree-id6852 . -38) (undo-tree-id6853 . -39) (undo-tree-id6854 . -38) (undo-tree-id6855 . -39) (undo-tree-id6856 . -38) (undo-tree-id6857 . -39) (undo-tree-id6858 . -38) (undo-tree-id6859 . -39) (undo-tree-id6860 . -36) (undo-tree-id6861 . -37) (undo-tree-id6862 . -39) (undo-tree-id6863 . -48) (undo-tree-id6864 . -48) (undo-tree-id6865 . -48) (undo-tree-id6866 . -48) (undo-tree-id6867 . -48) (undo-tree-id6868 . -48) (undo-tree-id6869 . -48) (t 24169 50022 826819 127000)) nil (24169 50035 602162 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -470) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -471) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . 1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) 472 (t 24169 50009 899169 631000)) nil (24169 50022 799302 0) 0 nil]) ((#("	" 0 1 (fontified t)) . -432) 431 (t 24169 50008 252567 158000)) nil (24169 50009 870808 0) 0 nil]) ((apply 3 431 482 undo--wrap-and-run-primitive-undo 431 482 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -433) 431)) (t 24169 50004 833860 7000)) nil (24169 50008 224879 0) 0 nil]) ((nil rear-nonsticky nil 484 . 485) (nil fontified nil 484 . 485) (nil fontified nil 483 . 484) (nil fontified nil 482 . 483) (nil fontified nil 476 . 482) (nil fontified nil 475 . 476) (nil fontified nil 474 . 475) (nil fontified nil 473 . 474) (nil fontified nil 472 . 473) (nil fontified nil 471 . 472) (nil fontified nil 470 . 471) (nil fontified nil 467 . 470) (nil fontified nil 465 . 467) (nil fontified nil 464 . 465) (nil fontified nil 463 . 464) (nil fontified nil 461 . 463) (nil fontified nil 459 . 461) (nil fontified nil 458 . 459) (nil fontified nil 457 . 458) (nil fontified nil 444 . 457) (nil fontified nil 441 . 444) (nil fontified nil 439 . 441) (nil fontified nil 436 . 439) (nil fontified nil 433 . 436) (nil fontified nil 432 . 433) (432 . 485)) nil (24169 50004 809722 0) 0 nil]) ((430 . 432)) nil (24169 50004 809728 0) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("	// std::mem::transmute::<[u8; 4], u32>(i) }.to_be();" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 7 (face font-lock-comment-face fontified t) 7 9 (face font-lock-comment-face fontified t) 9 12 (face font-lock-comment-face fontified t) 12 25 (face font-lock-comment-face fontified t) 25 26 (face font-lock-comment-face syntax-table #1# fontified t) 26 27 (face font-lock-comment-face fontified t) 27 29 (face font-lock-comment-face fontified t) 29 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t) 32 33 (face font-lock-comment-face fontified t) 33 35 (face font-lock-comment-face fontified t) 35 38 (face font-lock-comment-face fontified t) 38 39 (face font-lock-comment-face syntax-table #1# fontified t) 39 40 (face font-lock-comment-face fontified t) 40 41 (face font-lock-comment-face fontified t) 41 42 (face font-lock-comment-face fontified t) 42 43 (face font-lock-comment-face fontified t) 43 44 (face font-lock-comment-face fontified t) 44 50 (face font-lock-comment-face fontified t) 50 51 (face font-lock-comment-face fontified t) 51 52 (face font-lock-comment-face rear-nonsticky t fontified t) 52 53 (face font-lock-comment-face fontified t)) . 431) (undo-tree-id5536 . -53) (undo-tree-id5537 . -53) (undo-tree-id5538 . -30) (undo-tree-id5539 . -30) (undo-tree-id5540 . -30) (undo-tree-id5541 . -30) (undo-tree-id5542 . -30) (undo-tree-id5543 . -30) (undo-tree-id5544 . -53) (undo-tree-id5545 . -53) (undo-tree-id5546 . -53) (undo-tree-id5547 . -53) (undo-tree-id5548 . -53) (undo-tree-id5549 . -53) (undo-tree-id5550 . -53) (t 24169 49978 723422 470000)) ((431 . 484)) (24169 49991 520843 0) 0 nil]) ((apply -3 431 484 undo--wrap-and-run-primitive-undo 431 484 ((432 . 435) 431)) (t 24169 49975 741659 964000)) ((apply 3 431 481 undo--wrap-and-run-primitive-undo 431 481 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 432) 431)) (t 24169 49978 723422 470000)) (24169 49991 521487 0) 0 nil]) ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -542) (undo-tree-id5498 . -1) (undo-tree-id5500 . -1) (undo-tree-id5502 . -1) (undo-tree-id5504 . -1) (undo-tree-id5506 . -1) (undo-tree-id5508 . -1) (undo-tree-id5510 . -1) (undo-tree-id5512 . -1) (undo-tree-id5514 . -1) (undo-tree-id5516 . -1) (undo-tree-id5518 . -1) (undo-tree-id5520 . -1) (undo-tree-id5522 . -1) (undo-tree-id5524 . -1) (undo-tree-id5526 . -1) (undo-tree-id5528 . -1) (undo-tree-id5530 . 1) (undo-tree-id5532 . -1) (undo-tree-id5534 . -1) 543) ((542 . 543)) (24169 49991 947403 0) 0 nil]) ((542 . 543) (t 24169 49969 60856 481000)) ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 542) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1)) (24169 49992 31100 0) 0 nil]) ((542 . 543) (t 24169 49949 494412 17000)) ((#(";" 0 1 (fontified t)) . 542)) (24169 49992 116091 0) 0 nil]) ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -480) (undo-tree-id5460 . -1) (undo-tree-id5462 . -1) (undo-tree-id5464 . -1) (undo-tree-id5466 . -1) (undo-tree-id5468 . -1) (undo-tree-id5470 . -1) (undo-tree-id5472 . -1) (undo-tree-id5474 . -1) (undo-tree-id5476 . -1) (undo-tree-id5478 . -1) (undo-tree-id5480 . -1) (undo-tree-id5482 . -1) (undo-tree-id5484 . -1) (undo-tree-id5486 . -1) (undo-tree-id5488 . -1) (undo-tree-id5490 . -1) (undo-tree-id5492 . 1) (undo-tree-id5494 . -1) (undo-tree-id5496 . -1) 481) ((480 . 481)) (24169 49992 199221 0) 0 nil]) ((480 . 481) (t 24169 49943 889034 305000)) ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 480) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1)) (24169 49992 283529 0) 0 nil]) ((480 . 481) (t 24169 49938 223718 502000)) ((#(";" 0 1 (fontified t)) . 480) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1)) (24169 49992 367930 0) 0 nil]) ((468 . 469)) ((#("i" 0 1 (fontified t)) . 468)) (24169 49992 452132 0) 0 nil]) ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -468) (undo-tree-id5070 . -1) (undo-tree-id5072 . -1) (undo-tree-id5074 . -1) (undo-tree-id5076 . -1) (undo-tree-id5078 . -1) (undo-tree-id5080 . -1) (undo-tree-id5082 . -1) (undo-tree-id5084 . -1) (undo-tree-id5086 . -1) (undo-tree-id5088 . -1) (undo-tree-id5090 . -1) (undo-tree-id5092 . -1) (undo-tree-id5094 . -1) (undo-tree-id5096 . -1) (undo-tree-id5098 . -1) (undo-tree-id5100 . -1) (undo-tree-id5102 . -1) (undo-tree-id5104 . -1) (undo-tree-id5106 . -1) (undo-tree-id5108 . -1) (undo-tree-id5110 . -1) (undo-tree-id5112 . -1) (undo-tree-id5114 . -1) (undo-tree-id5116 . -1) (undo-tree-id5118 . -1) (undo-tree-id5120 . -1) (undo-tree-id5122 . -1) (undo-tree-id5124 . -1) (undo-tree-id5126 . -1) (undo-tree-id5128 . -1) (undo-tree-id5130 . -1) (undo-tree-id5132 . -1) (undo-tree-id5134 . -1) (undo-tree-id5136 . -1) (undo-tree-id5138 . -1) (undo-tree-id5140 . -1) (undo-tree-id5142 . -1) (undo-tree-id5144 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5149 . -1) (#("0" 0 1 (face highlight-numbers-number fontified t)) . -469) (undo-tree-id5151 . -1) (undo-tree-id5153 . -1) (undo-tree-id5155 . -1) (undo-tree-id5157 . -1) (undo-tree-id5159 . -1) (undo-tree-id5161 . -1) (undo-tree-id5163 . -1) (undo-tree-id5165 . -1) (undo-tree-id5167 . -1) (undo-tree-id5169 . -1) (undo-tree-id5171 . -1) (undo-tree-id5173 . -1) (undo-tree-id5175 . -1) (undo-tree-id5177 . -1) (undo-tree-id5179 . -1) (undo-tree-id5181 . -1) (undo-tree-id5183 . -1) (undo-tree-id5185 . -1) (undo-tree-id5187 . -1) (undo-tree-id5189 . -1) (undo-tree-id5191 . -1) (undo-tree-id5193 . -1) (undo-tree-id5195 . -1) (undo-tree-id5197 . -1) (undo-tree-id5199 . -1) (undo-tree-id5201 . -1) (undo-tree-id5203 . -1) (undo-tree-id5205 . -1) (undo-tree-id5207 . -1) (undo-tree-id5209 . -1) (undo-tree-id5211 . -1) (undo-tree-id5213 . -1) (undo-tree-id5215 . -1) (undo-tree-id5217 . -1) (undo-tree-id5219 . -1) (#("," 0 1 (fontified t)) . -470) (undo-tree-id5221 . -1) (undo-tree-id5223 . -1) (undo-tree-id5225 . -1) (undo-tree-id5227 . -1) (undo-tree-id5229 . -1) (undo-tree-id5231 . -1) (undo-tree-id5233 . -1) (undo-tree-id5235 . -1) (undo-tree-id5237 . -1) (undo-tree-id5239 . -1) (undo-tree-id5241 . -1) (undo-tree-id5243 . -1) (undo-tree-id5245 . -1) (undo-tree-id5247 . -1) (undo-tree-id5249 . -1) (undo-tree-id5251 . -1) (undo-tree-id5253 . -1) (undo-tree-id5255 . -1) (undo-tree-id5257 . -1) (undo-tree-id5259 . -1) (undo-tree-id5261 . -1) (undo-tree-id5263 . -1) (undo-tree-id5265 . -1) (undo-tree-id5267 . -1) (undo-tree-id5269 . -1) (undo-tree-id5271 . -1) (undo-tree-id5273 . -1) (undo-tree-id5275 . -1) (undo-tree-id5277 . -1) (undo-tree-id5279 . -1) (undo-tree-id5281 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (#(" " 0 1 (fontified t)) . -471) (undo-tree-id5286 . -1) (undo-tree-id5288 . -1) (undo-tree-id5290 . -1) (undo-tree-id5292 . -1) (undo-tree-id5294 . -1) (undo-tree-id5296 . -1) (undo-tree-id5298 . -1) (undo-tree-id5300 . -1) (undo-tree-id5302 . -1) (undo-tree-id5304 . -1) (undo-tree-id5306 . -1) (undo-tree-id5308 . -1) (undo-tree-id5310 . -1) (undo-tree-id5312 . -1) (undo-tree-id5314 . -1) (undo-tree-id5316 . -1) (undo-tree-id5318 . -1) (undo-tree-id5320 . -1) (undo-tree-id5322 . -1) (undo-tree-id5324 . -1) (undo-tree-id5326 . -1) (undo-tree-id5328 . -1) (undo-tree-id5330 . -1) (undo-tree-id5332 . -1) (undo-tree-id5334 . -1) (undo-tree-id5336 . -1) (undo-tree-id5338 . -1) (undo-tree-id5340 . -1) (undo-tree-id5342 . -1) 472) ((468 . 472)) (24169 49992 536546 0) 0 nil]) ((#("0, " 0 1 (face highlight-numbers-number fontified t) 1 3 (fontified t)) . -472) (undo-tree-id5344 . -3) (undo-tree-id5346 . -3) (undo-tree-id5348 . -3) (undo-tree-id5350 . -3) (undo-tree-id5352 . -3) (undo-tree-id5354 . -3) (undo-tree-id5356 . -3) (undo-tree-id5358 . -3) (undo-tree-id5360 . -3) (undo-tree-id5362 . -3) (undo-tree-id5364 . -3) (undo-tree-id5366 . -3) (undo-tree-id5368 . -3) (undo-tree-id5370 . -3) (undo-tree-id5372 . -3) (undo-tree-id5374 . -3) (undo-tree-id5376 . -3) (undo-tree-id5378 . -3) (undo-tree-id5380 . -3) (undo-tree-id5382 . -3) (undo-tree-id5384 . -3) (undo-tree-id5386 . -3) (undo-tree-id5388 . -3) (undo-tree-id5390 . -3) (undo-tree-id5391 . -3) 475) ((472 . 475)) (24169 49992 621319 0) 0 nil]) ((#("0, " 0 1 (face highlight-numbers-number fontified t) 1 3 (fontified t)) . -475) (undo-tree-id5393 . -3) (undo-tree-id5395 . -3) (undo-tree-id5397 . -3) (undo-tree-id5399 . -3) (undo-tree-id5401 . -3) (undo-tree-id5403 . -3) (undo-tree-id5405 . -3) (undo-tree-id5407 . -3) (undo-tree-id5409 . -3) (undo-tree-id5411 . -3) (undo-tree-id5413 . -3) (undo-tree-id5415 . -3) (undo-tree-id5417 . -3) (undo-tree-id5419 . -3) (undo-tree-id5421 . -3) (undo-tree-id5423 . -3) (undo-tree-id5425 . -3) (undo-tree-id5427 . -3) (undo-tree-id5429 . -3) (undo-tree-id5431 . -3) 478) ((475 . 478)) (24169 49992 704951 0) 0 nil]) ((#("42]" 0 2 (face highlight-numbers-number fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t)) . -478) (undo-tree-id5433 . -3) (undo-tree-id5435 . -1) (undo-tree-id5437 . -2) (undo-tree-id5439 . -2) (undo-tree-id5441 . -3) (undo-tree-id5443 . -3) (undo-tree-id5445 . -3) (undo-tree-id5447 . -3) (undo-tree-id5449 . -3) (undo-tree-id5451 . -3) (undo-tree-id5453 . -3) (undo-tree-id5455 . 1) (undo-tree-id5457 . -3) (undo-tree-id5459 . -3) 481) ((478 . 481)) (24169 49992 789202 0) 0 nil]) ((431 . 432) 491 (t 24169 49932 378473 537000)) ((#("	" 0 1 (fontified t)) . 431)) (24169 49992 873906 0) 0 nil]) ((nil rear-nonsticky nil 490 . 491) (nil fontified nil 431 . 491) (431 . 491)) ((#("std::mem::transmute::<[u8; 4], u32>([0, 0, 0, 42]) }.to_be()" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 8 (face font-lock-constant-face fontified nil) 8 21 (fontified nil) 21 22 (face (rainbow-delimiters-depth-3-face) fontified nil) 22 23 (face (rainbow-delimiters-depth-4-face) fontified nil) 23 25 (face font-lock-type-face fontified nil) 25 27 (fontified nil) 27 28 (face highlight-numbers-number fontified nil) 28 29 (face (rainbow-delimiters-depth-4-face) fontified nil) 29 31 (fontified nil) 31 34 (face font-lock-type-face fontified nil) 34 35 (face (rainbow-delimiters-depth-3-face) fontified nil) 35 36 (face (rainbow-delimiters-depth-3-face) fontified nil) 36 37 (face (rainbow-delimiters-depth-4-face) fontified nil) 37 38 (face highlight-numbers-number fontified nil) 38 39 (fontified nil) 39 40 (fontified nil) 40 41 (face highlight-numbers-number fontified nil) 41 43 (fontified nil) 43 44 (face highlight-numbers-number fontified nil) 44 46 (fontified nil) 46 48 (face highlight-numbers-number fontified nil) 48 49 (face (rainbow-delimiters-depth-4-face) fontified nil) 49 50 (face (rainbow-delimiters-depth-3-face) fontified nil) 50 51 (fontified nil) 51 52 (face (rainbow-delimiters-depth-2-face) fontified nil) 52 58 (fontified nil) 58 59 (face (rainbow-delimiters-depth-2-face) fontified nil) 59 60 (face (rainbow-delimiters-depth-2-face) rear-nonsticky nil fontified nil)) . 431) (undo-tree-id5569 . -60) (undo-tree-id5570 . -60) (undo-tree-id5571 . -60) (undo-tree-id5572 . -26) (undo-tree-id5573 . -26) (undo-tree-id5574 . -26) (undo-tree-id5575 . -26) (undo-tree-id5576 . -26) (undo-tree-id5577 . -26) (undo-tree-id5578 . -60) (undo-tree-id5579 . -60) (undo-tree-id5580 . -60) (undo-tree-id5581 . -60) (undo-tree-id5582 . -60) (undo-tree-id5583 . -60) (undo-tree-id5584 . -60) (undo-tree-id5585 . -60) (undo-tree-id5586 . -60) (undo-tree-id5587 . -60) (undo-tree-id5588 . -60) (undo-tree-id5589 . -60) (undo-tree-id5590 . -60) (undo-tree-id5591 . -60) (undo-tree-id5592 . -60) (undo-tree-id5593 . -36) (undo-tree-id5594 . -36) (undo-tree-id5595 . -36) (undo-tree-id5596 . -40) (undo-tree-id5597 . -40) (undo-tree-id5598 . -40) (undo-tree-id5599 . -43) (undo-tree-id5600 . -43) (undo-tree-id5601 . -43) (undo-tree-id5602 . -46) (undo-tree-id5603 . -46) (undo-tree-id5604 . -46) (undo-tree-id5605 . -49) (undo-tree-id5606 . -49) (undo-tree-id5607 . -49) (undo-tree-id5608 . -60) (undo-tree-id5609 . -60) (undo-tree-id5610 . -60) (nil rear-nonsticky t 490 . 491)) (24169 49992 957517 0) 0 nil]) ((#("	println!(\"{:?}\", be_u16::<&[u8]>(i));" 0 1 (fontified t) 1 9 (face rust-builtin-formatting-macro-face fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face font-lock-string-face fontified t) 11 14 (face rust-string-interpolation-face fontified t) 14 15 (face rust-string-interpolation-face fontified t) 15 16 (face font-lock-string-face fontified t) 16 18 (fontified t) 18 24 (fontified t) 24 26 (fontified t) 26 27 (syntax-table #1# fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-4-face) fontified t) 29 31 (face font-lock-type-face fontified t) 31 32 (face (rainbow-delimiters-depth-4-face) fontified t) 32 33 (syntax-table #1# fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) fontified t) 36 37 (face (rainbow-delimiters-depth-3-face) fontified t) 37 38 (fontified t)) . 431) (undo-tree-id5009 . -38) (undo-tree-id5010 . -38) (undo-tree-id5012 . -24) (undo-tree-id5014 . -28) (undo-tree-id5016 . -28) (undo-tree-id5018 . -28) (undo-tree-id5020 . -28) (undo-tree-id5022 . -28) (undo-tree-id5024 . -28) (undo-tree-id5026 . -28) (undo-tree-id5028 . -28) (undo-tree-id5030 . -28) (undo-tree-id5032 . -28) (undo-tree-id5034 . -28) (undo-tree-id5036 . -28) (undo-tree-id5038 . -38) (undo-tree-id5040 . -38) (undo-tree-id5042 . -34) (undo-tree-id5044 . -34) (undo-tree-id5046 . -29) (undo-tree-id5048 . -29) (undo-tree-id5050 . -21) (undo-tree-id5052 . -21) (undo-tree-id5054 . -21) (undo-tree-id5056 . -21) (undo-tree-id5058 . -21) (undo-tree-id5060 . -38) (undo-tree-id5062 . -38) (undo-tree-id5064 . -38) (undo-tree-id5066 . -38) (undo-tree-id5068 . -38) (t 24169 49743 893399 16000)) ((431 . 469)) (24169 49993 40847 0) 0 nil]) ((458 . 459) (t 24169 49728 82406 589000)) ((#("&" 0 1 (fontified t)) . 458)) (24169 49993 125190 0) 0 nil]) ((#("'" 0 1 (fontified t)) . -458) (undo-tree-id4822 . -1) (undo-tree-id4824 . -1) (undo-tree-id4826 . -1) (undo-tree-id4828 . -1) (undo-tree-id4830 . -1) (undo-tree-id4832 . -1) (undo-tree-id4834 . -1) (undo-tree-id4836 . -1) (undo-tree-id4838 . -1) (undo-tree-id4840 . -1) (undo-tree-id4842 . -1) (undo-tree-id4844 . -1) (undo-tree-id4846 . -1) (undo-tree-id4848 . -1) (undo-tree-id4850 . -1) (undo-tree-id4852 . -1) (undo-tree-id4854 . -1) (undo-tree-id4856 . -1) (undo-tree-id4858 . -1) (undo-tree-id4860 . -1) (undo-tree-id4862 . -1) (undo-tree-id4864 . -1) (undo-tree-id4866 . -1) (undo-tree-id4868 . -1) (undo-tree-id4870 . -1) (undo-tree-id4872 . -1) (undo-tree-id4874 . -1) (undo-tree-id4876 . -1) (undo-tree-id4878 . -1) (undo-tree-id4880 . -1) (undo-tree-id4882 . -1) (undo-tree-id4884 . -1) (undo-tree-id4886 . -1) (undo-tree-id4888 . -1) (undo-tree-id4890 . -1) (undo-tree-id4892 . -1) (undo-tree-id4894 . -1) (undo-tree-id4896 . -1) (undo-tree-id4898 . -1) (undo-tree-id4900 . -1) (undo-tree-id4902 . -1) (undo-tree-id4904 . -1) (undo-tree-id4906 . -1) (undo-tree-id4908 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -459) (undo-tree-id4910 . -1) (undo-tree-id4912 . -1) (undo-tree-id4914 . -1) (undo-tree-id4916 . -1) (undo-tree-id4918 . -1) (undo-tree-id4920 . -1) (undo-tree-id4922 . -1) (undo-tree-id4924 . -1) (undo-tree-id4926 . -1) (undo-tree-id4928 . -1) (undo-tree-id4930 . -1) (undo-tree-id4932 . -1) (undo-tree-id4934 . -1) (undo-tree-id4936 . -1) (undo-tree-id4938 . -1) (undo-tree-id4940 . -1) (undo-tree-id4942 . -1) (undo-tree-id4944 . -1) (undo-tree-id4946 . -1) (undo-tree-id4948 . -1) (undo-tree-id4950 . -1) (undo-tree-id4952 . -1) (undo-tree-id4954 . -1) (undo-tree-id4956 . -1) (undo-tree-id4958 . -1) (#("," 0 1 (fontified t)) . -460) (undo-tree-id4960 . -1) (undo-tree-id4962 . -1) (undo-tree-id4964 . -1) (undo-tree-id4966 . -1) (undo-tree-id4968 . -1) (undo-tree-id4970 . -1) (undo-tree-id4972 . -1) (undo-tree-id4974 . -1) (undo-tree-id4976 . -1) (undo-tree-id4978 . -1) (undo-tree-id4980 . -1) (undo-tree-id4982 . -1) (undo-tree-id4984 . -1) (undo-tree-id4986 . -1) (undo-tree-id4988 . -1) (undo-tree-id4990 . -1) (undo-tree-id4992 . -1) (undo-tree-id4994 . -1) (undo-tree-id4996 . -1) (undo-tree-id4998 . -1) (#(" " 0 1 (fontified t)) . -461) (undo-tree-id4999 . -1) (undo-tree-id5001 . -1) (undo-tree-id5003 . -1) (undo-tree-id5005 . -1) (undo-tree-id5007 . -1) 462 (t 24169 49709 314846 190000)) ((458 . 462)) (24169 49993 209339 0) 0 nil]) ((#("'" 0 1 (fontified t)) . -466) (undo-tree-id4802 . -1) (undo-tree-id4804 . -1) (undo-tree-id4806 . -1) (undo-tree-id4808 . -1) (undo-tree-id4810 . -1) (undo-tree-id4812 . -1) (undo-tree-id4814 . 1) (undo-tree-id4816 . -1) (undo-tree-id4818 . -1) (undo-tree-id4820 . -1) 467 (t 24169 49706 884492 884000)) ((466 . 467)) (24169 49993 294599 0) 0 nil]) ((463 . 465) (462 . 464) (#("[" 0 1 (fontified nil)) . -462) (undo-tree-id4771 . -1) (459 . 463) (459 . 460) (nil fontified nil 458 . 459) (458 . 459) (#("'" 0 1 (fontified nil)) . -458) (undo-tree-id4773 . -1) (458 . 459)) ((#("'" 0 1 (fontified nil)) . 458) (458 . 459) (#("'" 0 1 (fontified nil)) . 458) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (#("'" 0 1 (fontified nil)) . 459) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (#("a, [" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 459) (undo-tree-id5622 . -3) (undo-tree-id5623 . -3) (undo-tree-id5624 . -3) (462 . 463) (#("[]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 462) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 463)) (24169 49993 377811 0) 0 nil]) ((#(">" 0 1 (syntax-table #1# fontified nil)) . 459) (458 . 459) (457 . 459) (#("<" 0 1 (syntax-table #1# fontified nil)) . -457) (undo-tree-id4776 . -1) (457 . 458)) ((#("<" 0 1 (syntax-table #1# fontified nil)) . 457) (457 . 458) (#("<>" 0 1 (syntax-table #1# fontified nil) 1 2 (syntax-table #1# fontified nil)) . 457) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (#(">" 0 1 (syntax-table #1# fontified nil)) . 458) (459 . 460)) (24169 49993 463013 0) 0 nil]) ((455 . 457)) ((#("::" 0 2 (fontified t)) . 455) (undo-tree-id5638 . -2) (undo-tree-id5639 . -2) (undo-tree-id5640 . -2) (undo-tree-id5641 . -2) (undo-tree-id5642 . -2) (undo-tree-id5643 . -2) (undo-tree-id5644 . -2) (undo-tree-id5645 . -2) (undo-tree-id5646 . -2) (undo-tree-id5647 . -2) (undo-tree-id5648 . -2) (undo-tree-id5649 . -2) (undo-tree-id5650 . -2) (undo-tree-id5651 . -2) (undo-tree-id5652 . -2) (undo-tree-id5653 . -2)) (24169 49993 546160 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -457) (undo-tree-id4777 . -1) (undo-tree-id4779 . -1) (undo-tree-id4781 . -1) (undo-tree-id4783 . -1) (undo-tree-id4785 . -1) (undo-tree-id4787 . -1) (undo-tree-id4789 . -1) (undo-tree-id4791 . -1) (undo-tree-id4793 . -1) (undo-tree-id4795 . -1) (undo-tree-id4797 . -1) (undo-tree-id4799 . -1) (undo-tree-id4801 . -1) 458) ((457 . 458)) (24169 49993 750552 0) 0 nil] [nil ([nil ([nil nil ((463 . 465) (462 . 464) (#("[" 0 1 (fontified nil)) . -462) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (459 . 463) (459 . 460) (nil fontified nil 458 . 459) (458 . 459) (#("`" 0 1 (fontified nil)) . -458) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (458 . 459)) ((#("`" 0 1 (fontified nil)) . 458) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (458 . 459) (#("`" 0 1 (fontified nil)) . 458) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (#("`" 0 1 (fontified nil)) . 459) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (#("a, [" 0 3 (fontified nil) 3 4 (fontified nil)) . 459) (undo-tree-id4521 . -3) (undo-tree-id4522 . -3) (undo-tree-id4523 . -4) (undo-tree-id4524 . -4) (undo-tree-id4525 . -3) (undo-tree-id4526 . -3) (undo-tree-id4527 . -3) (undo-tree-id4528 . -3) (undo-tree-id4529 . -3) (undo-tree-id4530 . -3) (undo-tree-id4531 . -3) (undo-tree-id4532 . -3) (undo-tree-id4533 . -3) (undo-tree-id4534 . -3) (undo-tree-id4535 . -3) (undo-tree-id4536 . -3) (undo-tree-id4537 . -3) (undo-tree-id4538 . -3) (undo-tree-id4539 . -3) (undo-tree-id4540 . -3) (undo-tree-id4541 . -3) (undo-tree-id4542 . -3) (undo-tree-id4543 . -3) (undo-tree-id4544 . -3) (undo-tree-id4545 . -3) (undo-tree-id4546 . -3) (undo-tree-id4547 . -3) (undo-tree-id4548 . -3) (undo-tree-id4549 . -3) (undo-tree-id4550 . -3) (undo-tree-id4551 . -1) (undo-tree-id4552 . -3) (undo-tree-id4553 . -3) (undo-tree-id4554 . -3) (undo-tree-id4555 . -3) (undo-tree-id4556 . -3) (undo-tree-id4557 . -3) (undo-tree-id4558 . -3) (462 . 463) (#("[]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 462) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -2) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -2) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 463) (undo-tree-id4592 . -2) (undo-tree-id4593 . -2) (undo-tree-id4594 . -2) (undo-tree-id4595 . -2) (undo-tree-id4596 . -2) (undo-tree-id4597 . -2) (undo-tree-id4598 . -2) (undo-tree-id4599 . -2) (undo-tree-id4600 . -2) (undo-tree-id4601 . -2) (undo-tree-id4602 . -2) (undo-tree-id4603 . -2) (undo-tree-id4604 . -2) (undo-tree-id4605 . -2) (undo-tree-id4606 . -2) (undo-tree-id4607 . -2) (undo-tree-id4608 . -2) (undo-tree-id4609 . -2) (undo-tree-id4610 . -2) (undo-tree-id4611 . -2) (undo-tree-id4612 . -2) (undo-tree-id4613 . -2) (undo-tree-id4614 . -2) (undo-tree-id4615 . -2) (undo-tree-id4616 . -2) (undo-tree-id4617 . -2) (undo-tree-id4618 . -2) (undo-tree-id4619 . -2) (undo-tree-id4620 . -2) (t 24169 49686 316566 274000)) (24169 49686 299933 0) 0 nil]) ((#(">" 0 1 (syntax-table #1# fontified nil)) . 459) (undo-tree-id4472 . -1) (458 . 459) (457 . 459) (#("<" 0 1 (syntax-table #1# fontified nil)) . -457) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (455 . 458) (t 24169 49655 999115 214000)) ((#("::<" 0 2 (fontified nil) 2 3 (syntax-table #1# fontified nil)) . 455) (undo-tree-id4621 . -2) (undo-tree-id4622 . -3) (undo-tree-id4623 . -3) (undo-tree-id4624 . -2) (undo-tree-id4625 . -2) (undo-tree-id4626 . -2) (undo-tree-id4627 . -2) (undo-tree-id4628 . -2) (undo-tree-id4629 . -2) (undo-tree-id4630 . -2) (undo-tree-id4631 . -2) (undo-tree-id4632 . -2) (undo-tree-id4633 . -2) (undo-tree-id4634 . -2) (undo-tree-id4635 . -2) (undo-tree-id4636 . -2) (undo-tree-id4637 . -2) (undo-tree-id4638 . -2) (undo-tree-id4639 . -2) (undo-tree-id4640 . -2) (undo-tree-id4641 . -2) (undo-tree-id4642 . -2) (undo-tree-id4643 . -2) (undo-tree-id4644 . -2) (undo-tree-id4645 . -2) (undo-tree-id4646 . -2) (undo-tree-id4647 . -2) (undo-tree-id4648 . -2) (undo-tree-id4649 . -2) (undo-tree-id4650 . -2) (undo-tree-id4651 . -2) (undo-tree-id4652 . -2) (undo-tree-id4653 . -2) (undo-tree-id4654 . -2) (undo-tree-id4655 . -2) (undo-tree-id4656 . -2) (undo-tree-id4657 . -2) (undo-tree-id4658 . -2) (undo-tree-id4659 . -2) (undo-tree-id4660 . -2) (undo-tree-id4661 . -2) (undo-tree-id4662 . -2) (undo-tree-id4663 . -2) (undo-tree-id4664 . -2) (undo-tree-id4665 . -2) (undo-tree-id4666 . -2) (undo-tree-id4667 . -2) (undo-tree-id4668 . -2) (undo-tree-id4669 . -2) (undo-tree-id4670 . -2) (undo-tree-id4671 . -2) (undo-tree-id4672 . -2) (undo-tree-id4673 . -2) (undo-tree-id4674 . -2) (undo-tree-id4675 . -2) (undo-tree-id4676 . -2) (undo-tree-id4677 . -2) (undo-tree-id4678 . -2) (undo-tree-id4679 . -2) (undo-tree-id4680 . -2) (undo-tree-id4681 . -2) (undo-tree-id4682 . -2) (undo-tree-id4683 . -2) (undo-tree-id4684 . -2) (undo-tree-id4685 . -2) (undo-tree-id4686 . -2) (undo-tree-id4687 . -2) (457 . 458) (#("<>" 0 1 (syntax-table #1# fontified nil) 1 2 (syntax-table #1# fontified nil)) . 457) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (#(">" 0 1 (syntax-table #1# fontified nil)) . 458) (459 . 460)) (24169 49688 758940 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -457) (undo-tree-id4247 . -1) (undo-tree-id4249 . -1) (undo-tree-id4251 . -1) (undo-tree-id4253 . -1) (undo-tree-id4255 . -1) (undo-tree-id4257 . -1) (undo-tree-id4259 . -1) (undo-tree-id4261 . -1) (undo-tree-id4263 . -1) (undo-tree-id4265 . -1) (undo-tree-id4267 . -1) (undo-tree-id4269 . -1) (undo-tree-id4271 . -1) (undo-tree-id4273 . -1) (undo-tree-id4275 . -1) (undo-tree-id4277 . -1) (undo-tree-id4279 . -1) (undo-tree-id4281 . -1) (undo-tree-id4283 . -1) (undo-tree-id4285 . -1) (undo-tree-id4287 . -1) (undo-tree-id4289 . -1) (undo-tree-id4291 . -1) (undo-tree-id4293 . -1) (undo-tree-id4295 . -1) (undo-tree-id4297 . -1) (undo-tree-id4299 . -1) (undo-tree-id4301 . -1) (undo-tree-id4303 . -1) (undo-tree-id4305 . -1) (undo-tree-id4307 . -1) (undo-tree-id4309 . -1) (undo-tree-id4311 . -1) (undo-tree-id4313 . -1) (undo-tree-id4315 . -1) (undo-tree-id4317 . -1) (undo-tree-id4319 . -1) (undo-tree-id4321 . -1) (undo-tree-id4323 . -1) (undo-tree-id4325 . -1) (undo-tree-id4327 . -1) (undo-tree-id4329 . -1) (undo-tree-id4331 . -1) (undo-tree-id4333 . -1) (undo-tree-id4335 . -1) (undo-tree-id4337 . -1) (undo-tree-id4339 . -1) (undo-tree-id4341 . -1) (undo-tree-id4343 . -1) (undo-tree-id4345 . -1) (undo-tree-id4347 . -1) 458) ((457 . 458)) (24169 49688 934309 0) 0 nil]) ((#("as &[" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t)) . 458) (undo-tree-id4753 . -5) (undo-tree-id4755 . -5) (undo-tree-id4757 . -5) (undo-tree-id4759 . -5) (undo-tree-id4761 . -4) (undo-tree-id4763 . -5) (undo-tree-id4765 . -5) (undo-tree-id4767 . -5) (undo-tree-id4768 . -5)) ((458 . 463)) (24169 49994 250999 0) 0 nil]) ((#("u8]" 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t)) . -463) (undo-tree-id4441 . -3) (undo-tree-id4443 . -2) (undo-tree-id4445 . -2) (undo-tree-id4447 . -3) (undo-tree-id4449 . -2) (undo-tree-id4451 . -2) (undo-tree-id4453 . -2) (undo-tree-id4455 . -2) (undo-tree-id4457 . -2) (undo-tree-id4459 . -2) (undo-tree-id4461 . 3) (undo-tree-id4463 . 1) (undo-tree-id4465 . -3) (undo-tree-id4467 . -3) 466 (t 24169 49645 729200 610000)) ((463 . 466)) (24169 49994 335632 0) 0 nil]) ((461 . 462) (t 24169 49637 311758 820000)) ((#("&" 0 1 (fontified t)) . 461)) (24169 49994 419001 0) 0 nil]) ((462 . 464) (461 . 463) (#("[" 0 1 (fontified nil)) . -461) (undo-tree-id4246 . -1) (457 . 462) (t 24169 49625 207605 820000)) ((#(" as [" 0 1 (fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 457) (undo-tree-id5654 . -4) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -4) (undo-tree-id5662 . -4) (undo-tree-id5663 . -4) (undo-tree-id5664 . -4) (undo-tree-id5665 . -4) (undo-tree-id5666 . -4) (undo-tree-id5667 . -4) (undo-tree-id5668 . -4) (461 . 462) (#("[]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 461) (undo-tree-id5669 . -2) (undo-tree-id5670 . -2) (undo-tree-id5671 . -2) (undo-tree-id5672 . -2) (undo-tree-id5673 . -2) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 462)) (24169 49994 527701 0) 0 nil]) ((apply yas--snippet-revive 449 458 #4=#s(yas--snippet nil (#3=#s(yas--field 1 456 456 nil nil nil t nil)) nil 22 nil #3# nil nil))) ((apply yas--take-care-of-redo #4#)) (24169 49994 588279 0) 0 nil]) ((#("i: &'a[u8]" 0 1 (face font-lock-variable-name-face fontified nil) 1 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face (rainbow-delimiters-depth-5-face) fontified nil) 7 9 (face font-lock-type-face fontified nil) 9 10 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 457) (undo-tree-id3903 . -1) (undo-tree-id3905 . -5) (456 . 457)) ((#("i" 0 1 (fontified nil)) . 456) (undo-tree-id5674 . 1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (457 . 467)) (24169 49994 672148 0) 0 nil]) ((apply yas--take-care-of-redo #4#) (449 . 467) (#("be_u16(${1:i: &'a[u8]})" 0 23 (fontified nil)) . 449) (449 . 472) (#("be_u16" 0 6 (fontified nil)) . -449) (449 . 455) (#("be" 0 2 (fontified t)) . -449) (undo-tree-id3906 . -2) (undo-tree-id3908 . -1) (undo-tree-id3910 . -1) (undo-tree-id3912 . -1) (undo-tree-id3914 . -1) (undo-tree-id3916 . -1) (undo-tree-id3918 . -1) (undo-tree-id3920 . -2) (undo-tree-id3922 . -2) (undo-tree-id3924 . -2) (undo-tree-id3926 . -2) 451) ((449 . 451) (#("be_u16" 0 6 (fontified nil)) . 449) (449 . 455) (#("be_u16(${1:i: &'a[u8]})" 0 23 (fontified nil)) . 449) (449 . 472) (#("be_u16(i: &'a[u8])" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face (rainbow-delimiters-depth-5-face) fontified t) 14 16 (face font-lock-type-face fontified t) 16 17 (face (rainbow-delimiters-depth-5-face) fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t)) . 449) (undo-tree-id5694 . -7) (undo-tree-id5695 . -7) (undo-tree-id5696 . -6) (undo-tree-id5697 . -6) (undo-tree-id5698 . -6) (undo-tree-id5699 . -6) (undo-tree-id5700 . -6) (undo-tree-id5701 . -6) (undo-tree-id5702 . -6) (undo-tree-id5703 . -6) (undo-tree-id5704 . -6) (undo-tree-id5705 . -6) (undo-tree-id5706 . -6) (undo-tree-id5707 . -6) (undo-tree-id5708 . -6) (undo-tree-id5709 . -6) (undo-tree-id5710 . -6) (undo-tree-id5711 . -6) (undo-tree-id5712 . -6) (undo-tree-id5713 . -6) (undo-tree-id5714 . -6) (undo-tree-id5715 . -6) (undo-tree-id5716 . -7) (undo-tree-id5717 . -7) (undo-tree-id5718 . -7) (undo-tree-id5719 . -7) (undo-tree-id5720 . -7) (undo-tree-id5721 . -7) (undo-tree-id5722 . -7) (undo-tree-id5723 . -7) (undo-tree-id5724 . -6) (undo-tree-id5725 . -6) (undo-tree-id5726 . -7) (undo-tree-id5727 . -7) (undo-tree-id5728 . -7) (undo-tree-id5729 . -7) (undo-tree-id5730 . -7) (undo-tree-id5731 . -7) (undo-tree-id5732 . -7) (undo-tree-id5733 . -7) (undo-tree-id5734 . -7) (undo-tree-id5735 . -7) (undo-tree-id5736 . -7) (undo-tree-id5737 . -7) (undo-tree-id5738 . -7) (undo-tree-id5739 . -7) (undo-tree-id5740 . -7) (undo-tree-id5741 . -7) (undo-tree-id5742 . -7) (undo-tree-id5743 . -8) (undo-tree-id5744 . -7) (apply yas--snippet-revive 449 467 #4#)) (24169 49994 756961 0) 0 nil]) ((449 . 451)) ((#("be" 0 2 (fontified t)) . 449) (undo-tree-id5745 . -2) (undo-tree-id5746 . -2) (undo-tree-id5747 . -2) (undo-tree-id5748 . -2) (undo-tree-id5749 . -2) (undo-tree-id5750 . -2)) (24169 49995 99118 0) 0 nil]) ((#("be_" 0 3 (fontified t)) . -449) (undo-tree-id3927 . -3) (undo-tree-id3929 . -3) (undo-tree-id3931 . -3) (undo-tree-id3933 . -3) (undo-tree-id3935 . -3) (undo-tree-id3937 . -3) (undo-tree-id3939 . -3) (undo-tree-id3941 . -3) (undo-tree-id3943 . -3) (undo-tree-id3945 . -3) (undo-tree-id3947 . -3) (undo-tree-id3949 . -3) (undo-tree-id3951 . -3) (undo-tree-id3953 . -3) (undo-tree-id3955 . -3) (undo-tree-id3957 . -3) (undo-tree-id3959 . -3) (undo-tree-id3961 . -3) (undo-tree-id3963 . -3) (undo-tree-id3965 . -3) (undo-tree-id3967 . -3) (undo-tree-id3969 . -3) (undo-tree-id3971 . -3) (undo-tree-id3973 . -3) (undo-tree-id3975 . -3) (undo-tree-id3977 . -3) (undo-tree-id3979 . -3) (undo-tree-id3981 . -3) (undo-tree-id3983 . -3) (undo-tree-id3985 . -3) (undo-tree-id3987 . -3) (undo-tree-id3988 . -3) (undo-tree-id3990 . -3) (undo-tree-id3992 . -3) (undo-tree-id3994 . -3) (undo-tree-id3996 . -3) (undo-tree-id3998 . -3) (undo-tree-id4000 . -3) (undo-tree-id4002 . -3) (undo-tree-id4004 . -3) (undo-tree-id4006 . -3) (undo-tree-id4008 . -3) (undo-tree-id4010 . -3) (undo-tree-id4012 . -3) (undo-tree-id4014 . -3) (undo-tree-id4016 . -3) (undo-tree-id4018 . -3) (undo-tree-id4020 . -3) (undo-tree-id4022 . -3) (undo-tree-id4024 . -3) (undo-tree-id4026 . -3) (undo-tree-id4028 . -3) (undo-tree-id4030 . -3) (undo-tree-id4032 . -3) (undo-tree-id4034 . -3) (undo-tree-id4036 . -3) (undo-tree-id4038 . -3) (undo-tree-id4040 . -3) (undo-tree-id4042 . -3) (undo-tree-id4044 . -3) (undo-tree-id4046 . -3) (undo-tree-id4048 . -3) (undo-tree-id4050 . -3) (undo-tree-id4052 . -3) (undo-tree-id4054 . -3) 452) ((449 . 452)) (24169 49995 477655 0) 0 nil]) ((#("u16(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t)) . -452) (undo-tree-id4056 . -4) (undo-tree-id4058 . -4) (undo-tree-id4060 . -4) (undo-tree-id4062 . -4) (undo-tree-id4064 . -4) (undo-tree-id4066 . -4) (undo-tree-id4068 . -4) (undo-tree-id4070 . -4) (undo-tree-id4072 . -4) (undo-tree-id4074 . -4) (undo-tree-id4076 . -4) (undo-tree-id4078 . -4) (undo-tree-id4080 . -4) (undo-tree-id4082 . -4) (undo-tree-id4084 . -4) (undo-tree-id4086 . -4) (undo-tree-id4088 . -4) (undo-tree-id4090 . -4) (undo-tree-id4092 . -4) (undo-tree-id4094 . -4) (undo-tree-id4096 . -4) (undo-tree-id4098 . -4) (undo-tree-id4100 . -4) (undo-tree-id4102 . -3) (undo-tree-id4104 . -3) (undo-tree-id4106 . -2) (undo-tree-id4108 . -1) (undo-tree-id4110 . -1) (undo-tree-id4112 . -1) (undo-tree-id4114 . -1) (undo-tree-id4116 . -1) (undo-tree-id4118 . -4) (undo-tree-id4120 . -2) (undo-tree-id4122 . -2) (undo-tree-id4124 . -3) (undo-tree-id4126 . -4) (undo-tree-id4128 . -4) (undo-tree-id4130 . -4) (undo-tree-id4132 . -4) (undo-tree-id4134 . -4) (undo-tree-id4136 . -4) (undo-tree-id4138 . -4) (undo-tree-id4140 . -4) (undo-tree-id4142 . -4) (undo-tree-id4144 . -4) (undo-tree-id4146 . -4) (undo-tree-id4148 . -3) (undo-tree-id4150 . -4) (undo-tree-id4152 . -4) (undo-tree-id4154 . -4) (undo-tree-id4156 . -4) (undo-tree-id4158 . -4) (undo-tree-id4160 . -4) (undo-tree-id4162 . -4) (undo-tree-id4164 . -4) (undo-tree-id4166 . -4) (undo-tree-id4168 . -4) (undo-tree-id4170 . -4) (undo-tree-id4172 . -4) (undo-tree-id4174 . -4) (undo-tree-id4176 . -4) 456) ((452 . 456)) (24169 49995 980661 0) 0 nil]) ((#("i)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . -456) (undo-tree-id4178 . -2) (undo-tree-id4180 . -2) (undo-tree-id4182 . -2) (undo-tree-id4184 . -2) (undo-tree-id4186 . -2) (undo-tree-id4188 . -2) (undo-tree-id4190 . -2) (undo-tree-id4192 . -2) (undo-tree-id4194 . -2) (undo-tree-id4196 . -2) (undo-tree-id4198 . -2) (undo-tree-id4200 . -2) (undo-tree-id4202 . -1) (undo-tree-id4204 . -1) (undo-tree-id4206 . -1) (undo-tree-id4208 . -1) (undo-tree-id4210 . -1) (undo-tree-id4212 . -1) (undo-tree-id4214 . -2) (undo-tree-id4216 . -1) (undo-tree-id4218 . -1) (undo-tree-id4220 . -1) (undo-tree-id4222 . -1) (undo-tree-id4224 . -2) (undo-tree-id4226 . -1) (undo-tree-id4228 . -1) (undo-tree-id4230 . -1) (undo-tree-id4232 . -1) (undo-tree-id4234 . -1) (undo-tree-id4236 . -1) (undo-tree-id4238 . 2) (undo-tree-id4240 . 1) (undo-tree-id4242 . -2) (undo-tree-id4244 . -2) 458 (t 24169 49605 854047 933000)) ((456 . 458)) (24169 49996 63124 0) 0 nil]) ((apply yas--snippet-revive 449 458 #6=#s(yas--snippet nil (#5=#s(yas--field 1 456 456 nil nil nil t nil)) nil 21 nil #5# nil nil))) ((apply yas--take-care-of-redo #6#)) (24169 49996 146993 0) 0 nil]) ((#("i: &'a[u8]" 0 1 (face font-lock-variable-name-face fontified nil) 1 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face (rainbow-delimiters-depth-5-face) fontified nil) 7 9 (face font-lock-type-face fontified nil) 9 10 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 457) (undo-tree-id3869 . -1) (undo-tree-id3871 . -5) (456 . 457)) ((#("i" 0 1 (fontified nil)) . 456) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (457 . 467)) (24169 49996 231129 0) 0 nil]) ((apply yas--take-care-of-redo #6#) (449 . 467) (#("be_u16(${1:i: &'a[u8]})" 0 23 (fontified nil)) . 449) (449 . 472) (#("be_u16" 0 6 (fontified nil)) . -449) (449 . 455) (#("be" 0 2 (fontified t)) . -449) (undo-tree-id3872 . -2) (undo-tree-id3874 . -1) (undo-tree-id3876 . -1) (undo-tree-id3878 . -2) (undo-tree-id3880 . -2) (undo-tree-id3882 . -2) (undo-tree-id3884 . -2) (undo-tree-id3886 . -2) 451) ((449 . 451) (#("be_u16" 0 6 (fontified nil)) . 449) (449 . 455) (#("be_u16(${1:i: &'a[u8]})" 0 23 (fontified nil)) . 449) (449 . 472) (#("be_u16(i: &'a[u8])" 0 3 (fontified t) 3 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face (rainbow-delimiters-depth-5-face) fontified t) 14 16 (face font-lock-type-face fontified t) 16 17 (face (rainbow-delimiters-depth-5-face) fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t)) . 449) (undo-tree-id5753 . -7) (undo-tree-id5754 . -3) (undo-tree-id5755 . -3) (undo-tree-id5756 . -3) (undo-tree-id5757 . -7) (undo-tree-id5758 . -7) (undo-tree-id5759 . -7) (undo-tree-id5760 . -18) (undo-tree-id5761 . -18) (undo-tree-id5762 . -18) (undo-tree-id5763 . -7) (undo-tree-id5764 . -7) (undo-tree-id5765 . -7) (undo-tree-id5766 . -7) (undo-tree-id5767 . -7) (undo-tree-id5768 . -7) (undo-tree-id5769 . -7) (undo-tree-id5770 . -7) (undo-tree-id5771 . -7) (undo-tree-id5772 . -7) (undo-tree-id5773 . -7) (undo-tree-id5774 . -7) (undo-tree-id5775 . -7) (apply yas--snippet-revive 449 467 #6#)) (24169 49996 334830 0) 0 nil]) ((449 . 451)) ((#("be" 0 2 (fontified t)) . 449) (undo-tree-id5776 . -2) (undo-tree-id5777 . -2) (undo-tree-id5778 . -2) (undo-tree-id5779 . -2)) (24169 49996 399413 0) 0 nil]) ((#("i" 0 1 (fontified t)) . -449) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3891 . -1) (undo-tree-id3893 . -1) (undo-tree-id3895 . -1) (undo-tree-id3897 . -1) (undo-tree-id3899 . -1) (undo-tree-id3901 . -1) 450 (t 24169 49589 375710 890000)) ((449 . 450)) (24169 49996 484424 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -513) (undo-tree-id3763 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3768 . -1) (undo-tree-id3770 . -1) (undo-tree-id3772 . -1) (undo-tree-id3774 . -1) (undo-tree-id3776 . -1) (undo-tree-id3778 . -1) (undo-tree-id3780 . -1) (undo-tree-id3782 . -1) (undo-tree-id3784 . -1) (undo-tree-id3786 . -1) (undo-tree-id3788 . -1) (undo-tree-id3790 . -1) (undo-tree-id3792 . -1) (undo-tree-id3794 . -1) (undo-tree-id3796 . -1) (undo-tree-id3798 . -1) (undo-tree-id3800 . -1) (undo-tree-id3802 . -1) (undo-tree-id3804 . -1) (undo-tree-id3806 . -1) (undo-tree-id3808 . -1) (undo-tree-id3810 . -1) (undo-tree-id3812 . -1) (undo-tree-id3814 . -1) (undo-tree-id3816 . -1) (undo-tree-id3818 . -1) 514) ((513 . 514)) (24169 49996 566481 0) 0 nil]) ((#("	    ();" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (fontified t)) . 514) (undo-tree-id3819 . -8) (undo-tree-id3821 . -5) (undo-tree-id3823 . -5) (undo-tree-id3825 . -5) (undo-tree-id3827 . -5) (undo-tree-id3829 . -5) (undo-tree-id3831 . -5) (undo-tree-id3833 . -5) (undo-tree-id3835 . -5) (undo-tree-id3837 . -5) (undo-tree-id3839 . -5) (undo-tree-id3841 . -5) (undo-tree-id3843 . -5) (undo-tree-id3845 . -5) (undo-tree-id3847 . -5) (undo-tree-id3849 . -6) (undo-tree-id3851 . -6) (undo-tree-id3853 . -8) (undo-tree-id3855 . -8) (undo-tree-id3857 . -8) (undo-tree-id3859 . -8) (undo-tree-id3861 . -8) (undo-tree-id3863 . -8)) ((514 . 522)) (24169 49996 651254 0) 0 nil]) ((521 . 522) (#(")" 0 1 (face #7=(rainbow-delimiters-depth-3-face) fontified nil)) . 521) (520 . 521) (519 . 521) (#("(" 0 1 (fontified nil)) . -519) (undo-tree-id3867 . -1) (519 . 520)) ((#("(" 0 1 (fontified nil)) . 519) (519 . 520) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face #7# fontified nil)) . 519) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 520) (521 . 522) (#(";" 0 1 (fontified t)) . 521)) (24169 49996 734100 0) 0 nil]) ((513 . 519) (t 24169 49566 547929 722000)) ((#("
	    " 0 1 (fontified t) 1 6 (fontified t)) . 513) (undo-tree-id5780 . -6) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -6) (undo-tree-id5795 . -6) (undo-tree-id5796 . -6)) (24169 49998 95273 0) 0 nil]) ((443 . 445) (t 24169 49563 636317 175000)) ((#(":?" 0 2 (face rust-string-interpolation-face fontified t)) . 443)) (24169 49998 270709 0) 0 nil]) ((449 . 450)) ((#(";" 0 1 (fontified t)) . 449) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1)) (24169 49998 454924 0) 0 nil]) ((445 . 447)) ((#(", " 0 2 (fontified t)) . 445) (undo-tree-id5799 . -2) (undo-tree-id5800 . -2) (undo-tree-id5801 . -2) (undo-tree-id5802 . -2) (undo-tree-id5803 . -2) (undo-tree-id5804 . -2) (undo-tree-id5805 . -2) (undo-tree-id5806 . -2) (undo-tree-id5807 . -2) (undo-tree-id5808 . -2) (undo-tree-id5809 . -2) (undo-tree-id5810 . -2) (undo-tree-id5811 . -2) (undo-tree-id5812 . -2) (undo-tree-id5813 . -2) (undo-tree-id5814 . -2) (undo-tree-id5815 . -2) (undo-tree-id5816 . -2) (undo-tree-id5817 . -2) (undo-tree-id5818 . -2) (undo-tree-id5819 . -2) (undo-tree-id5820 . -2) (undo-tree-id5821 . -2) (undo-tree-id5822 . -2) (undo-tree-id5823 . -2) (undo-tree-id5824 . -2) (undo-tree-id5825 . -2) (undo-tree-id5826 . -2) (undo-tree-id5827 . -2) (undo-tree-id5828 . -2) (undo-tree-id5829 . -2) (undo-tree-id5830 . -2) (undo-tree-id5831 . -2) (undo-tree-id5832 . -2) (undo-tree-id5833 . -2) (undo-tree-id5834 . -2) (undo-tree-id5835 . -2) (undo-tree-id5836 . -2) (undo-tree-id5837 . -2) (undo-tree-id5838 . -2) (undo-tree-id5839 . -2) (undo-tree-id5840 . -2) (undo-tree-id5841 . -2) (undo-tree-id5842 . -2) (undo-tree-id5843 . -2) (undo-tree-id5844 . -2) (undo-tree-id5845 . -2) (undo-tree-id5846 . -2) (undo-tree-id5847 . -2) (undo-tree-id5848 . -2) (undo-tree-id5849 . -2) (undo-tree-id5850 . -2) (undo-tree-id5851 . -2) (undo-tree-id5852 . -2) (undo-tree-id5853 . -2) (undo-tree-id5854 . -2) (undo-tree-id5855 . -2) (undo-tree-id5856 . -2) (undo-tree-id5857 . -2) (undo-tree-id5858 . -2) (undo-tree-id5859 . -2) (undo-tree-id5860 . -2) (undo-tree-id5861 . -2) (undo-tree-id5862 . -2) (undo-tree-id5863 . -2) (undo-tree-id5864 . -2) (undo-tree-id5865 . -2) (undo-tree-id5866 . -2) (undo-tree-id5867 . -2) (undo-tree-id5868 . -2) (undo-tree-id5869 . -2) (undo-tree-id5870 . -2) (undo-tree-id5871 . -2) (undo-tree-id5872 . -2) (undo-tree-id5873 . -2) (undo-tree-id5874 . -2) (undo-tree-id5875 . -2) (undo-tree-id5876 . -2) (undo-tree-id5877 . -2) (undo-tree-id5878 . -2) (undo-tree-id5879 . -2) (undo-tree-id5880 . -2) (undo-tree-id5881 . -2) (undo-tree-id5882 . -2) (undo-tree-id5883 . -2)) (24169 49999 205673 0) 0 nil]) ((442 . 444) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -442) (undo-tree-id3738 . -1) (442 . 443)) ((#("{" 0 1 (face font-lock-string-face fontified nil)) . 442) (undo-tree-id5884 . 1) (442 . 443) (#("{}" 0 1 (face rust-string-interpolation-face fontified t) 1 2 (face rust-string-interpolation-face fontified t)) . 442) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -2) (undo-tree-id5893 . -2) (undo-tree-id5894 . -2) (undo-tree-id5895 . 2) (undo-tree-id5896 . -2)) (24169 49999 566126 0) 0 nil]) ((441 . 443) (#("\"" 0 1 (face #8=(rainbow-delimiters-depth-3-face) fontified nil)) . -441) (undo-tree-id3741 . -1) (441 . 442)) ((#("\"" 0 1 (face #8# fontified nil)) . 441) (undo-tree-id5897 . 1) (undo-tree-id5898 . 1) (undo-tree-id5899 . 1) (441 . 442) (#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 441) (undo-tree-id5900 . -1) (undo-tree-id5901 . -2) (undo-tree-id5902 . -2) (undo-tree-id5903 . -2) (undo-tree-id5904 . -2) (undo-tree-id5905 . -2) (undo-tree-id5906 . -2) (undo-tree-id5907 . -2) (undo-tree-id5908 . -2) (undo-tree-id5909 . -2) (undo-tree-id5910 . -2) (undo-tree-id5911 . -2) (undo-tree-id5912 . -2) (undo-tree-id5913 . -2) (undo-tree-id5914 . -2) (undo-tree-id5915 . -2) (undo-tree-id5916 . -2) (undo-tree-id5917 . -2) (undo-tree-id5918 . -2) (undo-tree-id5919 . -2) (undo-tree-id5920 . -2) (undo-tree-id5921 . -2) (undo-tree-id5922 . -2) (undo-tree-id5923 . -2) (undo-tree-id5924 . -2) (undo-tree-id5925 . -2) (undo-tree-id5926 . -2) (undo-tree-id5927 . -2) (undo-tree-id5928 . -2) (undo-tree-id5929 . -2) (undo-tree-id5930 . -2) (undo-tree-id5931 . -2) (undo-tree-id5932 . -2) (undo-tree-id5933 . -2) (undo-tree-id5934 . -2) (undo-tree-id5935 . -2) (undo-tree-id5936 . -2) (undo-tree-id5937 . -2) (undo-tree-id5938 . -2) (undo-tree-id5939 . -2) (undo-tree-id5940 . -2) (undo-tree-id5941 . -2) (undo-tree-id5942 . -2) (undo-tree-id5943 . -2) (undo-tree-id5944 . -2) (undo-tree-id5945 . -2) (undo-tree-id5946 . -2) (undo-tree-id5947 . -2) (undo-tree-id5948 . -2) (undo-tree-id5949 . -2) (undo-tree-id5950 . -2) (undo-tree-id5951 . -2) (undo-tree-id5952 . -2) (undo-tree-id5953 . -2) (undo-tree-id5954 . -2) (undo-tree-id5955 . -2) (undo-tree-id5956 . -2) (undo-tree-id5957 . -2) (undo-tree-id5958 . -2) (undo-tree-id5959 . -2) (undo-tree-id5960 . -2) (undo-tree-id5961 . -2) (undo-tree-id5962 . -2) (undo-tree-id5963 . -2) (undo-tree-id5964 . -2) (undo-tree-id5965 . -2) (undo-tree-id5966 . -2) (undo-tree-id5967 . -2) (undo-tree-id5968 . -2) (undo-tree-id5969 . -2) (undo-tree-id5970 . -2) (undo-tree-id5971 . -2) (undo-tree-id5972 . -2) (undo-tree-id5973 . -2) (undo-tree-id5974 . -2) (undo-tree-id5975 . -2) (undo-tree-id5976 . -2) (undo-tree-id5977 . -2) (undo-tree-id5978 . -2) (undo-tree-id5979 . -2) (undo-tree-id5980 . -2) (undo-tree-id5981 . -2) (undo-tree-id5982 . -2) (undo-tree-id5983 . -2) (undo-tree-id5984 . -2) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -2) (undo-tree-id5994 . -1) (undo-tree-id5995 . -2) (undo-tree-id5996 . -2) (undo-tree-id5997 . -2) (undo-tree-id5998 . -1) (undo-tree-id5999 . -2) (undo-tree-id6000 . -2) (undo-tree-id6001 . -2) (undo-tree-id6002 . -2) (undo-tree-id6003 . -2) (undo-tree-id6004 . -2) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . 2) (undo-tree-id6008 . -1) (undo-tree-id6009 . 1) (undo-tree-id6010 . -1) (undo-tree-id6011 . 1) (undo-tree-id6012 . -2) (undo-tree-id6013 . -1)) (24169 49999 894928 0) 0 nil]) ((#("." 0 1 (fontified t)) . -442) (undo-tree-id3742 . -1) (undo-tree-id3744 . -1) (undo-tree-id3746 . -1) (undo-tree-id3748 . -1) (undo-tree-id3750 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) 443) ((442 . 443)) (24169 50000 103271 0) 0 nil]) ((441 . 443) (440 . 442) (#("(" 0 1 (fontified nil)) . -440) (undo-tree-id3756 . -1) (439 . 441)) ((#("!(" 0 1 (face rust-builtin-formatting-macro-face fontified nil) 1 2 (fontified nil)) . 439) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (440 . 441) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 440) (undo-tree-id6153 . -2) (undo-tree-id6154 . -2) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -2) (undo-tree-id6252 . -2) (undo-tree-id6253 . -1) (undo-tree-id6254 . -2) (undo-tree-id6255 . -1) (undo-tree-id6256 . -2) (undo-tree-id6257 . -1) (undo-tree-id6258 . -2) (undo-tree-id6259 . -1) (undo-tree-id6260 . -2) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -2) (undo-tree-id6267 . -1) (undo-tree-id6268 . -2) (undo-tree-id6269 . -1) (undo-tree-id6270 . -2) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -2) (undo-tree-id6276 . -2) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (#("i." 0 1 (fontified t) 1 2 (fontified t)) . 441) (undo-tree-id6291 . -2) (undo-tree-id6292 . -2) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -2) (undo-tree-id6303 . -2) (undo-tree-id6304 . -2)) (24169 50000 286841 0) 0 nil]) ((#("~" 0 1 (fontified t)) . -439) (undo-tree-id3757 . -1) (undo-tree-id3759 . -1) (undo-tree-id3761 . -1) 440) ((439 . 440)) (24169 50000 488065 0) 0 nil]) ((432 . 440)) ((#("println~" 0 7 (fontified t) 7 8 (fontified t)) . 432) (undo-tree-id6305 . -7) (undo-tree-id6306 . -7) (undo-tree-id6307 . -8) (undo-tree-id6308 . -7) (undo-tree-id6309 . -7) (undo-tree-id6310 . -7) (undo-tree-id6311 . -7) (undo-tree-id6312 . -7) (undo-tree-id6313 . -7) (undo-tree-id6314 . -7) (undo-tree-id6315 . -7) (undo-tree-id6316 . -7) (undo-tree-id6317 . -7) (undo-tree-id6318 . -7) (undo-tree-id6319 . -7) (undo-tree-id6320 . -7) (undo-tree-id6321 . -7) (undo-tree-id6322 . -7) (undo-tree-id6323 . -7) (undo-tree-id6324 . -7) (undo-tree-id6325 . -7) (undo-tree-id6326 . -7) (undo-tree-id6327 . -7) (undo-tree-id6328 . -7) (undo-tree-id6329 . -7) (undo-tree-id6330 . -7) (undo-tree-id6331 . -7) (undo-tree-id6332 . -7) (undo-tree-id6333 . -7) (undo-tree-id6334 . -7) (undo-tree-id6335 . -7) (undo-tree-id6336 . -7) (undo-tree-id6337 . -7) (undo-tree-id6338 . -7) (undo-tree-id6339 . -7) (undo-tree-id6340 . -7) (undo-tree-id6341 . -7) (undo-tree-id6342 . -7) (undo-tree-id6343 . -7) (undo-tree-id6344 . -7) (undo-tree-id6345 . -7) (undo-tree-id6346 . -7) (undo-tree-id6347 . -7) (undo-tree-id6348 . -7) (undo-tree-id6349 . -7) (undo-tree-id6350 . -7) (undo-tree-id6351 . -7) (undo-tree-id6352 . -7) (undo-tree-id6353 . -7) (undo-tree-id6354 . -7) (undo-tree-id6355 . -7) (undo-tree-id6356 . -7) (undo-tree-id6357 . -7) (undo-tree-id6358 . -7) (undo-tree-id6359 . -7) (undo-tree-id6360 . -7) (undo-tree-id6361 . -7) (undo-tree-id6362 . -7) (undo-tree-id6363 . -7) (undo-tree-id6364 . -7) (undo-tree-id6365 . -7) (undo-tree-id6366 . -7) (undo-tree-id6367 . -7) (undo-tree-id6368 . -7) (undo-tree-id6369 . -7) (undo-tree-id6370 . -7) (undo-tree-id6371 . -7) (undo-tree-id6372 . -7) (undo-tree-id6373 . -7) (undo-tree-id6374 . -7) (undo-tree-id6375 . -7) (undo-tree-id6376 . -7) (undo-tree-id6377 . -7) (undo-tree-id6378 . -7) (undo-tree-id6379 . -7) (undo-tree-id6380 . -7) (undo-tree-id6381 . -7) (undo-tree-id6382 . -7) (undo-tree-id6383 . -7) (undo-tree-id6384 . -7) (undo-tree-id6385 . -7) (undo-tree-id6386 . -7) (undo-tree-id6387 . -7) (undo-tree-id6388 . -7) (undo-tree-id6389 . -7) (undo-tree-id6390 . -7) (undo-tree-id6391 . -7) (undo-tree-id6392 . -7) (undo-tree-id6393 . -7) (undo-tree-id6394 . -7) (undo-tree-id6395 . -7) (undo-tree-id6396 . -7) (undo-tree-id6397 . -7) (undo-tree-id6398 . -7) (undo-tree-id6399 . -7) (undo-tree-id6400 . -7) (undo-tree-id6401 . -7) (undo-tree-id6402 . -7) (undo-tree-id6403 . -7) (undo-tree-id6404 . -7) (undo-tree-id6405 . -7) (undo-tree-id6406 . -7) (undo-tree-id6407 . -7) (undo-tree-id6408 . -7) (undo-tree-id6409 . -7) (undo-tree-id6410 . -7) (undo-tree-id6411 . -7) (undo-tree-id6412 . -7) (undo-tree-id6413 . -7) (undo-tree-id6414 . -7) (undo-tree-id6415 . -7) (undo-tree-id6416 . -7) (undo-tree-id6417 . -7) (undo-tree-id6418 . -7) (undo-tree-id6419 . -7) (undo-tree-id6420 . -7) (undo-tree-id6421 . -7) (undo-tree-id6422 . -7) (undo-tree-id6423 . -7) (undo-tree-id6424 . -7) (undo-tree-id6425 . -7) (undo-tree-id6426 . -7) (undo-tree-id6427 . -7) (undo-tree-id6428 . -7) (undo-tree-id6429 . -7) (undo-tree-id6430 . -7) (undo-tree-id6431 . -7) (undo-tree-id6432 . -7) (undo-tree-id6433 . -7) (undo-tree-id6434 . -7) (undo-tree-id6435 . -7) (undo-tree-id6436 . -7) (undo-tree-id6437 . -7) (undo-tree-id6438 . -7) (undo-tree-id6439 . -7) (undo-tree-id6440 . -7) (undo-tree-id6441 . -7) (undo-tree-id6442 . -7) (undo-tree-id6443 . -7) (undo-tree-id6444 . -7) (undo-tree-id6445 . -7) (undo-tree-id6446 . -7) (undo-tree-id6447 . -8) (undo-tree-id6448 . -8) (undo-tree-id6449 . -8) (undo-tree-id6450 . -8) (undo-tree-id6451 . -8)) (24169 50000 726304 0) 0 nil]) ((430 . 432) (t 24169 49496 576965 474000)) ((#("
	" 0 1 (fontified t) 1 2 (fontified t)) . 430) (undo-tree-id6452 . -2) (undo-tree-id6453 . -2) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -2) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -2) (undo-tree-id6552 . -2) (undo-tree-id6553 . -2) (undo-tree-id6554 . -2) (undo-tree-id6555 . -2) (undo-tree-id6556 . -2) (undo-tree-id6557 . -2) (undo-tree-id6558 . -2) (undo-tree-id6559 . -2) (undo-tree-id6560 . -2) (undo-tree-id6561 . -2) (undo-tree-id6562 . -2) (undo-tree-id6563 . -2) (undo-tree-id6564 . -2) (undo-tree-id6565 . -2) (undo-tree-id6566 . -2) (undo-tree-id6567 . -2) (undo-tree-id6568 . -2) (undo-tree-id6569 . -2) (undo-tree-id6570 . -2) (undo-tree-id6571 . -2) (undo-tree-id6572 . -2) (undo-tree-id6573 . -2) (undo-tree-id6574 . -2) (undo-tree-id6575 . -2) (undo-tree-id6576 . -2) (undo-tree-id6577 . -2) (undo-tree-id6578 . -2) (undo-tree-id6579 . -2) (undo-tree-id6580 . -2) (undo-tree-id6581 . -2) (undo-tree-id6582 . -2) (undo-tree-id6583 . -2) (undo-tree-id6584 . -2) (undo-tree-id6585 . -2) (undo-tree-id6586 . -2) (undo-tree-id6587 . -2) (undo-tree-id6588 . -2) (undo-tree-id6589 . -2) (undo-tree-id6590 . -2) (undo-tree-id6591 . -2) (undo-tree-id6592 . -2) (undo-tree-id6593 . -2) (undo-tree-id6594 . -2) (undo-tree-id6595 . -2) (undo-tree-id6596 . -2) (undo-tree-id6597 . -2) (undo-tree-id6598 . -2) (undo-tree-id6599 . -2) (undo-tree-id6600 . -2) (undo-tree-id6601 . -2) (undo-tree-id6602 . -2) (undo-tree-id6603 . -2) (undo-tree-id6604 . -2) (undo-tree-id6605 . -2) (undo-tree-id6606 . -2) (undo-tree-id6607 . -2) (undo-tree-id6608 . -2) (undo-tree-id6609 . -2) (undo-tree-id6610 . -2) (undo-tree-id6611 . -2) (undo-tree-id6612 . -2) (undo-tree-id6613 . -2) (undo-tree-id6614 . -2) (undo-tree-id6615 . -2) (undo-tree-id6616 . -2) (undo-tree-id6617 . -2) (undo-tree-id6618 . -2) (undo-tree-id6619 . -2) (undo-tree-id6620 . -2) (undo-tree-id6621 . -2) (undo-tree-id6622 . -2) (undo-tree-id6623 . -2) (undo-tree-id6624 . -2) (undo-tree-id6625 . -2) (undo-tree-id6626 . -2) (undo-tree-id6627 . -2) (undo-tree-id6628 . -2) (undo-tree-id6629 . -2) (undo-tree-id6630 . -2) (undo-tree-id6631 . -2) (undo-tree-id6632 . -2) (undo-tree-id6633 . -2) (undo-tree-id6634 . -2) (undo-tree-id6635 . -2) (undo-tree-id6636 . -2) (undo-tree-id6637 . -2) (undo-tree-id6638 . -2) (undo-tree-id6639 . -2) (undo-tree-id6640 . -2) (undo-tree-id6641 . -2) (undo-tree-id6642 . -2) (undo-tree-id6643 . -2) (undo-tree-id6644 . -2) (undo-tree-id6645 . -2) (undo-tree-id6646 . -2) (undo-tree-id6647 . -2) (undo-tree-id6648 . -2) (undo-tree-id6649 . -2) (undo-tree-id6650 . -2) (undo-tree-id6651 . -2) (undo-tree-id6652 . -2) (undo-tree-id6653 . -2) (undo-tree-id6654 . -2) (undo-tree-id6655 . -2) (undo-tree-id6656 . -2) (undo-tree-id6657 . -2) (undo-tree-id6658 . -2) (undo-tree-id6659 . -2) (undo-tree-id6660 . -2) (undo-tree-id6661 . -2) (undo-tree-id6662 . -2) (undo-tree-id6663 . -2) (undo-tree-id6664 . -2) (undo-tree-id6665 . -2) (undo-tree-id6666 . -2) (undo-tree-id6667 . -2) (undo-tree-id6668 . -2) (undo-tree-id6669 . -2) (undo-tree-id6670 . -2) (undo-tree-id6671 . -2) (undo-tree-id6672 . -2) (undo-tree-id6673 . -2) (undo-tree-id6674 . -2) (undo-tree-id6675 . -2) (undo-tree-id6676 . -2) (undo-tree-id6677 . -2) (undo-tree-id6678 . -2) (undo-tree-id6679 . -2) (undo-tree-id6680 . -2) (undo-tree-id6681 . -2) (undo-tree-id6682 . -2) (undo-tree-id6683 . -2) (undo-tree-id6684 . -2) (undo-tree-id6685 . -2) (undo-tree-id6686 . -2) (undo-tree-id6687 . -2) (undo-tree-id6688 . -2) (undo-tree-id6689 . -2) (undo-tree-id6690 . -2) (undo-tree-id6691 . -2) (undo-tree-id6692 . -2) (undo-tree-id6693 . -2) (undo-tree-id6694 . -2) (undo-tree-id6695 . -1) (undo-tree-id6696 . -2) (undo-tree-id6697 . -2) (undo-tree-id6698 . -2)) (24169 50000 935012 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1742) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) 1743) nil (24169 50001 151435 0) 0 nil]) ((#("	    println!(\"{:?}\", ether_type);" 0 5 (fontified t) 5 13 (face rust-builtin-formatting-macro-face fontified t) 13 14 (face (rainbow-delimiters-depth-5-face) fontified t) 14 15 (face font-lock-string-face fontified t) 15 16 (face rust-string-interpolation-face fontified t) 16 18 (face rust-string-interpolation-face fontified t) 18 19 (face rust-string-interpolation-face fontified t) 19 20 (face font-lock-string-face fontified t) 20 22 (fontified t) 22 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-5-face) fontified t) 33 34 (fontified t)) . 1743) (undo-tree-id3422 . -34) (undo-tree-id3423 . -34) (undo-tree-id3424 . -32) (undo-tree-id3425 . -32) (undo-tree-id3426 . -32) (undo-tree-id3427 . -32) (undo-tree-id3428 . -32) (undo-tree-id3429 . -32) (undo-tree-id3430 . -32) (undo-tree-id3431 . -32) (undo-tree-id3432 . -32) (undo-tree-id3433 . -32) (undo-tree-id3434 . -32) (undo-tree-id3435 . -32) (undo-tree-id3436 . -32) (undo-tree-id3437 . -32) (undo-tree-id3438 . -32) (undo-tree-id3439 . -32) (undo-tree-id3440 . -32) (undo-tree-id3441 . -32) (undo-tree-id3442 . -32) (undo-tree-id3443 . -32) (undo-tree-id3444 . -32) (undo-tree-id3445 . -32) (undo-tree-id3446 . -32) (undo-tree-id3447 . -32) (undo-tree-id3448 . -32) (undo-tree-id3449 . -32) (undo-tree-id3450 . -32) (undo-tree-id3451 . -32) (undo-tree-id3452 . -32) (undo-tree-id3453 . -32) (undo-tree-id3454 . -32) (undo-tree-id3455 . -32) (undo-tree-id3456 . -32) (undo-tree-id3457 . -32) (undo-tree-id3458 . -32) (undo-tree-id3459 . -32) (undo-tree-id3460 . -32) (undo-tree-id3461 . -32) (undo-tree-id3462 . -32) (undo-tree-id3463 . -32) (undo-tree-id3464 . -32) (undo-tree-id3465 . -32) (undo-tree-id3466 . -32) (undo-tree-id3467 . -32) (undo-tree-id3468 . -32) (undo-tree-id3469 . -32) (undo-tree-id3470 . -32) (undo-tree-id3471 . -32) (undo-tree-id3472 . -32) (undo-tree-id3473 . -32) (undo-tree-id3474 . -32) (undo-tree-id3475 . -32) (undo-tree-id3476 . -32) (undo-tree-id3477 . -32) (undo-tree-id3478 . -32) (undo-tree-id3479 . -32) (undo-tree-id3480 . -32) (undo-tree-id3481 . -32) (undo-tree-id3482 . -32) (undo-tree-id3483 . -32) (undo-tree-id3484 . -32) (undo-tree-id3485 . -32) (undo-tree-id3486 . -32) (undo-tree-id3487 . -32) (undo-tree-id3488 . -32) (undo-tree-id3489 . -32) (undo-tree-id3490 . -32) (undo-tree-id3491 . -32) (undo-tree-id3492 . -32) (undo-tree-id3493 . -32) (undo-tree-id3494 . -32) (undo-tree-id3495 . -32) (undo-tree-id3496 . -32) (undo-tree-id3497 . -32) (undo-tree-id3498 . -32) (undo-tree-id3499 . -32) (undo-tree-id3500 . -32) (undo-tree-id3501 . -32) (undo-tree-id3502 . -34) (undo-tree-id3503 . -34) (undo-tree-id3504 . -34) (undo-tree-id3505 . -34) (undo-tree-id3506 . -34) (undo-tree-id3507 . -34) (undo-tree-id3508 . -34) (undo-tree-id3509 . -34) (undo-tree-id3510 . -34) (undo-tree-id3511 . -34) (undo-tree-id3512 . -34) (undo-tree-id3513 . -34) (undo-tree-id3514 . -34) (undo-tree-id3515 . -34) (undo-tree-id3516 . -34) (undo-tree-id3517 . -34) (undo-tree-id3518 . -34) (undo-tree-id3519 . -34) (undo-tree-id3520 . -34) (undo-tree-id3521 . -34) (undo-tree-id3522 . -34) (undo-tree-id3523 . -34) (undo-tree-id3524 . -34) (undo-tree-id3525 . -34) (undo-tree-id3526 . -34) (undo-tree-id3527 . -34) (undo-tree-id3528 . -34) (undo-tree-id3529 . -34) (undo-tree-id3530 . -34) (undo-tree-id3531 . -34) (undo-tree-id3532 . -34) (undo-tree-id3533 . -34) (undo-tree-id3534 . -34) (undo-tree-id3535 . -34) (undo-tree-id3536 . -34) (undo-tree-id3537 . -34) (undo-tree-id3538 . -34) (undo-tree-id3539 . -34) (undo-tree-id3540 . -34) (undo-tree-id3541 . -34) (undo-tree-id3542 . -34) (undo-tree-id3543 . -34) (undo-tree-id3544 . -34) (undo-tree-id3545 . -34) (undo-tree-id3546 . -34) (undo-tree-id3547 . -34) (undo-tree-id3548 . -34) (undo-tree-id3549 . -34) (undo-tree-id3550 . -34) (undo-tree-id3551 . -34) (undo-tree-id3552 . -34) (undo-tree-id3553 . -34) (undo-tree-id3554 . -34) (undo-tree-id3555 . -34) (undo-tree-id3556 . -34) (undo-tree-id3557 . -34) (undo-tree-id3558 . -34) (undo-tree-id3559 . -34) (undo-tree-id3560 . -34) (undo-tree-id3561 . -34) (undo-tree-id3562 . -34) (undo-tree-id3563 . -34) (undo-tree-id3564 . -34) (undo-tree-id3565 . -34) (undo-tree-id3566 . -34) (undo-tree-id3567 . -34) (undo-tree-id3568 . -34) (undo-tree-id3569 . -34) (undo-tree-id3570 . -34) (undo-tree-id3571 . -34) (undo-tree-id3572 . -34) (undo-tree-id3573 . -34) (undo-tree-id3574 . -34) (undo-tree-id3575 . -34) (undo-tree-id3576 . -34) (undo-tree-id3577 . -34) (undo-tree-id3578 . -34) (undo-tree-id3579 . -34) (undo-tree-id3580 . -34) (undo-tree-id3581 . -34) (undo-tree-id3582 . -34) (undo-tree-id3583 . -34) (undo-tree-id3584 . -34) (undo-tree-id3585 . -34) (undo-tree-id3586 . -34) (undo-tree-id3587 . -34) (undo-tree-id3588 . -34) (undo-tree-id3589 . -34) (undo-tree-id3590 . -34) (undo-tree-id3591 . -34) (undo-tree-id3592 . -34) (undo-tree-id3593 . -34) (undo-tree-id3594 . -34) (undo-tree-id3595 . -34) (undo-tree-id3596 . -34) (undo-tree-id3597 . -34) (undo-tree-id3598 . -34) (undo-tree-id3599 . -34) (undo-tree-id3600 . -34) (undo-tree-id3601 . -34) (undo-tree-id3602 . -34) (undo-tree-id3603 . -34) (undo-tree-id3604 . -34) (undo-tree-id3605 . -34) (undo-tree-id3606 . -34) (undo-tree-id3607 . -34) (undo-tree-id3608 . -34) (undo-tree-id3609 . -34) (undo-tree-id3610 . -34) (undo-tree-id3611 . -34) (undo-tree-id3612 . -34) (undo-tree-id3613 . -34) (undo-tree-id3614 . -34) (undo-tree-id3615 . -34) (undo-tree-id3616 . -34) (undo-tree-id3617 . -34) (undo-tree-id3618 . -34) (undo-tree-id3619 . -34) (undo-tree-id3620 . -34) (undo-tree-id3621 . -34) (undo-tree-id3622 . -34) (undo-tree-id3623 . -34) (undo-tree-id3624 . -34) (undo-tree-id3625 . -34) (undo-tree-id3626 . -34) (undo-tree-id3627 . -34) (undo-tree-id3628 . -34) (undo-tree-id3629 . -34) (undo-tree-id3630 . -34) (undo-tree-id3631 . -34) (undo-tree-id3632 . -34) (undo-tree-id3633 . -34) (undo-tree-id3634 . -34) (undo-tree-id3635 . -34) (undo-tree-id3636 . -34) (undo-tree-id3637 . -34) (undo-tree-id3638 . -34) (undo-tree-id3639 . -34) (undo-tree-id3640 . -34) (undo-tree-id3641 . -34) (undo-tree-id3642 . -34) (undo-tree-id3643 . -34) (undo-tree-id3644 . -34) (undo-tree-id3645 . -34) (undo-tree-id3646 . -34) (undo-tree-id3647 . -34) (undo-tree-id3648 . -34) (undo-tree-id3649 . -34) (undo-tree-id3650 . -34) (undo-tree-id3651 . -34) (undo-tree-id3652 . -34) (undo-tree-id3653 . -34) (undo-tree-id3654 . -34) (undo-tree-id3655 . -34) (undo-tree-id3656 . -34) (undo-tree-id3657 . -34) (undo-tree-id3658 . -34) (undo-tree-id3659 . -34) (undo-tree-id3660 . -34) (undo-tree-id3661 . -34) (undo-tree-id3662 . -34) (undo-tree-id3663 . -34) (undo-tree-id3664 . -34) (undo-tree-id3665 . -34) (undo-tree-id3666 . -34) (undo-tree-id3667 . -34) (undo-tree-id3668 . -34) (undo-tree-id3669 . -34) (undo-tree-id3670 . -34) (undo-tree-id3671 . -34) (undo-tree-id3672 . -34) (undo-tree-id3673 . -34) (undo-tree-id3674 . -34) (undo-tree-id3675 . -34) (undo-tree-id3676 . -34) (undo-tree-id3677 . -34) (undo-tree-id3678 . -34) (undo-tree-id3679 . -34) (undo-tree-id3680 . -34) (undo-tree-id3681 . -34) (undo-tree-id3682 . -34) (undo-tree-id3683 . -34) (undo-tree-id3684 . -34) (undo-tree-id3685 . -34) (undo-tree-id3686 . -34) (undo-tree-id3687 . -34) (undo-tree-id3688 . -34) (undo-tree-id3689 . -34) (undo-tree-id3690 . -34) (undo-tree-id3691 . -34) (undo-tree-id3692 . -34) (undo-tree-id3693 . -34) (undo-tree-id3694 . -34) (undo-tree-id3695 . -34) (undo-tree-id3696 . -34) (undo-tree-id3697 . -34) (undo-tree-id3698 . -34) (undo-tree-id3699 . -34) (undo-tree-id3700 . -34) (undo-tree-id3701 . -34) (undo-tree-id3702 . -34) (undo-tree-id3703 . -34) (undo-tree-id3704 . -34) (undo-tree-id3705 . -34) (undo-tree-id3706 . -34) (undo-tree-id3707 . -34) (undo-tree-id3708 . -34) (undo-tree-id3709 . -34) (undo-tree-id3710 . -34) (undo-tree-id3711 . -34) (undo-tree-id3712 . -34) (undo-tree-id3713 . -34) (undo-tree-id3714 . -34) (undo-tree-id3715 . -34) (undo-tree-id3716 . -34) (undo-tree-id3717 . -34) (undo-tree-id3718 . -34) (undo-tree-id3719 . -34) (undo-tree-id3720 . -34) (undo-tree-id3721 . -34) (undo-tree-id3722 . -34) (undo-tree-id3723 . -34) (undo-tree-id3724 . -34) (undo-tree-id3725 . -34) (undo-tree-id3726 . -34) (undo-tree-id3727 . -34) (undo-tree-id3728 . -34) (undo-tree-id3729 . -34) (undo-tree-id3730 . -34) (undo-tree-id3731 . -34) (undo-tree-id3732 . -34) (undo-tree-id3733 . -34) (undo-tree-id3734 . -34) (undo-tree-id3735 . -34) (undo-tree-id3736 . -34) (t 24169 49416 186400 626000)) nil (24169 49496 552846 0) 0 nil]) ((#("." 0 1 (fontified t)) . -1775) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) 1776) nil (24169 49416 171629 0) 0 nil]) ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-6-face) fontified t) 7 8 (face (rainbow-delimiters-depth-6-face) fontified t)) . -1776) (undo-tree-id3044 . -8) (undo-tree-id3045 . -6) (undo-tree-id3046 . -6) (undo-tree-id3047 . -6) (undo-tree-id3048 . -6) (undo-tree-id3049 . -6) (undo-tree-id3050 . -6) (undo-tree-id3051 . -7) (undo-tree-id3052 . -7) (undo-tree-id3053 . -7) (undo-tree-id3054 . -8) (undo-tree-id3055 . -8) (undo-tree-id3056 . -7) (undo-tree-id3057 . -8) (undo-tree-id3058 . -7) (undo-tree-id3059 . -8) (undo-tree-id3060 . -7) (undo-tree-id3061 . -8) (undo-tree-id3062 . -7) (undo-tree-id3063 . -8) (undo-tree-id3064 . -7) (undo-tree-id3065 . -8) (undo-tree-id3066 . -7) (undo-tree-id3067 . -8) (undo-tree-id3068 . -6) (undo-tree-id3069 . -7) (undo-tree-id3070 . 2) (undo-tree-id3071 . -7) (undo-tree-id3072 . 1) (undo-tree-id3073 . -7) (undo-tree-id3074 . 1) (undo-tree-id3075 . -8) (undo-tree-id3076 . -8) (undo-tree-id3077 . -8) (undo-tree-id3078 . -8) 1784 (t 24169 49376 179968 254000)) nil (24169 49416 171681 0) 0 nil]) ((1784 . 1786)) nil (24169 49376 157067 0) 0 nil]) ((#(";" 0 1 (fontified t)) . -1784) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) 1785 (t 24169 49359 449661 408000)) nil (24169 49376 157090 0) 0 nil]) ((#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil)) . 1784) (undo-tree-id2799 . -1) (1783 . 1784) (1782 . 1784) (#("(" 0 1 (fontified nil)) . -1782) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (1782 . 1783)) nil (24169 49359 426736 0) 0 nil]) ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1782) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) 1783) nil (24169 49359 426867 0) 0 nil]) ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 1783) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (1782 . 1783) (#(" " 0 1 (fontified nil)) . -1782) (1782 . 1783) (#(")" 0 1 (fontified nil)) . -1782) (1775 . 1783) (t 24169 49333 658885 418000)) nil (24169 49359 426982 0) 0 nil]) ((1759 . 1761) (t 24169 49324 590344 971000)) ((#(":?" 0 2 (face rust-string-interpolation-face fontified t)) . 1759) (t 24169 49246 546617 107000)) (24169 49331 554994 0) 0 nil]) ((1774 . 1775)) ((#(";" 0 1 (fontified t)) . 1774)) (24169 49323 469403 0) 0 nil]) ((1763 . 1773) (#("ether_type" 0 10 (fontified nil)) . 1763) (1763 . 1773) (#("ether_type" 0 10 (fontified nil)) . 1763) (1763 . 1773) (#("eth" 0 3 (fontified t)) . 1763)) ((1763 . 1766) (#("ether_type" 0 10 (fontified nil)) . 1763) (1763 . 1773) (#("ether_type" 0 10 (fontified nil)) . 1763) (1763 . 1773) (#("ether_type" 0 10 (fontified t)) . 1763) (undo-tree-id2460 . -10) (undo-tree-id2462 . -10) (undo-tree-id2464 . -10) (undo-tree-id2466 . -10)) (24169 49322 540989 0) 0 nil]) ((1761 . 1766)) ((#(", eth" 0 2 (fontified t) 2 5 (fontified t)) . 1761) (undo-tree-id2467 . -5) (undo-tree-id2469 . -2) (undo-tree-id2471 . -2) (undo-tree-id2473 . -2) (undo-tree-id2475 . -5) (undo-tree-id2477 . -5)) (24169 49321 876789 0) 0 nil]) ((#("}" 0 1 (face rust-string-interpolation-face fontified nil)) . 1760) (1759 . 1760) (1758 . 1760) (#("{" 0 1 (face font-lock-string-face fontified nil)) . 1758) (1758 . 1759) (1757 . 1759) (#("\"" 0 1 (face #9=(rainbow-delimiters-depth-5-face) fontified nil)) . 1757) (1757 . 1758) (1756 . 1758) (#("(" 0 1 (fontified nil)) . 1756) (1756 . 1757)) ((#("(" 0 1 (fontified nil)) . 1756) (undo-tree-id2480 . 1) (1756 . 1757) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 1756) (undo-tree-id2482 . -1) (undo-tree-id2484 . -1) (undo-tree-id2486 . -1) (undo-tree-id2488 . -1) (undo-tree-id2490 . -1) (undo-tree-id2492 . -1) (undo-tree-id2494 . -1) (undo-tree-id2496 . -1) (undo-tree-id2498 . -1) (undo-tree-id2500 . -1) (undo-tree-id2502 . -1) (undo-tree-id2504 . -1) (undo-tree-id2506 . -1) (undo-tree-id2508 . -1) (undo-tree-id2510 . -1) (undo-tree-id2512 . -2) (undo-tree-id2514 . -1) (undo-tree-id2516 . -1) (undo-tree-id2518 . -1) (undo-tree-id2520 . -1) (undo-tree-id2522 . -1) (undo-tree-id2524 . -1) (undo-tree-id2526 . -1) (undo-tree-id2528 . -1) (undo-tree-id2530 . -1) (undo-tree-id2532 . -1) (undo-tree-id2534 . -2) (undo-tree-id2536 . -1) (undo-tree-id2538 . -1) (undo-tree-id2540 . -1) (undo-tree-id2542 . 1) (undo-tree-id2544 . 1) (undo-tree-id2546 . 1) (undo-tree-id2548 . -1) (#("\"" 0 1 (face #9# fontified nil)) . 1757) (undo-tree-id2550 . 1) (1757 . 1758) (#("\"\"" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil)) . 1757) (undo-tree-id2552 . -2) (undo-tree-id2554 . -1) (undo-tree-id2556 . -1) (undo-tree-id2558 . -1) (undo-tree-id2560 . -1) (undo-tree-id2562 . -1) (undo-tree-id2564 . -1) (undo-tree-id2566 . -1) (undo-tree-id2568 . -1) (undo-tree-id2570 . -1) (undo-tree-id2572 . -1) (undo-tree-id2574 . -1) (undo-tree-id2576 . -1) (undo-tree-id2578 . -1) (undo-tree-id2580 . -1) (undo-tree-id2582 . -2) (undo-tree-id2584 . -2) (undo-tree-id2586 . -1) (undo-tree-id2588 . -1) (undo-tree-id2590 . -2) (undo-tree-id2592 . -2) (undo-tree-id2594 . -2) (undo-tree-id2596 . -2) (undo-tree-id2598 . -2) (undo-tree-id2600 . -2) (undo-tree-id2602 . -1) (undo-tree-id2604 . -1) (undo-tree-id2606 . -2) (#("{" 0 1 (face font-lock-string-face fontified nil)) . 1758) (1758 . 1759) (#("{}" 0 1 (face rust-string-interpolation-face fontified nil) 1 2 (face rust-string-interpolation-face fontified nil)) . 1758) (undo-tree-id2610 . -1) (undo-tree-id2612 . -1) (undo-tree-id2614 . -1) (undo-tree-id2616 . -1) (undo-tree-id2618 . -1) (undo-tree-id2620 . -1) (undo-tree-id2622 . -1) (undo-tree-id2624 . -1) (undo-tree-id2626 . -1) (undo-tree-id2628 . -1) (undo-tree-id2630 . -1) (undo-tree-id2632 . -1) (undo-tree-id2634 . -1) (undo-tree-id2636 . -1) (undo-tree-id2638 . -1) (undo-tree-id2640 . -1) (undo-tree-id2642 . -1) (#("}" 0 1 (face rust-string-interpolation-face fontified nil)) . 1759) (undo-tree-id2644 . -1) (undo-tree-id2646 . -1) (1760 . 1761)) (24169 49321 285489 0) 0 nil]) ((1748 . 1756) (#("println!" 0 8 (fontified nil)) . 1748) (1748 . 1756) (#("println!" 0 8 (fontified nil)) . 1748) (1748 . 1756) (#("pri" 0 3 (fontified t)) . 1748)) ((1748 . 1751) (#("println!" 0 8 (fontified nil)) . 1748) (1748 . 1756) (#("println!" 0 8 (fontified nil)) . 1748) (1748 . 1756) (#("println!" 0 8 (fontified t)) . 1748) (undo-tree-id2647 . -8) (undo-tree-id2649 . -8) (undo-tree-id2651 . -8) (undo-tree-id2653 . -8) (undo-tree-id2655 . -8) (undo-tree-id2657 . -8) (undo-tree-id2659 . -8) (undo-tree-id2661 . -8) (undo-tree-id2663 . -8) (undo-tree-id2665 . -8) (undo-tree-id2667 . -8) (undo-tree-id2669 . -8) (undo-tree-id2671 . -8) (undo-tree-id2673 . -8) (undo-tree-id2675 . -8) (undo-tree-id2677 . -8) (undo-tree-id2679 . -8) (undo-tree-id2681 . -8) (undo-tree-id2683 . -8) (undo-tree-id2685 . -8) (undo-tree-id2687 . -8) (undo-tree-id2689 . -8) (undo-tree-id2691 . -8) (undo-tree-id2693 . -8) (undo-tree-id2695 . -8) (undo-tree-id2697 . -8) (undo-tree-id2699 . -8) (undo-tree-id2701 . -8) (undo-tree-id2703 . -8) (undo-tree-id2705 . -8) (undo-tree-id2707 . -8) (undo-tree-id2709 . -8) (undo-tree-id2711 . -8)) (24169 49320 821024 0) 0 nil]) ((1748 . 1751)) ((#("pri" 0 3 (fontified t)) . 1748) (undo-tree-id2712 . -3) (undo-tree-id2713 . -3) (undo-tree-id2714 . -3) (undo-tree-id2715 . -3) (undo-tree-id2716 . -3) (undo-tree-id2717 . -3)) (24169 49320 372546 0) 0 nil]) ((1742 . 1748) (t 24169 49310 266713 485000)) ((#("
	    " 0 1 (fontified t) 1 6 (fontified t)) . 1742) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -6) (undo-tree-id2721 . -6) (undo-tree-id2722 . -6) (undo-tree-id2723 . -6) (undo-tree-id2724 . -6) (undo-tree-id2725 . -6) (undo-tree-id2726 . -6) (undo-tree-id2727 . -6) (undo-tree-id2728 . -6) (undo-tree-id2729 . -6) (undo-tree-id2730 . -6) (undo-tree-id2731 . -6) (undo-tree-id2732 . -6) (undo-tree-id2733 . -6) (undo-tree-id2734 . -6) (undo-tree-id2735 . -6) (undo-tree-id2736 . -6) (undo-tree-id2737 . -6) (undo-tree-id2738 . -6) (undo-tree-id2739 . -6) (undo-tree-id2740 . -6) (undo-tree-id2741 . -1) (undo-tree-id2742 . -6) (undo-tree-id2743 . -6) (undo-tree-id2744 . -6) (undo-tree-id2745 . -6) (undo-tree-id2746 . -6) (undo-tree-id2747 . -6) (undo-tree-id2748 . -6) (undo-tree-id2749 . -6) (undo-tree-id2750 . -6) (undo-tree-id2751 . -6) (undo-tree-id2752 . -6) (undo-tree-id2753 . -6) (undo-tree-id2754 . -6) (undo-tree-id2755 . -6) (undo-tree-id2756 . -6) (undo-tree-id2757 . -6) (undo-tree-id2758 . -6) (undo-tree-id2759 . -6) (undo-tree-id2760 . -6) (undo-tree-id2761 . -6) (undo-tree-id2762 . -6) (undo-tree-id2763 . -6) (undo-tree-id2764 . -6) (undo-tree-id2765 . -6) (undo-tree-id2766 . -6) (undo-tree-id2767 . -6) (undo-tree-id2768 . -6) (undo-tree-id2769 . -6) (undo-tree-id2770 . -6) (undo-tree-id2771 . -6) (undo-tree-id2772 . -6) (undo-tree-id2773 . -6) (undo-tree-id2774 . -6) (undo-tree-id2775 . -6) (undo-tree-id2776 . -6) (undo-tree-id2777 . -6) (undo-tree-id2778 . -6) (undo-tree-id2779 . -6) (undo-tree-id2780 . -6) (undo-tree-id2781 . -6) (undo-tree-id2782 . -6) (undo-tree-id2783 . -6) (undo-tree-id2784 . -6) (undo-tree-id2785 . -6) (undo-tree-id2786 . -6) (undo-tree-id2787 . -6) (undo-tree-id2788 . -6) (undo-tree-id2789 . -6) (undo-tree-id2790 . -6) (undo-tree-id2791 . -1) (undo-tree-id2792 . -6) (undo-tree-id2793 . -6) (undo-tree-id2794 . -6) (undo-tree-id2795 . -6) (undo-tree-id2796 . -6)) (24169 49319 686387 0) 0 nil] [nil ([nil ([nil ([nil nil ((1721 . 1723)) ((#("i;" 0 2 (fontified t)) . 1721) (undo-tree-id2367 . -2) (undo-tree-id2368 . -2) (undo-tree-id2369 . -2) (undo-tree-id2370 . -2) (undo-tree-id2371 . -2) (undo-tree-id2372 . -2) (undo-tree-id2373 . -2) (undo-tree-id2374 . -2) (undo-tree-id2375 . -2) (undo-tree-id2376 . -2) (undo-tree-id2377 . -2) (undo-tree-id2378 . -2) (undo-tree-id2379 . -2) (undo-tree-id2380 . -2) (undo-tree-id2381 . -2) (undo-tree-id2382 . -2) (undo-tree-id2383 . -2) (undo-tree-id2384 . -2) (undo-tree-id2385 . -2) (undo-tree-id2386 . -2) (undo-tree-id2387 . -2) (undo-tree-id2388 . -2) (undo-tree-id2389 . -2) (undo-tree-id2390 . -2) (undo-tree-id2391 . -2) (t 24169 49188 929587 759000)) (24169 49188 915691 0) 0 nil]) ((#("EtherType::" 0 9 (face font-lock-type-face fontified t) 9 11 (fontified t)) . -1721) (undo-tree-id2147 . -7) (undo-tree-id2148 . -11) (undo-tree-id2149 . -11) (undo-tree-id2150 . -11) (undo-tree-id2151 . -11) (undo-tree-id2152 . -11) (undo-tree-id2153 . -11) (undo-tree-id2154 . -11) (undo-tree-id2155 . -11) (undo-tree-id2156 . -11) (undo-tree-id2157 . -11) (undo-tree-id2158 . -11) (undo-tree-id2159 . -11) (undo-tree-id2160 . -11) (undo-tree-id2161 . -11) (undo-tree-id2162 . -11) (undo-tree-id2163 . -11) (undo-tree-id2164 . -11) (undo-tree-id2165 . -11) (undo-tree-id2166 . -11) (undo-tree-id2167 . -11) (undo-tree-id2168 . -11) (undo-tree-id2169 . -11) (undo-tree-id2170 . -11) (undo-tree-id2171 . -11) (undo-tree-id2172 . -11) (undo-tree-id2173 . -11) (undo-tree-id2174 . -11) (undo-tree-id2175 . -11) (undo-tree-id2176 . -11) (undo-tree-id2177 . -11) (undo-tree-id2178 . -11) (undo-tree-id2179 . -11) (undo-tree-id2180 . -11) (undo-tree-id2181 . -11) (undo-tree-id2182 . -11) (undo-tree-id2183 . -11) (undo-tree-id2184 . -11) (undo-tree-id2185 . -11) (undo-tree-id2186 . -11) (undo-tree-id2187 . -11) (undo-tree-id2188 . -11) (undo-tree-id2189 . -11) (undo-tree-id2190 . -11) (undo-tree-id2191 . -11) (undo-tree-id2192 . -11) (undo-tree-id2193 . -11) (undo-tree-id2194 . -11) (undo-tree-id2195 . -11) (undo-tree-id2196 . -11) (undo-tree-id2197 . -11) (undo-tree-id2198 . -11) (undo-tree-id2199 . -11) (undo-tree-id2200 . -11) (undo-tree-id2201 . -11) (undo-tree-id2202 . -11) (undo-tree-id2203 . -11) (undo-tree-id2204 . -11) (undo-tree-id2205 . -11) (undo-tree-id2206 . -11) (undo-tree-id2207 . -11) (undo-tree-id2208 . -11) (undo-tree-id2209 . -11) (undo-tree-id2210 . -11) (undo-tree-id2211 . -11) (undo-tree-id2212 . -11) (undo-tree-id2213 . -11) (undo-tree-id2214 . -11) (undo-tree-id2215 . -11) (undo-tree-id2216 . -11) (undo-tree-id2217 . -11) (undo-tree-id2218 . -11) (undo-tree-id2219 . -11) (undo-tree-id2220 . -11) (undo-tree-id2221 . -11) (undo-tree-id2222 . -11) (undo-tree-id2223 . -11) (undo-tree-id2224 . -11) (undo-tree-id2225 . -11) (undo-tree-id2226 . -11) (undo-tree-id2227 . -11) (undo-tree-id2228 . -11) (undo-tree-id2229 . -11) (undo-tree-id2230 . -11) (undo-tree-id2231 . -11) (undo-tree-id2232 . -11) (undo-tree-id2233 . -11) (undo-tree-id2234 . -11) (undo-tree-id2235 . -11) (undo-tree-id2236 . -11) (undo-tree-id2237 . -11) (undo-tree-id2238 . -11) (undo-tree-id2239 . -11) (undo-tree-id2240 . -11) (undo-tree-id2241 . -11) (undo-tree-id2242 . -11) (undo-tree-id2243 . -11) 1732) ((1721 . 1732)) (24169 49200 196659 0) 0 nil]) ((#("parse(" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1732) (undo-tree-id2244 . -3) (undo-tree-id2245 . -6) (undo-tree-id2246 . -6) (undo-tree-id2247 . -6) (undo-tree-id2248 . -6) (undo-tree-id2249 . -6) (undo-tree-id2250 . -6) (undo-tree-id2251 . -6) (undo-tree-id2252 . -6) (undo-tree-id2253 . -6) (undo-tree-id2254 . -6) (undo-tree-id2255 . -6) (undo-tree-id2256 . -6) (undo-tree-id2257 . -6) (undo-tree-id2258 . -6) (undo-tree-id2259 . -6) (undo-tree-id2260 . -6) (undo-tree-id2261 . -6) (undo-tree-id2262 . -6) (undo-tree-id2263 . -6) (undo-tree-id2264 . -6) (undo-tree-id2265 . -6) (undo-tree-id2266 . -5) (undo-tree-id2267 . -6) (undo-tree-id2268 . -6) (undo-tree-id2269 . -6) (undo-tree-id2270 . -6) (undo-tree-id2271 . -6) (undo-tree-id2272 . -6) (undo-tree-id2273 . -6) (undo-tree-id2274 . -6) (undo-tree-id2275 . -6) (undo-tree-id2276 . -5) (undo-tree-id2277 . -5) (undo-tree-id2278 . -5) (undo-tree-id2279 . -4) (undo-tree-id2280 . -4) (undo-tree-id2281 . -4) (undo-tree-id2282 . -3) (undo-tree-id2283 . -3) (undo-tree-id2284 . -3) (undo-tree-id2285 . -3) (undo-tree-id2286 . -3) (undo-tree-id2287 . -3) (undo-tree-id2288 . -3) (undo-tree-id2289 . -3) (undo-tree-id2290 . -3) (undo-tree-id2291 . -3) (undo-tree-id2292 . -3) (undo-tree-id2293 . -3) (undo-tree-id2294 . -3) (undo-tree-id2295 . -3) (undo-tree-id2296 . -3) (undo-tree-id2297 . -3) (undo-tree-id2298 . -3) (undo-tree-id2299 . -3) (undo-tree-id2300 . -3) (undo-tree-id2301 . -3) (undo-tree-id2302 . -3) (undo-tree-id2303 . -3) (undo-tree-id2304 . -3) (undo-tree-id2305 . -3) (undo-tree-id2306 . -3) (undo-tree-id2307 . -3) (undo-tree-id2308 . -3) (undo-tree-id2309 . -3) (undo-tree-id2310 . -3) (undo-tree-id2311 . -3) (undo-tree-id2312 . -6) (undo-tree-id2313 . -6) (undo-tree-id2314 . -6) (undo-tree-id2315 . -6) (undo-tree-id2316 . -6) (undo-tree-id2317 . -6) (undo-tree-id2318 . -6) (undo-tree-id2319 . -6) (undo-tree-id2320 . -6) (undo-tree-id2321 . -6) (undo-tree-id2322 . -6) (undo-tree-id2323 . -6) (undo-tree-id2324 . -6) (undo-tree-id2325 . -6) (undo-tree-id2326 . -6) (undo-tree-id2327 . -6) (undo-tree-id2328 . -6) (undo-tree-id2329 . -6) (undo-tree-id2330 . -6) (undo-tree-id2331 . -6) (undo-tree-id2332 . -6) (undo-tree-id2333 . -6) (undo-tree-id2334 . -6) (undo-tree-id2335 . -6) (undo-tree-id2336 . -6) 1738) ((1732 . 1738)) (24169 49200 698971 0) 0 nil]) ((#("i)?;" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t) 2 3 (face rust-question-mark-face fontified t) 3 4 (fontified t)) . -1738) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -3) (undo-tree-id2342 . -3) (undo-tree-id2343 . -3) (undo-tree-id2344 . -2) (undo-tree-id2345 . -2) (undo-tree-id2346 . -1) (undo-tree-id2347 . -2) (undo-tree-id2348 . -1) (undo-tree-id2349 . -2) (undo-tree-id2350 . -1) (undo-tree-id2351 . -2) (undo-tree-id2352 . -1) (undo-tree-id2353 . -2) (undo-tree-id2354 . -1) (undo-tree-id2355 . -2) (undo-tree-id2356 . -1) (undo-tree-id2357 . -2) (undo-tree-id2358 . -2) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -4) (undo-tree-id2365 . -4) (undo-tree-id2366 . -4) 1742 (t 24169 48712 903920 277000)) ((1738 . 1742)) (24169 49201 732195 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1050) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1)) ((1050 . 1051)) (24169 49309 424382 0) 0 nil]) ((#("        // note: this will panic if the slice is too small!" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 15 (face font-lock-comment-face fontified t) 15 45 (face font-lock-comment-face fontified t) 45 59 (face font-lock-comment-face fontified t)) . 1050)) ((1050 . 1109)) (24169 49308 961153 0) 0 nil]) ((1396 . 1397)) nil (24169 49307 920344 0) 0 nil]) ((1391 . 1395)) nil (24169 48695 527298 0) 0 nil]) ((#("k" 0 1 (face font-lock-type-face fontified t)) . -1391) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) 1392) nil (24169 48695 527338 0) 0 nil]) ((1389 . 1392)) nil (24169 48695 527343 0) 0 nil]) ((1381 . 1389) (1380 . 1382) (#("(" 0 1 (face font-lock-type-face fontified nil)) . -1380) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (1376 . 1381)) nil (24169 48695 527351 0) 0 nil]) ((1371 . 1376) (t 24169 48684 280624 938000)) nil (24169 48695 527354 0) 0 nil]) ((1986 . 1988)) nil (24169 48684 267812 0) 0 nil]) ((1984 . 1985) (1983 . 1985) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil)) . -1983) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (1983 . 1984)) nil (24169 48684 267828 0) 0 nil]) ((1975 . 1982)) nil (24169 48684 267831 0) 0 nil]) ((1954 . 1975)) nil (24169 48684 267832 0) 0 nil]) ((#("p" 0 1 (fontified t)) . -1954) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) 1955) nil (24169 48684 267841 0) 0 nil]) ((1954 . 1955)) nil (24169 48684 267843 0) 0 nil]) ((1946 . 1954)) nil (24169 48684 267844 0) 0 nil]) ((#("Packet:" 0 6 (face font-lock-variable-name-face fontified t) 6 7 (fontified t)) . -1946) (undo-tree-id2059 . -7) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -2) (undo-tree-id2064 . -2) (undo-tree-id2065 . -2) (undo-tree-id2066 . -3) (undo-tree-id2067 . -3) (undo-tree-id2068 . -3) (undo-tree-id2069 . -4) (undo-tree-id2070 . -4) (undo-tree-id2071 . -4) (undo-tree-id2072 . -5) (undo-tree-id2073 . -5) (undo-tree-id2074 . -5) (undo-tree-id2075 . -5) (undo-tree-id2076 . -5) (undo-tree-id2077 . -6) (undo-tree-id2078 . -6) (undo-tree-id2079 . -6) (undo-tree-id2080 . -6) (undo-tree-id2081 . -6) (undo-tree-id2082 . -7) (undo-tree-id2083 . -7) (undo-tree-id2084 . -7) (undo-tree-id2085 . -7) (undo-tree-id2086 . -7) (undo-tree-id2087 . -6) (undo-tree-id2088 . -7) (undo-tree-id2089 . -7) (undo-tree-id2090 . -7) (undo-tree-id2091 . -7) (undo-tree-id2092 . -7) (undo-tree-id2093 . -7) 1953) nil (24169 48684 267889 0) 0 nil]) ((1946 . 1953)) nil (24169 48684 267891 0) 0 nil]) ((#("pakcet:" 0 6 (face font-lock-variable-name-face fontified t) 6 7 (fontified t)) . -1946) (undo-tree-id2094 . -7) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -2) (undo-tree-id2099 . -2) (undo-tree-id2100 . -2) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -3) (undo-tree-id2104 . -3) (undo-tree-id2105 . -3) (undo-tree-id2106 . -4) (undo-tree-id2107 . -4) (undo-tree-id2108 . -4) (undo-tree-id2109 . -5) (undo-tree-id2110 . -5) (undo-tree-id2111 . -5) (undo-tree-id2112 . -6) (undo-tree-id2113 . -6) (undo-tree-id2114 . -6) (undo-tree-id2115 . -6) (undo-tree-id2116 . -6) (undo-tree-id2117 . -6) (undo-tree-id2118 . -6) (undo-tree-id2119 . -7) (undo-tree-id2120 . -7) (undo-tree-id2121 . -7) (undo-tree-id2122 . -7) (undo-tree-id2123 . -7) 1953) nil (24169 48684 267929 0) 0 nil]) ((1946 . 1953) (1945 . 1947) (#("(" 0 1 (fontified nil)) . -1945) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (1938 . 1946) (t 24169 48662 298175 96000)) nil (24169 48684 267934 0) 0 nil]) ((1933 . 1937)) nil (24169 48662 276470 0) 0 nil]) ((#("Wifi" 0 4 (face font-lock-type-face fontified t)) . -1933) (undo-tree-id2001 . -4) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -2) (undo-tree-id2008 . -2) (undo-tree-id2009 . -2) (undo-tree-id2010 . -3) (undo-tree-id2011 . -3) (undo-tree-id2012 . -3) (undo-tree-id2013 . -3) (undo-tree-id2014 . -3) (undo-tree-id2015 . -4) (undo-tree-id2016 . -4) (undo-tree-id2017 . -4) (undo-tree-id2018 . -4) (undo-tree-id2019 . -4) (undo-tree-id2020 . -4) (undo-tree-id2021 . -4) (undo-tree-id2022 . -3) (undo-tree-id2023 . -3) (undo-tree-id2024 . -3) (undo-tree-id2025 . -3) (undo-tree-id2026 . -3) (undo-tree-id2027 . -3) (undo-tree-id2028 . -3) (undo-tree-id2029 . -3) (undo-tree-id2030 . -3) (undo-tree-id2031 . -3) (undo-tree-id2032 . -4) (undo-tree-id2033 . -4) (undo-tree-id2034 . -4) (undo-tree-id2035 . -4) (undo-tree-id2036 . -4) (undo-tree-id2037 . -4) (undo-tree-id2038 . -4) (undo-tree-id2039 . -4) (undo-tree-id2040 . -4) (undo-tree-id2041 . -4) (undo-tree-id2042 . -4) 1937) nil (24169 48662 276554 0) 0 nil]) ((1933 . 1937)) nil (24169 48662 276558 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -1933) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) 1934) nil (24169 48662 276567 0) 0 nil]) ((1922 . 1934) (1921 . 1923) (#("(" 0 1 (face font-lock-type-face fontified nil)) . -1921) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (1917 . 1922)) nil (24169 48662 276572 0) 0 nil]) ((1914 . 1917) (t 24169 48594 185104 587000)) nil (24169 48662 276573 0) 0 nil]) ((342 . 343)) nil (24169 48594 164313 0) 0 nil]) ((nil rear-nonsticky nil 341 . 342) (nil fontified nil 338 . 342) (338 . 342)) nil (24169 48594 164320 0) 0 nil]) ((336 . 338)) nil (24169 48594 164322 0) 0 nil]) ((333 . 336)) nil (24169 48594 164323 0) 0 nil]) ((#("," 0 1 (fontified t)) . -333) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) 334 (t 24169 48586 576863 285000)) nil (24169 48594 164369 0) 0 nil]) ((333 . 334) (t 24169 48585 541951 796000)) nil (24169 48586 556711 0) 0 nil]) ((331 . 333)) nil (24169 48585 519361 0) 0 nil]) ((#("R" 0 1 (face font-lock-type-face fontified t)) . -331) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -332) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) 333) nil (24169 48585 519404 0) 0 nil]) ((329 . 333)) nil (24169 48585 519408 0) 0 nil]) ((#("MANAGEMENT_" 0 11 (face font-lock-type-face fontified t)) . -329) (undo-tree-id1539 . -11) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -2) (undo-tree-id1544 . -2) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -3) (undo-tree-id1549 . -3) (undo-tree-id1550 . -3) (undo-tree-id1551 . -3) (undo-tree-id1552 . -3) (undo-tree-id1553 . -4) (undo-tree-id1554 . -4) (undo-tree-id1555 . -4) (undo-tree-id1556 . -5) (undo-tree-id1557 . -5) (undo-tree-id1558 . -5) (undo-tree-id1559 . -6) (undo-tree-id1560 . -6) (undo-tree-id1561 . -6) (undo-tree-id1562 . -6) (undo-tree-id1563 . -6) (undo-tree-id1564 . -7) (undo-tree-id1565 . -7) (undo-tree-id1566 . -7) (undo-tree-id1567 . -8) (undo-tree-id1568 . -8) (undo-tree-id1569 . -8) (undo-tree-id1570 . -9) (undo-tree-id1571 . -9) (undo-tree-id1572 . -9) (undo-tree-id1573 . -10) (undo-tree-id1574 . -10) (undo-tree-id1575 . -10) (undo-tree-id1576 . -10) (undo-tree-id1577 . -10) (undo-tree-id1578 . -11) (undo-tree-id1579 . -11) (undo-tree-id1580 . -11) (undo-tree-id1581 . -11) (undo-tree-id1582 . -11) (undo-tree-id1583 . -11) (undo-tree-id1584 . -11) (undo-tree-id1585 . -11) (undo-tree-id1586 . -11) (undo-tree-id1587 . -11) (undo-tree-id1588 . -11) (undo-tree-id1589 . -11) (undo-tree-id1590 . -11) (undo-tree-id1591 . -11) (undo-tree-id1592 . -11) (undo-tree-id1593 . -11) (undo-tree-id1594 . -11) (undo-tree-id1595 . -11) (undo-tree-id1596 . -11) (undo-tree-id1597 . -11) (undo-tree-id1598 . -11) (undo-tree-id1599 . -11) (undo-tree-id1600 . -11) (undo-tree-id1601 . -11) (undo-tree-id1602 . -11) (undo-tree-id1603 . -11) (undo-tree-id1604 . -11) (undo-tree-id1605 . -11) (undo-tree-id1606 . -11) (undo-tree-id1607 . -11) (undo-tree-id1608 . -11) (undo-tree-id1609 . -11) (undo-tree-id1610 . -11) (undo-tree-id1611 . -11) (undo-tree-id1612 . -11) (undo-tree-id1613 . -11) (undo-tree-id1614 . -11) (undo-tree-id1615 . -11) (undo-tree-id1616 . -11) (undo-tree-id1617 . -11) (undo-tree-id1618 . -11) (undo-tree-id1619 . -11) (undo-tree-id1620 . -11) (undo-tree-id1621 . -11) (undo-tree-id1622 . -11) (undo-tree-id1623 . -11) (undo-tree-id1624 . -11) (undo-tree-id1625 . -11) (undo-tree-id1626 . -11) (undo-tree-id1627 . -11) (undo-tree-id1628 . -11) (undo-tree-id1629 . -11) (undo-tree-id1630 . -11) (undo-tree-id1631 . -11) (undo-tree-id1632 . -11) (undo-tree-id1633 . -11) (undo-tree-id1634 . -11) (undo-tree-id1635 . -11) (undo-tree-id1636 . -11) (undo-tree-id1637 . -11) (undo-tree-id1638 . -11) (undo-tree-id1639 . -11) (undo-tree-id1640 . -11) (undo-tree-id1641 . -11) (undo-tree-id1642 . -11) (undo-tree-id1643 . -11) (undo-tree-id1644 . -11) (undo-tree-id1645 . -11) (undo-tree-id1646 . -11) (undo-tree-id1647 . -11) (undo-tree-id1648 . -11) (undo-tree-id1649 . -11) (undo-tree-id1650 . -11) (undo-tree-id1651 . -11) (undo-tree-id1652 . -11) (undo-tree-id1653 . -11) (undo-tree-id1654 . -11) (undo-tree-id1655 . -11) (undo-tree-id1656 . -11) (undo-tree-id1657 . -11) (undo-tree-id1658 . -11) (undo-tree-id1659 . -11) (undo-tree-id1660 . -11) (undo-tree-id1661 . -11) (undo-tree-id1662 . -11) (undo-tree-id1663 . -11) (undo-tree-id1664 . -11) (undo-tree-id1665 . -11) (undo-tree-id1666 . -11) (undo-tree-id1667 . -11) (undo-tree-id1668 . -11) (undo-tree-id1669 . -11) (undo-tree-id1670 . -11) (undo-tree-id1671 . -11) (undo-tree-id1672 . -11) (undo-tree-id1673 . -11) (undo-tree-id1674 . -11) (undo-tree-id1675 . -11) (undo-tree-id1676 . -11) (undo-tree-id1677 . -11) (undo-tree-id1678 . -11) (undo-tree-id1679 . -11) (undo-tree-id1680 . -11) (undo-tree-id1681 . -11) (undo-tree-id1682 . -11) (undo-tree-id1683 . -11) 340) nil (24169 48585 519597 0) 0 nil]) ((#("PROTOCOL8" 0 9 (face font-lock-type-face fontified t)) . -340) (undo-tree-id1684 . -9) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (undo-tree-id1691 . -3) (undo-tree-id1692 . -3) (undo-tree-id1693 . -3) (undo-tree-id1694 . -4) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4) (undo-tree-id1697 . -4) (undo-tree-id1698 . -4) (undo-tree-id1699 . -5) (undo-tree-id1700 . -5) (undo-tree-id1701 . -5) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . -6) (undo-tree-id1705 . -6) (undo-tree-id1706 . -6) (undo-tree-id1707 . -7) (undo-tree-id1708 . -7) (undo-tree-id1709 . -7) (undo-tree-id1710 . -7) (undo-tree-id1711 . -7) (undo-tree-id1712 . -8) (undo-tree-id1713 . -8) (undo-tree-id1714 . -8) (undo-tree-id1715 . -8) (undo-tree-id1716 . -8) (undo-tree-id1717 . -8) (undo-tree-id1718 . -8) (undo-tree-id1719 . -8) (undo-tree-id1720 . -8) (undo-tree-id1721 . -8) (undo-tree-id1722 . -8) (undo-tree-id1723 . -8) (undo-tree-id1724 . -8) (undo-tree-id1725 . -8) (undo-tree-id1726 . -8) (undo-tree-id1727 . -8) (undo-tree-id1728 . -8) (undo-tree-id1729 . -8) (undo-tree-id1730 . -8) (undo-tree-id1731 . -8) (undo-tree-id1732 . -8) (undo-tree-id1733 . -9) (undo-tree-id1734 . -9) (undo-tree-id1735 . -9) (undo-tree-id1736 . -9) (undo-tree-id1737 . -9) (undo-tree-id1738 . -9) (undo-tree-id1739 . -9) (undo-tree-id1740 . -9) (undo-tree-id1741 . -9) (undo-tree-id1742 . -9) (undo-tree-id1743 . -9) (undo-tree-id1744 . -9) (undo-tree-id1745 . -9) (undo-tree-id1746 . -9) (undo-tree-id1747 . -9) (undo-tree-id1748 . -9) (undo-tree-id1749 . -9) (undo-tree-id1750 . -9) (undo-tree-id1751 . -9) (undo-tree-id1752 . -9) (undo-tree-id1753 . -9) (undo-tree-id1754 . -9) (undo-tree-id1755 . -9) (undo-tree-id1756 . -9) (undo-tree-id1757 . -9) (undo-tree-id1758 . -9) (undo-tree-id1759 . -9) (undo-tree-id1760 . -9) (undo-tree-id1761 . -9) (undo-tree-id1762 . -9) (undo-tree-id1763 . -9) (undo-tree-id1764 . -9) (undo-tree-id1765 . -9) (undo-tree-id1766 . -9) (undo-tree-id1767 . -9) (undo-tree-id1768 . -9) (undo-tree-id1769 . -9) (undo-tree-id1770 . -9) (undo-tree-id1771 . -9) (undo-tree-id1772 . -9) (undo-tree-id1773 . -9) (undo-tree-id1774 . -9) (undo-tree-id1775 . -9) (undo-tree-id1776 . -9) (undo-tree-id1777 . -9) (undo-tree-id1778 . -9) 349) nil (24169 48585 519717 0) 0 nil]) ((#("0" 0 1 (face font-lock-type-face fontified t)) . -349) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -350) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (#("." 0 1 (fontified t)) . -351) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (#("1" 0 1 (face highlight-numbers-number fontified t)) . -352) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (#("1" 0 1 (face highlight-numbers-number fontified t)) . -353) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) 354) nil (24169 48585 519856 0) 0 nil]) ((349 . 354)) nil (24169 48585 519862 0) 0 nil]) ((348 . 349)) nil (24169 48585 519863 0) 0 nil]) ((#("f" 0 1 (face font-lock-type-face fontified t)) . -348) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) 349) nil (24169 48585 519876 0) 0 nil]) ((329 . 349)) nil (24169 48585 519877 0) 0 nil]) ((#("M" 0 1 (face font-lock-type-face fontified t)) . -329) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -330) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -331) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -332) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) 333) nil (24169 48585 519950 0) 0 nil]) ((329 . 333)) nil (24169 48585 519954 0) 0 nil]) ((#("E" 0 1 (face font-lock-type-face fontified t)) . -329) (undo-tree-id1964 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -330) (undo-tree-id1965 . -1) (#("H" 0 1 (face font-lock-type-face fontified t)) . -331) (undo-tree-id1966 . -1) 332) nil (24169 48585 519959 0) 0 nil]) ((329 . 332)) nil (24169 48585 519960 0) 0 nil]) ((#("802." 0 3 (face highlight-numbers-number fontified t) 3 4 (fontified t)) . -329) (undo-tree-id1967 . -4) 333) nil (24169 48585 519962 0) 0 nil]) ((#("11" 0 2 (face highlight-numbers-number fontified t)) . -333) (undo-tree-id1968 . -2) 335) nil (24169 48585 519964 0) 0 nil]) ((329 . 335)) nil (24169 48585 519965 0) 0 nil]) ((#("E" 0 1 (face font-lock-type-face fontified t)) . -329) (undo-tree-id1969 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -330) (undo-tree-id1970 . -1) (#("H" 0 1 (face font-lock-type-face fontified t)) . -331) (undo-tree-id1971 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -332) (undo-tree-id1972 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -333) (undo-tree-id1973 . -1) (#("H" 0 1 (face font-lock-type-face fontified t)) . -334) (undo-tree-id1974 . -1) 335) nil (24169 48585 519974 0) 0 nil]) ((329 . 335)) nil (24169 48585 519975 0) 0 nil]) ((324 . 329) (t 24169 45458 939601 823000)) nil (24169 48585 519976 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1475) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1)) nil (24169 45458 920081 0) 0 nil]) ((#("    #[debug(skip)]" 0 4 (fontified t) 4 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 6 11 (face font-lock-preprocessor-face fontified t) 11 12 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 12 16 (face font-lock-preprocessor-face fontified t) 16 17 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 17 18 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t)) . 1475) (undo-tree-id1500 . -4) (undo-tree-id1501 . -18) (undo-tree-id1502 . -18) (undo-tree-id1503 . -18) (undo-tree-id1504 . -18) (undo-tree-id1505 . -17) (undo-tree-id1506 . -18) (undo-tree-id1507 . -17) (undo-tree-id1508 . -18) (undo-tree-id1509 . -17) (undo-tree-id1510 . -18) (undo-tree-id1511 . -17) (undo-tree-id1512 . -18) (undo-tree-id1513 . -17) (undo-tree-id1514 . -18) (undo-tree-id1515 . -17) (undo-tree-id1516 . -18) (undo-tree-id1517 . -5) (undo-tree-id1518 . -6) (undo-tree-id1519 . -18) (undo-tree-id1520 . -18) (t 24169 43460 780263 444000)) nil (24169 45458 920115 0) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1391) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) 1392 (t 24169 43459 979535 989000)) nil (24169 43460 769169 0) 0 nil]) ((nil rear-nonsticky nil 1391 . 1392) (nil fontified nil 1369 . 1392) (1369 . 1392)) nil (24169 43459 960413 0) 0 nil]) ((#("#[derive(Debug)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 14 (face font-lock-preprocessor-face fontified t) 14 15 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 1369) (undo-tree-id1406 . -16) (undo-tree-id1407 . -16) (undo-tree-id1408 . -16) (undo-tree-id1409 . -16) (undo-tree-id1410 . -16) (undo-tree-id1411 . -16) (undo-tree-id1412 . -16) (undo-tree-id1413 . -16) (undo-tree-id1414 . -16) (undo-tree-id1415 . -16)) nil (24169 43459 960441 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1468) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . 1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) 1469) nil (24169 43459 960478 0) 0 nil]) ((#("    " 0 4 (fontified t)) . -1474) 1492) nil (24169 43459 960481 0) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1492) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) 1493) nil (24169 43459 960491 0) 0 nil]) ((nil rear-nonsticky nil 1492 . 1493) (nil fontified nil 1474 . 1493) (1474 . 1493)) nil (24169 43459 960493 0) 0 nil]) ((1470 . 1474) (#("    " 0 4 (fontified nil)) . 1469) (1469 . 1473) (1469 . 1470) (#("    " 0 4 (fontified t)) . 1469) (undo-tree-id1453 . -4) (undo-tree-id1454 . -4) (undo-tree-id1455 . -4) (undo-tree-id1456 . -4) (undo-tree-id1457 . -4) (undo-tree-id1458 . -4) (undo-tree-id1459 . -4) (undo-tree-id1460 . -4) (undo-tree-id1461 . -4) (undo-tree-id1462 . -4) (undo-tree-id1463 . -4) (undo-tree-id1464 . -4) (undo-tree-id1465 . -4) (undo-tree-id1466 . -4) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) 1473) nil (24169 43459 960525 0) 0 nil]) ((1468 . 1473) (t 24169 43438 59040 858000)) nil (24169 43459 960527 0) 0 nil]) ((62 . 66)) nil (24169 43438 38335 0) 0 nil]) ((apply yas--snippet-revive 43 62 #10=#s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #10#) (43 . 62) (#("custom_debug_derive" 0 19 (fontified nil)) . 43) (43 . 62) (#("custom_debug_derive" 0 19 (fontified nil)) . -43) (undo-tree-id1379 . -19) (43 . 62) (#("cus" 0 3 (face font-lock-constant-face fontified t)) . -43) (undo-tree-id1380 . -3) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) 46) nil (24169 43438 38392 0) 0 nil]) ((39 . 46)) nil (24169 43438 38396 0) 0 nil]) ((38 . 39) (t 24169 42570 971065 713000)) nil (24169 43438 38398 0) 0 nil]) ((nil rear-nonsticky nil 297 . 298) (nil fontified nil 209 . 210) (nil fontified nil 210 . 211) (nil fontified nil 211 . 217) (nil fontified nil 217 . 218) (nil fontified nil 218 . 241) (nil fontified nil 241 . 242) (nil fontified nil 242 . 243) (nil fontified nil 243 . 244) (nil fontified nil 244 . 245) (nil fontified nil 245 . 246) (nil fontified nil 246 . 250) (nil fontified nil 250 . 251) (nil fontified nil 251 . 254) (nil fontified nil 254 . 255) (nil fontified nil 255 . 256) (nil fontified nil 256 . 257) (nil fontified nil 257 . 260) (nil fontified nil 260 . 261) (nil fontified nil 261 . 265) (nil fontified nil 265 . 266) (nil fontified nil 266 . 275) (nil fontified nil 275 . 276) (nil fontified nil 276 . 277) (nil fontified nil 277 . 282) (nil fontified nil 282 . 286) (nil fontified nil 286 . 289) (nil fontified nil 289 . 295) (nil fontified nil 295 . 297) (209 . 298)) ((#("#[derive(Debug, TryFromPrimitive)]
#[repr(u16)]
pub enum EtherType {
    IPv4 = 0x0800,
}" 0 1 (face font-lock-preprocessor-face fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified nil) 2 8 (face font-lock-preprocessor-face fontified nil) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified nil) 9 32 (face font-lock-preprocessor-face fontified nil) 32 33 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified nil) 33 34 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified nil) 34 35 (fontified nil) 35 36 (face font-lock-preprocessor-face fontified nil) 36 37 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified nil) 37 41 (face font-lock-preprocessor-face fontified nil) 41 42 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified nil) 42 45 (face font-lock-type-face fontified nil) 45 46 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified nil) 46 47 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified nil) 47 48 (fontified nil) 48 51 (face font-lock-keyword-face fontified nil) 51 52 (fontified nil) 52 56 (face font-lock-keyword-face fontified nil) 56 57 (fontified nil) 57 66 (face font-lock-type-face fontified nil) 66 67 (fontified nil) 67 68 (face (rainbow-delimiters-depth-1-face) fontified nil) 68 73 (fontified nil) 73 77 (face font-lock-type-face fontified nil) 77 80 (fontified nil) 80 86 (face highlight-numbers-number fontified nil) 86 88 (fontified nil) 88 89 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 209) (undo-tree-id1031 . -88) (undo-tree-id1032 . -88) (undo-tree-id1033 . -69) (undo-tree-id1034 . -69) (undo-tree-id1035 . -48) (undo-tree-id1036 . -48) (undo-tree-id1037 . -35) (undo-tree-id1038 . -35) (undo-tree-id1039 . -89) (undo-tree-id1040 . -89) (undo-tree-id1041 . -89) (undo-tree-id1042 . -89) (undo-tree-id1043 . -89) (undo-tree-id1044 . -89) (undo-tree-id1045 . -89) (undo-tree-id1046 . -89) (undo-tree-id1047 . -89) (undo-tree-id1048 . -89) (undo-tree-id1049 . -89) (undo-tree-id1050 . -89) (undo-tree-id1051 . -89) (undo-tree-id1052 . -89) (undo-tree-id1053 . -89) (undo-tree-id1054 . -89) (undo-tree-id1055 . -89) (undo-tree-id1056 . -89) (undo-tree-id1057 . -89) (undo-tree-id1058 . -89) (undo-tree-id1059 . -89) (undo-tree-id1060 . -88) (undo-tree-id1061 . -89) (undo-tree-id1062 . -88) (undo-tree-id1063 . -89) (undo-tree-id1064 . -88) (undo-tree-id1065 . -89) (undo-tree-id1066 . -88) (undo-tree-id1067 . -89) (undo-tree-id1068 . -88) (undo-tree-id1069 . -89) (undo-tree-id1070 . -88) (undo-tree-id1071 . -89) (undo-tree-id1072 . -67) (undo-tree-id1073 . -68) (undo-tree-id1074 . -89) (undo-tree-id1075 . -89) (undo-tree-id1076 . -88) (undo-tree-id1077 . -89) (undo-tree-id1078 . -88) (undo-tree-id1079 . -89) (undo-tree-id1080 . -88) (undo-tree-id1081 . -89) (undo-tree-id1082 . -88) (undo-tree-id1083 . -89) (undo-tree-id1084 . -88) (undo-tree-id1085 . -89) (undo-tree-id1086 . -88) (undo-tree-id1087 . -89) (undo-tree-id1088 . -67) (undo-tree-id1089 . -68) (undo-tree-id1090 . -89) (undo-tree-id1091 . -88) (undo-tree-id1092 . -89) (undo-tree-id1093 . -89) (undo-tree-id1094 . -89) (undo-tree-id1095 . -89) (undo-tree-id1096 . -89) (undo-tree-id1097 . -89) (undo-tree-id1098 . -89) (undo-tree-id1099 . -89) (undo-tree-id1100 . -89) (undo-tree-id1101 . -89) (undo-tree-id1102 . -89) (undo-tree-id1103 . -89) (undo-tree-id1104 . -89) (undo-tree-id1105 . -89) (undo-tree-id1106 . -89) (undo-tree-id1107 . -89) (undo-tree-id1108 . -89) (undo-tree-id1109 . -89) (undo-tree-id1110 . -89) (undo-tree-id1111 . -88) (undo-tree-id1112 . -89) (undo-tree-id1113 . -88) (undo-tree-id1114 . -89) (undo-tree-id1115 . -88) (undo-tree-id1116 . -89) (undo-tree-id1117 . -88) (undo-tree-id1118 . -89) (undo-tree-id1119 . -88) (undo-tree-id1120 . -89) (undo-tree-id1121 . -88) (undo-tree-id1122 . -89) (undo-tree-id1123 . -67) (undo-tree-id1124 . -68) (undo-tree-id1125 . 22) (undo-tree-id1126 . -68) (undo-tree-id1127 . 21) (undo-tree-id1128 . -88) (undo-tree-id1129 . 1) (undo-tree-id1130 . -89) (undo-tree-id1131 . -89) (undo-tree-id1132 . -89) (undo-tree-id1133 . -89) (nil fontified t 295 . 297) (nil fontified t 289 . 295) (nil fontified t 286 . 289) (nil fontified t 282 . 286) (nil fontified t 277 . 282) (nil fontified t 276 . 277) (nil fontified t 275 . 276) (nil fontified t 266 . 275) (nil fontified t 265 . 266) (nil fontified t 261 . 265) (nil fontified t 260 . 261) (nil fontified t 257 . 260) (nil fontified t 256 . 257) (nil fontified t 255 . 256) (nil fontified t 254 . 255) (nil fontified t 251 . 254) (nil fontified t 250 . 251) (nil fontified t 246 . 250) (nil fontified t 245 . 246) (nil fontified t 244 . 245) (nil fontified t 243 . 244) (nil fontified t 242 . 243) (nil fontified t 241 . 242) (nil fontified t 218 . 241) (nil fontified t 217 . 218) (nil fontified t 211 . 217) (nil fontified t 210 . 211) (nil fontified t 209 . 210) (nil rear-nonsticky t 297 . 298) (t 24169 42570 971065 713000)) (24169 42661 74212 0) 0 nil]) ((#("#[derive(Debug, TryFromPrimitive)]
#[repr(u16)]
pub enum EtherType {
    IPv4 = 0x0800,
    ARP = 0x0806,
    IPv6 = 0x86DD,
}" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 32 (face font-lock-preprocessor-face fontified t) 32 33 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 33 34 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 34 35 (fontified t) 35 36 (face font-lock-preprocessor-face fontified t) 36 37 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 37 41 (face font-lock-preprocessor-face fontified t) 41 42 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 42 45 (face font-lock-type-face fontified t) 45 46 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 46 47 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 47 48 (fontified t) 48 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 66 (face font-lock-type-face fontified t) 66 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-1-face) fontified t) 68 73 (fontified t) 73 77 (face font-lock-type-face fontified t) 77 80 (fontified t) 80 86 (face highlight-numbers-number fontified t) 86 92 (fontified t) 92 95 (face font-lock-type-face fontified t) 95 98 (fontified t) 98 104 (face highlight-numbers-number fontified t) 104 110 (fontified t) 110 114 (face font-lock-type-face fontified t) 114 117 (fontified t) 117 123 (face highlight-numbers-number fontified t) 123 125 (fontified t) 125 126 (face (rainbow-delimiters-depth-1-face) fontified t)) . 209) (undo-tree-id1291 . -57) (undo-tree-id1292 . -57) (undo-tree-id1293 . -57) (undo-tree-id1294 . -57) (undo-tree-id1295 . -57) (undo-tree-id1296 . -57) (undo-tree-id1297 . -57) (undo-tree-id1298 . -57) (undo-tree-id1299 . -57) (undo-tree-id1300 . -57) (undo-tree-id1301 . -57) (undo-tree-id1302 . -57) (undo-tree-id1303 . -57) (undo-tree-id1304 . -57) (undo-tree-id1305 . -57) (undo-tree-id1306 . -57) (undo-tree-id1307 . -57) (undo-tree-id1308 . -57) (undo-tree-id1309 . -57) (undo-tree-id1310 . -57) (undo-tree-id1311 . -57) (undo-tree-id1312 . -57) (undo-tree-id1313 . -57) (undo-tree-id1314 . -57) (undo-tree-id1315 . -78) (undo-tree-id1316 . -78) (undo-tree-id1317 . -78) (undo-tree-id1318 . -97) (undo-tree-id1319 . -97) (undo-tree-id1320 . -97) (undo-tree-id1321 . -97) (undo-tree-id1322 . -97) (undo-tree-id1323 . -97) (undo-tree-id1324 . -97) (undo-tree-id1325 . -97) (undo-tree-id1326 . -97) (undo-tree-id1327 . -97) (undo-tree-id1328 . -97) (undo-tree-id1329 . -97) (undo-tree-id1330 . -97) (undo-tree-id1331 . -97) (undo-tree-id1332 . -97) (undo-tree-id1333 . -97) (undo-tree-id1334 . -97) (undo-tree-id1335 . -97) (undo-tree-id1336 . -97) (undo-tree-id1337 . -97) (undo-tree-id1338 . -97) (undo-tree-id1339 . -97) (undo-tree-id1340 . -97) (undo-tree-id1341 . -88) (undo-tree-id1342 . -88) (undo-tree-id1343 . -88) (undo-tree-id1344 . -106) (undo-tree-id1345 . -106) (undo-tree-id1346 . -106) (undo-tree-id1347 . -125) (undo-tree-id1348 . -125) (undo-tree-id1349 . -125) (undo-tree-id1350 . -126) (undo-tree-id1351 . -126) (undo-tree-id1352 . -126) (undo-tree-id1353 . -126) (undo-tree-id1354 . -125) (undo-tree-id1355 . -126) (undo-tree-id1356 . -125) (undo-tree-id1357 . -126) (undo-tree-id1358 . -125) (undo-tree-id1359 . -126) (undo-tree-id1360 . -125) (undo-tree-id1361 . -126) (undo-tree-id1362 . -125) (undo-tree-id1363 . -126) (undo-tree-id1364 . -125) (undo-tree-id1365 . -126) (undo-tree-id1366 . -67) (undo-tree-id1367 . -68) (undo-tree-id1368 . -126) (undo-tree-id1369 . -126) (undo-tree-id1370 . -126) (undo-tree-id1371 . -126) (undo-tree-id1372 . -126) (undo-tree-id1373 . -125) (undo-tree-id1374 . -125) (undo-tree-id1375 . -125) (undo-tree-id1376 . -125) (undo-tree-id1377 . -125) (undo-tree-id1378 . -126)) ((209 . 335)) (24169 42660 985913 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1761) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1)) ((1761 . 1762)) (24169 42660 901382 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1812) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1)) ((1812 . 1813)) (24169 42660 817259 0) 0 nil]) ((#("                // field of type `Payload`." 0 16 (fontified t) 16 19 (face font-lock-comment-delimiter-face fontified t) 19 43 (face font-lock-comment-face fontified t)) . 1812) (undo-tree-id1283 . -41) (undo-tree-id1284 . -42) (undo-tree-id1285 . -41) (undo-tree-id1286 . -42)) ((1812 . 1855)) (24169 42660 732916 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1812) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1)) ((1812 . 1813)) (24169 42660 648802 0) 0 nil]) ((#("                // a `Payload::IPv4(ipv4::Packet)`, so it fits in our" 0 16 (fontified t) 16 19 (face font-lock-comment-delimiter-face fontified t) 19 69 (face font-lock-comment-face fontified t)) . 1812)) ((1812 . 1881)) (24169 42660 564411 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1812) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1)) ((1812 . 1813)) (24169 42660 480199 0) 0 nil]) ((#("                // the `map` here is just to turn an `ipv4::Packet` into" 0 16 (fontified t) 16 19 (face font-lock-comment-delimiter-face fontified t) 19 72 (face font-lock-comment-face fontified t)) . 1812)) ((1812 . 1884)) (24169 42660 395473 0) 0 nil]) ((2044 . 2050)) ((#("packet" 0 6 (face font-lock-constant-face fontified t)) . 2044)) (24169 42660 311092 0) 0 nil]) ((#("ipv4" 0 4 (face font-lock-constant-face fontified t)) . 2044) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4)) ((2044 . 2048)) (24169 42660 226989 0) 0 nil]) ((2333 . 2334)) ((#("
" 0 1 (fontified t)) . 2333)) (24169 42660 143133 0) 0 nil]) ((nil rear-nonsticky nil 2332 . 2333) (nil fontified nil 1520 . 1524) (nil fontified nil 1524 . 1525) (nil fontified nil 1525 . 1530) (nil fontified nil 1530 . 1531) (nil fontified nil 1531 . 1532) (nil fontified nil 1532 . 1537) (nil fontified nil 1537 . 1540) (nil fontified nil 1540 . 1541) (nil fontified nil 1541 . 1543) (nil fontified nil 1543 . 1544) (nil fontified nil 1544 . 1549) (nil fontified nil 1549 . 1550) (nil fontified nil 1550 . 1551) (nil fontified nil 1551 . 1553) (nil fontified nil 1553 . 1558) (nil fontified nil 1558 . 1560) (nil fontified nil 1560 . 1565) (nil fontified nil 1565 . 1566) (nil fontified nil 1566 . 1568) (nil fontified nil 1568 . 1569) (nil fontified nil 1569 . 1570) (nil fontified nil 1570 . 1575) (nil fontified nil 1575 . 1577) (nil fontified nil 1577 . 1583) (nil fontified nil 1583 . 1584) (nil fontified nil 1584 . 1588) (nil fontified nil 1588 . 1589) (nil fontified nil 1589 . 1590) (nil fontified nil 1590 . 1591) (nil fontified nil 1591 . 1607) (nil fontified nil 1607 . 1608) (nil fontified nil 1608 . 1624) (nil fontified nil 1624 . 1630) (nil fontified nil 1630 . 1631) (nil fontified nil 1631 . 1644) (nil fontified nil 1644 . 1647) (nil fontified nil 1647 . 1648) (nil fontified nil 1648 . 1649) (nil fontified nil 1649 . 1652) (nil fontified nil 1652 . 1653) (nil fontified nil 1653 . 1661) (nil fontified nil 1661 . 1662) (nil fontified nil 1662 . 1663) (nil fontified nil 1663 . 1671) (nil fontified nil 1671 . 1672) (nil fontified nil 1672 . 1673) (nil fontified nil 1673 . 1677) (nil fontified nil 1677 . 1686) (nil fontified nil 1686 . 1690) (nil fontified nil 1690 . 1697) (nil fontified nil 1697 . 1698) (nil fontified nil 1698 . 1699) (nil fontified nil 1699 . 1700) (nil fontified nil 1700 . 1701) (nil fontified nil 1701 . 1702) (nil fontified nil 1702 . 1703) (nil fontified nil 1703 . 1717) (nil fontified nil 1717 . 1720) (nil fontified nil 1720 . 1721) (nil fontified nil 1721 . 1722) (nil fontified nil 1722 . 1735) (nil fontified nil 1735 . 1736) (nil fontified nil 1736 . 1739) (nil fontified nil 1739 . 1748) (nil fontified nil 1748 . 1755) (nil fontified nil 1755 . 1756) (nil fontified nil 1756 . 1757) (nil fontified nil 1757 . 1758) (nil fontified nil 1758 . 1759) (nil fontified nil 1759 . 1761) (nil fontified nil 1761 . 1762) (nil fontified nil 1762 . 1774) (nil fontified nil 1774 . 1777) (nil fontified nil 1777 . 1778) (nil fontified nil 1778 . 1779) (nil fontified nil 1779 . 1789) (nil fontified nil 1789 . 1790) (nil fontified nil 1790 . 1793) (nil fontified nil 1793 . 1798) (nil fontified nil 1798 . 1810) (nil fontified nil 1810 . 1811) (nil fontified nil 1811 . 1812) (nil fontified nil 1812 . 1828) (nil fontified nil 1828 . 1831) (nil fontified nil 1831 . 1884) (nil fontified nil 1884 . 1885) (nil fontified nil 1955 . 1971) (nil fontified nil 1971 . 1974) (nil fontified nil 1974 . 1998) (nil fontified nil 1998 . 1999) (nil fontified nil 1999 . 2015) (nil fontified nil 2015 . 2019) (nil fontified nil 2019 . 2020) (nil fontified nil 2020 . 2029) (nil fontified nil 2029 . 2031) (nil fontified nil 2031 . 2035) (nil fontified nil 2035 . 2036) (nil fontified nil 2036 . 2038) (nil fontified nil 2038 . 2039) (nil fontified nil 2039 . 2043) (nil fontified nil 2043 . 2044) (nil fontified nil 2044 . 2048) (nil fontified nil 2048 . 2050) (nil fontified nil 2050 . 2056) (nil fontified nil 2056 . 2061) (nil fontified nil 2061 . 2065) (nil fontified nil 2065 . 2072) (nil fontified nil 2072 . 2074) (nil fontified nil 2074 . 2078) (nil fontified nil 2078 . 2079) (nil fontified nil 2079 . 2080) (nil fontified nil 2080 . 2081) (nil fontified nil 2081 . 2082) (nil fontified nil 2082 . 2083) (nil fontified nil 2083 . 2085) (nil fontified nil 2085 . 2101) (nil fontified nil 2101 . 2105) (nil fontified nil 2105 . 2107) (nil fontified nil 2107 . 2108) (nil fontified nil 2108 . 2109) (nil fontified nil 2109 . 2110) (nil fontified nil 2110 . 2113) (nil fontified nil 2113 . 2120) (nil fontified nil 2120 . 2122) (nil fontified nil 2122 . 2129) (nil fontified nil 2129 . 2130) (nil fontified nil 2130 . 2144) (nil fontified nil 2144 . 2145) (nil fontified nil 2145 . 2160) (nil fontified nil 2160 . 2163) (nil fontified nil 2163 . 2164) (nil fontified nil 2164 . 2167) (nil fontified nil 2167 . 2170) (nil fontified nil 2170 . 2174) (nil fontified nil 2174 . 2175) (nil fontified nil 2175 . 2176) (nil fontified nil 2176 . 2284) (nil fontified nil 2284 . 2285) (nil fontified nil 2285 . 2299) (nil fontified nil 2299 . 2301) (nil fontified nil 2301 . 2302) (nil fontified nil 2302 . 2303) (nil fontified nil 2303 . 2309) (nil fontified nil 2309 . 2310) (nil fontified nil 2310 . 2311) (nil fontified nil 2311 . 2320) (nil fontified nil 2320 . 2321) (nil fontified nil 2321 . 2322) (nil fontified nil 2322 . 2323) (nil fontified nil 2323 . 2324) (nil fontified nil 2324 . 2325) (nil fontified nil 2325 . 2330) (nil fontified nil 2330 . 2331) (nil fontified nil 2331 . 2332) (1520 . 2333)) ((#("impl Frame {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        context(\"Ethernet frame\", |i| {
            let (i, (dst, src)) = tuple((Addr::parse, Addr::parse))(i)?;
            let (i, ether_type) = EtherType::parse(i)?;

            let (i, payload) = match ether_type {
                // the `map` here is just to turn an `ipv4::Packet` into
                // a `Payload::IPv4(ipv4::Packet)`, so it fits in our
                // field of type `Payload`.
                Some(EtherType::IPv4) => map(ipv4::Packet::parse, Payload::IPv4)(i)?,
                None => (i, Payload::Unknown),
            };

            let res = Self {
                dst,
                src,
                ether_type,
                payload,
            };
            Ok((i, res))
        })(i)
    }
}" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 10 (face font-lock-type-face fontified nil) 10 11 (fontified nil) 11 12 (face (rainbow-delimiters-depth-1-face) fontified nil) 12 17 (fontified nil) 17 20 (face font-lock-keyword-face fontified nil) 20 21 (fontified nil) 21 23 (face font-lock-keyword-face fontified nil) 23 24 (fontified nil) 24 29 (face font-lock-function-name-face fontified nil) 29 30 (face (rainbow-delimiters-depth-2-face) fontified nil) 30 31 (face font-lock-variable-name-face fontified nil) 31 33 (fontified nil) 33 38 (face font-lock-constant-face fontified nil) 38 40 (fontified nil) 40 45 (face font-lock-type-face fontified nil) 45 46 (face (rainbow-delimiters-depth-2-face) fontified nil) 46 48 (fontified nil) 48 49 (fontified nil syntax-table #1#) 49 50 (fontified nil) 50 55 (face font-lock-constant-face fontified nil) 55 57 (fontified nil) 57 63 (face font-lock-type-face fontified nil) 63 64 (face (rainbow-delimiters-depth-2-face) fontified nil) 64 68 (face font-lock-type-face fontified nil) 68 69 (face (rainbow-delimiters-depth-2-face) fontified nil) 69 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-2-face) fontified nil) 71 87 (fontified nil) 87 88 (face (rainbow-delimiters-depth-3-face) fontified nil) 88 104 (face font-lock-string-face fontified nil) 104 110 (fontified nil) 110 111 (face (rainbow-delimiters-depth-4-face) fontified nil) 111 124 (fontified nil) 124 127 (face font-lock-keyword-face fontified nil) 127 128 (fontified nil) 128 129 (face (rainbow-delimiters-depth-5-face) fontified nil) 129 132 (fontified nil) 132 133 (face (rainbow-delimiters-depth-6-face) fontified nil) 133 141 (fontified nil) 141 142 (face (rainbow-delimiters-depth-6-face) fontified nil) 142 143 (face (rainbow-delimiters-depth-5-face) fontified nil) 143 151 (fontified nil) 151 152 (face (rainbow-delimiters-depth-5-face) fontified nil) 152 153 (face (rainbow-delimiters-depth-6-face) fontified nil) 153 157 (face font-lock-type-face fontified nil) 157 166 (fontified nil) 166 170 (face font-lock-type-face fontified nil) 170 177 (fontified nil) 177 178 (face (rainbow-delimiters-depth-6-face) fontified nil) 178 179 (face (rainbow-delimiters-depth-5-face) fontified nil) 179 180 (face (rainbow-delimiters-depth-5-face) fontified nil) 180 181 (fontified nil) 181 182 (face (rainbow-delimiters-depth-5-face) fontified nil) 182 183 (face rust-question-mark-face fontified nil) 183 197 (fontified nil) 197 200 (face font-lock-keyword-face fontified nil) 200 201 (fontified nil) 201 202 (face (rainbow-delimiters-depth-5-face) fontified nil) 202 215 (fontified nil) 215 216 (face (rainbow-delimiters-depth-5-face) fontified nil) 216 219 (fontified nil) 219 228 (face font-lock-type-face fontified nil) 228 235 (fontified nil) 235 236 (face (rainbow-delimiters-depth-5-face) fontified nil) 236 237 (fontified nil) 237 238 (face (rainbow-delimiters-depth-5-face) fontified nil) 238 239 (face rust-question-mark-face fontified nil) 239 241 (fontified nil) 241 242 (fontified nil) 242 254 (fontified nil) 254 257 (face font-lock-keyword-face fontified nil) 257 258 (fontified nil) 258 259 (face (rainbow-delimiters-depth-5-face) fontified nil) 259 269 (fontified nil) 269 270 (face (rainbow-delimiters-depth-5-face) fontified nil) 270 273 (fontified nil) 273 278 (face font-lock-keyword-face fontified nil) 278 290 (fontified nil) 290 291 (face (rainbow-delimiters-depth-5-face) fontified nil) 291 292 (fontified nil) 292 308 (fontified nil) 308 311 (face font-lock-comment-delimiter-face fontified nil) 311 364 (face font-lock-comment-face fontified nil) 364 365 (face font-lock-comment-face fontified nil) 365 381 (fontified nil) 381 384 (fontified nil face font-lock-comment-delimiter-face) 384 434 (fontified nil face font-lock-comment-face) 434 435 (fontified nil face font-lock-comment-face) 435 451 (fontified nil) 451 454 (face font-lock-comment-delimiter-face fontified nil) 454 478 (face font-lock-comment-face fontified nil) 478 479 (face font-lock-comment-face fontified nil) 479 495 (fontified nil) 495 499 (face font-lock-type-face fontified nil) 499 500 (face (rainbow-delimiters-depth-6-face) fontified nil) 500 509 (face font-lock-type-face fontified nil) 509 511 (fontified nil) 511 515 (face font-lock-type-face fontified nil) 515 516 (face (rainbow-delimiters-depth-6-face) fontified nil) 516 518 (fontified nil) 518 519 (fontified nil syntax-table #1#) 519 523 (fontified nil) 523 524 (face (rainbow-delimiters-depth-6-face) fontified nil) 524 528 (face font-lock-constant-face fontified nil) 528 530 (fontified nil) 530 536 (face font-lock-type-face fontified nil) 536 541 (fontified nil) 541 545 (fontified nil) 545 552 (face font-lock-type-face fontified nil) 552 554 (fontified nil) 554 558 (face font-lock-type-face fontified nil) 558 559 (face (rainbow-delimiters-depth-6-face) fontified nil) 559 560 (face (rainbow-delimiters-depth-6-face) fontified nil) 560 561 (fontified nil) 561 562 (face (rainbow-delimiters-depth-6-face) fontified nil) 562 563 (face rust-question-mark-face fontified nil) 563 565 (fontified nil) 565 581 (fontified nil) 581 585 (face font-lock-type-face fontified nil) 585 587 (fontified nil) 587 588 (fontified nil syntax-table #1#) 588 589 (fontified nil) 589 590 (face (rainbow-delimiters-depth-6-face) fontified nil) 590 593 (fontified nil) 593 600 (face font-lock-type-face fontified nil) 600 602 (fontified nil) 602 609 (face font-lock-type-face fontified nil) 609 610 (face (rainbow-delimiters-depth-6-face) fontified nil) 610 624 (fontified nil) 624 625 (face (rainbow-delimiters-depth-5-face) fontified nil) 625 640 (fontified nil) 640 643 (face font-lock-keyword-face fontified nil) 643 644 (fontified nil) 644 647 (face font-lock-variable-name-face fontified nil) 647 650 (fontified nil) 650 654 (face font-lock-type-face fontified nil) 654 655 (fontified nil) 655 656 (face (rainbow-delimiters-depth-5-face) fontified nil) 656 764 (fontified nil) 764 765 (face (rainbow-delimiters-depth-5-face) fontified nil) 765 779 (fontified nil) 779 781 (face font-lock-type-face fontified nil) 781 782 (face (rainbow-delimiters-depth-5-face) fontified nil) 782 783 (face (rainbow-delimiters-depth-6-face) fontified nil) 783 789 (fontified nil) 789 790 (face (rainbow-delimiters-depth-6-face) fontified nil) 790 791 (face (rainbow-delimiters-depth-5-face) fontified nil) 791 800 (fontified nil) 800 801 (face (rainbow-delimiters-depth-4-face) fontified nil) 801 802 (face (rainbow-delimiters-depth-3-face) fontified nil) 802 803 (face (rainbow-delimiters-depth-3-face) fontified nil) 803 804 (fontified nil) 804 805 (face (rainbow-delimiters-depth-3-face) fontified nil) 805 810 (fontified nil) 810 811 (face (rainbow-delimiters-depth-2-face) fontified nil) 811 812 (fontified nil) 812 813 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 1520) (undo-tree-id1134 . -241) (undo-tree-id1135 . -528) (undo-tree-id1136 . -812) (undo-tree-id1137 . -812) (undo-tree-id1138 . -806) (undo-tree-id1139 . -806) (undo-tree-id1140 . -792) (undo-tree-id1141 . -792) (undo-tree-id1142 . -752) (undo-tree-id1143 . -752) (undo-tree-id1144 . -727) (undo-tree-id1145 . -727) (undo-tree-id1146 . -699) (undo-tree-id1147 . -699) (undo-tree-id1148 . -678) (undo-tree-id1149 . -678) (undo-tree-id1150 . -657) (undo-tree-id1151 . -657) (undo-tree-id1152 . -628) (undo-tree-id1153 . -628) (undo-tree-id1154 . -627) (undo-tree-id1155 . -627) (undo-tree-id1156 . -612) (undo-tree-id1157 . -612) (undo-tree-id1158 . -565) (undo-tree-id1159 . -565) (undo-tree-id1160 . -813) (undo-tree-id1161 . -287) (undo-tree-id1162 . -479) (undo-tree-id1163 . -479) (undo-tree-id1164 . -435) (undo-tree-id1165 . -435) (undo-tree-id1166 . -767) (undo-tree-id1167 . -767) (undo-tree-id1168 . -226) (undo-tree-id1169 . -435) (undo-tree-id1170 . -226) (undo-tree-id1171 . -241) (undo-tree-id1172 . -241) (undo-tree-id1173 . -241) (undo-tree-id1174 . -241) (undo-tree-id1175 . -241) (undo-tree-id1176 . -292) (undo-tree-id1177 . -292) (undo-tree-id1178 . -292) (undo-tree-id1179 . -292) (undo-tree-id1180 . -292) (undo-tree-id1181 . -292) (undo-tree-id1182 . -292) (undo-tree-id1183 . -292) (undo-tree-id1184 . -292) (undo-tree-id1185 . -292) (undo-tree-id1186 . -292) (undo-tree-id1187 . -292) (undo-tree-id1188 . -292) (undo-tree-id1189 . -292) (undo-tree-id1190 . -292) (undo-tree-id1191 . -292) (undo-tree-id1192 . -292) (undo-tree-id1193 . -292) (undo-tree-id1194 . -292) (undo-tree-id1195 . -279) (undo-tree-id1196 . -289) (undo-tree-id1197 . -292) (undo-tree-id1198 . -292) (undo-tree-id1199 . -292) (undo-tree-id1200 . -292) (undo-tree-id1201 . -292) (undo-tree-id1202 . -292) (undo-tree-id1203 . -524) (undo-tree-id1204 . -524) (undo-tree-id1205 . -524) (undo-tree-id1206 . -528) (undo-tree-id1207 . -528) (undo-tree-id1208 . -528) (undo-tree-id1209 . -812) (undo-tree-id1210 . -528) (undo-tree-id1211 . -813) (undo-tree-id1212 . -813) (undo-tree-id1213 . -813) (undo-tree-id1214 . -812) (undo-tree-id1215 . -813) (undo-tree-id1216 . -812) (undo-tree-id1217 . -813) (undo-tree-id1218 . -812) (undo-tree-id1219 . -813) (undo-tree-id1220 . -812) (undo-tree-id1221 . -813) (undo-tree-id1222 . -476) (undo-tree-id1223 . -477) (undo-tree-id1224 . -476) (undo-tree-id1225 . -477) (undo-tree-id1226 . -812) (undo-tree-id1227 . -813) (undo-tree-id1228 . -812) (undo-tree-id1229 . -813) (undo-tree-id1230 . -810) (undo-tree-id1231 . -811) (undo-tree-id1232 . -800) (undo-tree-id1233 . -801) (undo-tree-id1234 . -764) (undo-tree-id1235 . -765) (undo-tree-id1236 . -655) (undo-tree-id1237 . -656) (undo-tree-id1238 . -624) (undo-tree-id1239 . -625) (undo-tree-id1240 . -290) (undo-tree-id1241 . -291) (undo-tree-id1242 . -110) (undo-tree-id1243 . -111) (undo-tree-id1244 . -70) (undo-tree-id1245 . -71) (undo-tree-id1246 . -11) (undo-tree-id1247 . -12) (undo-tree-id1248 . 802) (undo-tree-id1249 . -12) (undo-tree-id1250 . 801) (undo-tree-id1251 . -812) (undo-tree-id1252 . 1) (undo-tree-id1253 . -813) (undo-tree-id1254 . -813) (undo-tree-id1255 . -813) (undo-tree-id1256 . -813) (undo-tree-id1257 . -813) (nil fontified t 2331 . 2332) (nil fontified t 2330 . 2331) (nil fontified t 2325 . 2330) (nil fontified t 2324 . 2325) (nil fontified t 2323 . 2324) (nil fontified t 2322 . 2323) (nil fontified t 2321 . 2322) (nil fontified t 2320 . 2321) (nil fontified t 2311 . 2320) (nil fontified t 2310 . 2311) (nil fontified t 2309 . 2310) (nil fontified t 2303 . 2309) (nil fontified t 2302 . 2303) (nil fontified t 2301 . 2302) (nil fontified t 2299 . 2301) (nil fontified t 2285 . 2299) (nil fontified t 2284 . 2285) (nil fontified t 2176 . 2284) (nil fontified t 2175 . 2176) (nil fontified t 2174 . 2175) (nil fontified t 2170 . 2174) (nil fontified t 2167 . 2170) (nil fontified t 2164 . 2167) (nil fontified t 2163 . 2164) (nil fontified t 2160 . 2163) (nil fontified t 2145 . 2160) (nil fontified t 2144 . 2145) (nil fontified t 2130 . 2144) (nil fontified t 2129 . 2130) (nil fontified t 2122 . 2129) (nil fontified t 2120 . 2122) (nil fontified t 2113 . 2120) (nil fontified t 2110 . 2113) (nil fontified t 2109 . 2110) (nil fontified t 2108 . 2109) (nil fontified t 2107 . 2108) (nil fontified t 2105 . 2107) (nil fontified t 2101 . 2105) (nil fontified t 2085 . 2101) (nil fontified t 2083 . 2085) (nil fontified t 2082 . 2083) (nil fontified t 2081 . 2082) (nil fontified t 2080 . 2081) (nil fontified t 2079 . 2080) (nil fontified t 2078 . 2079) (nil fontified t 2074 . 2078) (nil fontified t 2072 . 2074) (nil fontified t 2065 . 2072) (nil fontified t 2061 . 2065) (nil fontified t 2056 . 2061) (nil fontified t 2050 . 2056) (nil fontified t 2048 . 2050) (nil fontified t 2044 . 2048) (nil fontified t 2043 . 2044) (nil fontified t 2039 . 2043) (nil fontified t 2038 . 2039) (nil fontified t 2036 . 2038) (nil fontified t 2035 . 2036) (nil fontified t 2031 . 2035) (nil fontified t 2029 . 2031) (nil fontified t 2020 . 2029) (nil fontified t 2019 . 2020) (nil fontified t 2015 . 2019) (nil fontified t 1999 . 2015) (nil fontified t 1998 . 1999) (nil fontified t 1974 . 1998) (nil fontified t 1971 . 1974) (nil fontified t 1955 . 1971) (nil fontified nil 1954 . 1955) (nil fontified nil 1904 . 1954) (nil fontified nil 1901 . 1904) (nil fontified nil 1885 . 1901) (nil fontified t 1884 . 1885) (nil fontified t 1831 . 1884) (nil fontified t 1828 . 1831) (nil fontified t 1812 . 1828) (nil fontified t 1811 . 1812) (nil fontified t 1810 . 1811) (nil fontified t 1798 . 1810) (nil fontified t 1793 . 1798) (nil fontified t 1790 . 1793) (nil fontified t 1789 . 1790) (nil fontified t 1779 . 1789) (nil fontified t 1778 . 1779) (nil fontified t 1777 . 1778) (nil fontified t 1774 . 1777) (nil fontified t 1762 . 1774) (nil fontified t 1761 . 1762) (nil fontified t 1759 . 1761) (nil fontified t 1758 . 1759) (nil fontified t 1757 . 1758) (nil fontified t 1756 . 1757) (nil fontified t 1755 . 1756) (nil fontified t 1748 . 1755) (nil fontified t 1739 . 1748) (nil fontified t 1736 . 1739) (nil fontified t 1735 . 1736) (nil fontified t 1722 . 1735) (nil fontified t 1721 . 1722) (nil fontified t 1720 . 1721) (nil fontified t 1717 . 1720) (nil fontified t 1703 . 1717) (nil fontified t 1702 . 1703) (nil fontified t 1701 . 1702) (nil fontified t 1700 . 1701) (nil fontified t 1699 . 1700) (nil fontified t 1698 . 1699) (nil fontified t 1697 . 1698) (nil fontified t 1690 . 1697) (nil fontified t 1686 . 1690) (nil fontified t 1677 . 1686) (nil fontified t 1673 . 1677) (nil fontified t 1672 . 1673) (nil fontified t 1671 . 1672) (nil fontified t 1663 . 1671) (nil fontified t 1662 . 1663) (nil fontified t 1661 . 1662) (nil fontified t 1653 . 1661) (nil fontified t 1652 . 1653) (nil fontified t 1649 . 1652) (nil fontified t 1648 . 1649) (nil fontified t 1647 . 1648) (nil fontified t 1644 . 1647) (nil fontified t 1631 . 1644) (nil fontified t 1630 . 1631) (nil fontified t 1624 . 1630) (nil fontified t 1608 . 1624) (nil fontified t 1607 . 1608) (nil fontified t 1591 . 1607) (nil fontified t 1590 . 1591) (nil fontified t 1589 . 1590) (nil fontified t 1588 . 1589) (nil fontified t 1584 . 1588) (nil fontified t 1583 . 1584) (nil fontified t 1577 . 1583) (nil fontified t 1575 . 1577) (nil fontified t 1570 . 1575) (nil fontified t 1569 . 1570) (nil fontified t 1568 . 1569) (nil fontified t 1566 . 1568) (nil fontified t 1565 . 1566) (nil fontified t 1560 . 1565) (nil fontified t 1558 . 1560) (nil fontified t 1553 . 1558) (nil fontified t 1551 . 1553) (nil fontified t 1550 . 1551) (nil fontified t 1549 . 1550) (nil fontified t 1544 . 1549) (nil fontified t 1543 . 1544) (nil fontified t 1541 . 1543) (nil fontified t 1540 . 1541) (nil fontified t 1537 . 1540) (nil fontified t 1532 . 1537) (nil fontified t 1531 . 1532) (nil fontified t 1530 . 1531) (nil fontified t 1525 . 1530) (nil fontified t 1524 . 1525) (nil fontified t 1520 . 1524) (nil rear-nonsticky t 2332 . 2333)) (24169 42660 71465 0) 0 nil]) ((#("impl Frame {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        context(
            \"Ethernet frame\",
            map(
                tuple((Addr::parse, Addr::parse, EtherType::parse)),
                |(dst, src, ether_type)| Self {
                    dst,
                    src,
                    ether_type,
                },
            ),
        )(i)
    }
}
" 0 4 (face font-lock-keyword-face) 5 10 (face font-lock-type-face) 11 12 (face (rainbow-delimiters-depth-1-face)) 17 20 (face font-lock-keyword-face) 21 23 (face font-lock-keyword-face) 24 26 (face font-lock-function-name-face) 26 29 (face font-lock-function-name-face) 29 30 (face (rainbow-delimiters-depth-2-face)) 30 31 (face font-lock-variable-name-face) 33 38 (face font-lock-constant-face) 40 45 (face font-lock-type-face) 45 46 (face (rainbow-delimiters-depth-2-face)) 48 49 (syntax-table #1#) 50 55 (face font-lock-constant-face) 57 63 (face font-lock-type-face) 63 64 (face (rainbow-delimiters-depth-2-face)) 64 68 (face font-lock-type-face) 68 69 (face (rainbow-delimiters-depth-2-face)) 70 71 (face (rainbow-delimiters-depth-2-face)) 87 88 (face (rainbow-delimiters-depth-3-face)) 101 117 (face font-lock-string-face) 134 135 (face (rainbow-delimiters-depth-4-face)) 157 158 (face (rainbow-delimiters-depth-5-face)) 158 159 (face (rainbow-delimiters-depth-6-face)) 159 163 (face font-lock-type-face) 172 176 (face font-lock-type-face) 185 194 (face font-lock-type-face) 201 202 (face (rainbow-delimiters-depth-6-face)) 202 203 (face (rainbow-delimiters-depth-5-face)) 222 223 (face (rainbow-delimiters-depth-5-face)) 243 244 (face (rainbow-delimiters-depth-5-face)) 246 250 (face font-lock-type-face) 251 252 (face (rainbow-delimiters-depth-5-face)) 351 352 (face (rainbow-delimiters-depth-5-face)) 366 367 (face (rainbow-delimiters-depth-4-face)) 377 378 (face (rainbow-delimiters-depth-3-face)) 378 379 (face (rainbow-delimiters-depth-3-face)) 380 381 (face (rainbow-delimiters-depth-3-face)) 386 387 (face (rainbow-delimiters-depth-2-face)) 388 389 (face (rainbow-delimiters-depth-1-face))) . 1520) (undo-tree-id1273 . -253) (undo-tree-id1274 . -390)) ((1520 . 1910)) (24169 42659 975730 0) 0 nil]) ((37 . 38)) ((#("
" 0 1 (fontified t)) . 37)) (24169 42659 891654 0) 0 nil]) ((30 . 37)) ((#("packet;" 0 7 (fontified t)) . 30) (undo-tree-id1258 . -7) (undo-tree-id1259 . -7) (undo-tree-id1260 . -7) (undo-tree-id1261 . -7) (undo-tree-id1262 . -7) (undo-tree-id1263 . -7) (undo-tree-id1264 . -7) (undo-tree-id1265 . -7) (undo-tree-id1266 . -7)) (24169 42659 808847 0) 0 nil]) ((#(" " 0 1 (fontified t)) . 30) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1)) ((30 . 31)) (24169 42659 308385 0) 0 nil]) ((26 . 31)) nil (24169 42657 940449 0) 0 nil]) ((#("e" 0 1 (face font-lock-constant-face fontified t)) . -26) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -27) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) 28) nil (24169 41722 977783 0) 0 nil]) ((19 . 28)) nil (24169 41722 977785 0) 0 nil]) ((18 . 19) (t 24169 41661 531466 355000)) nil (24169 41722 977787 0) 0 nil]) ((1326 . 1331)) nil (24169 41661 522688 0) 0 nil]) ((#("c" 0 1 (face font-lock-constant-face fontified t)) . -1326) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("k" 0 1 (face font-lock-constant-face fontified t)) . -1327) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) 1328) nil (24169 41661 522740 0) 0 nil]) ((1325 . 1328)) nil (24169 41661 522744 0) 0 nil]) ((#("ipv4" 0 4 (face font-lock-constant-face fontified t)) . -1325) (undo-tree-id692 . -3) (undo-tree-id693 . -4) (undo-tree-id694 . -4) (undo-tree-id695 . -4) (undo-tree-id696 . -4) (undo-tree-id697 . -4) (undo-tree-id698 . -4) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) (undo-tree-id708 . -3) (undo-tree-id709 . -3) (undo-tree-id710 . -3) (undo-tree-id711 . -3) (undo-tree-id712 . -3) (undo-tree-id713 . -3) (undo-tree-id714 . -3) (undo-tree-id715 . -4) (undo-tree-id716 . -3) (undo-tree-id717 . -3) (undo-tree-id718 . -3) (undo-tree-id719 . -3) (undo-tree-id720 . -3) (undo-tree-id721 . -3) (undo-tree-id722 . -3) (undo-tree-id723 . -3) (undo-tree-id724 . -3) (undo-tree-id725 . -3) (undo-tree-id726 . -3) (undo-tree-id727 . -3) (undo-tree-id728 . -3) (undo-tree-id729 . -3) (undo-tree-id730 . -3) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -4) (undo-tree-id743 . -3) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) 1329 (t 24169 41626 365626 767000)) nil (24169 41661 522845 0) 0 nil]) ((nil rear-nonsticky nil 1353 . 1354) (nil fontified nil 1280 . 1354) (1280 . 1354)) nil (24169 41626 348796 0) 0 nil]) ((#("#[derive(Debug)]
pub struct Payload {
    
}" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 14 (face font-lock-preprocessor-face fontified t) 14 15 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t rear-nonsticky t) 16 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 35 (face font-lock-type-face fontified t) 35 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 38 (fontified t) 38 42 (fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1280) (undo-tree-id578 . -44) (undo-tree-id579 . -17) (undo-tree-id580 . -17) (undo-tree-id581 . -38) (undo-tree-id582 . -38) (undo-tree-id583 . -43) (undo-tree-id584 . -43) (undo-tree-id585 . -18) (undo-tree-id586 . -18) (undo-tree-id587 . -18) (undo-tree-id588 . -18) (undo-tree-id589 . -18) (undo-tree-id590 . -18) (undo-tree-id591 . -18) (undo-tree-id592 . -36) (undo-tree-id593 . -36) (undo-tree-id594 . -16) (undo-tree-id595 . -16) (undo-tree-id596 . -16) (undo-tree-id597 . -16) (undo-tree-id598 . -16) (undo-tree-id599 . -16) (undo-tree-id600 . -16) (undo-tree-id601 . -16) (undo-tree-id602 . -16) (undo-tree-id603 . -16) (undo-tree-id604 . -16) (undo-tree-id605 . -16) (undo-tree-id606 . -16) (undo-tree-id607 . -16) (undo-tree-id608 . -16) (undo-tree-id609 . -16) (undo-tree-id610 . -16) (undo-tree-id611 . -16) (undo-tree-id612 . -16) (undo-tree-id613 . -17) (undo-tree-id614 . -17) (undo-tree-id615 . -17) (undo-tree-id616 . -38) (undo-tree-id617 . -38) (undo-tree-id618 . -38) (undo-tree-id619 . -38) (undo-tree-id620 . -38) (undo-tree-id621 . -42) (undo-tree-id622 . -42) (undo-tree-id623 . -42) (undo-tree-id624 . -21) (undo-tree-id625 . -21) (undo-tree-id626 . -21) (undo-tree-id627 . -21) (undo-tree-id628 . -21) (undo-tree-id629 . -42) (undo-tree-id630 . -42) (undo-tree-id631 . -42) (undo-tree-id632 . -44) (undo-tree-id633 . -44) (undo-tree-id634 . -43) (undo-tree-id635 . -44) (undo-tree-id636 . -43) (undo-tree-id637 . -44) (undo-tree-id638 . -43) (undo-tree-id639 . -44) (undo-tree-id640 . -43) (undo-tree-id641 . -44) (undo-tree-id642 . -43) (undo-tree-id643 . -44) (undo-tree-id644 . -43) (undo-tree-id645 . -44) (undo-tree-id646 . -36) (undo-tree-id647 . -37) (undo-tree-id648 . -44) (undo-tree-id649 . -44) (undo-tree-id650 . -44) (undo-tree-id651 . -44) (undo-tree-id652 . -44) (undo-tree-id653 . -44) (undo-tree-id654 . -44) (undo-tree-id655 . -44) (undo-tree-id656 . -44) (undo-tree-id657 . -43) (undo-tree-id658 . -43) (undo-tree-id659 . -43) (undo-tree-id660 . -38) (undo-tree-id661 . -38) (undo-tree-id662 . -38) (undo-tree-id663 . -17) (undo-tree-id664 . -17) (undo-tree-id665 . -17)) nil (24169 41626 348988 0) 0 nil]) ((1278 . 1279) (t 24169 41611 505101 876000)) nil (24169 41626 348997 0) 0 nil]) ((nil rear-nonsticky nil 1294 . 1295) (nil fontified nil 1294 . 1295) (nil fontified nil 1293 . 1294) (nil fontified nil 1288 . 1293) (nil fontified nil 1287 . 1288) (nil fontified nil 1281 . 1287) (nil fontified nil 1280 . 1281) (nil fontified nil 1279 . 1280) (1279 . 1295)) nil (24169 41611 490662 0) 0 nil]) ((1301 . 1305) (1300 . 1302)) nil (24169 41611 490668 0) 0 nil]) ((1299 . 1301) (#("{" 0 1 (fontified nil)) . -1299) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (1281 . 1300)) nil (24169 41611 490682 0) 0 nil]) ((#("u" 0 1 (fontified t)) . -1281) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) 1282) nil (24169 41611 490696 0) 0 nil]) ((1280 . 1282)) nil (24169 41611 490697 0) 0 nil]) ((1279 . 1280)) nil (24169 41611 490698 0) 0 nil]) ((#("\\" 0 1 (fontified t)) . -1279) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) 1280) nil (24169 41611 490704 0) 0 nil]) ((1279 . 1280)) nil (24169 41611 490706 0) 0 nil]) ((1278 . 1279) (t 24169 41598 477515 257000)) nil (24169 41611 490707 0) 0 nil]) ((1378 . 1379)) nil (24169 41598 460023 0) 0 nil]) ((#(";" 0 1 (fontified t)) . -1378) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) 1379) nil (24169 41598 460056 0) 0 nil]) ((1371 . 1379)) nil (24169 41598 460058 0) 0 nil]) ((#("p" 0 1 (fontified t)) . -1371) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) 1372) nil (24169 41598 460076 0) 0 nil]) ((1371 . 1372)) nil (24169 41598 460078 0) 0 nil]) ((#("Payloud," 0 7 (face font-lock-type-face fontified t) 7 8 (fontified t)) . -1371) (undo-tree-id502 . -8) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -5) (undo-tree-id522 . -5) (undo-tree-id523 . -5) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -7) (undo-tree-id528 . -7) (undo-tree-id529 . -7) (undo-tree-id530 . -7) (undo-tree-id531 . -7) (undo-tree-id532 . -8) (undo-tree-id533 . -8) (undo-tree-id534 . -7) (undo-tree-id535 . -7) (undo-tree-id536 . -8) (undo-tree-id537 . -8) (undo-tree-id538 . -8) 1379) nil (24169 41598 460122 0) 0 nil]) ((1378 . 1379)) nil (24169 41598 460124 0) 0 nil]) ((1359 . 1378)) nil (24169 41598 460125 0) 0 nil]) ((#("b" 0 1 (fontified t)) . -1359) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("u" 0 1 (fontified t)) . -1360) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) 1361) nil (24169 41598 460153 0) 0 nil]) ((1358 . 1361)) nil (24169 41598 460156 0) 0 nil]) ((1353 . 1358) (t 24169 39103 410786 894000)) nil (24169 41598 460157 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -400) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) 401) nil (24169 39103 402673 0) 0 nil]) ((#("	println!(\"{}\", );" 0 1 (fontified t) 1 9 (face rust-builtin-formatting-macro-face fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face font-lock-string-face fontified t) 11 13 (face rust-string-interpolation-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 18 (fontified t)) . 401) (undo-tree-id288 . -18) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -9) (undo-tree-id326 . -9) (undo-tree-id327 . -10) (undo-tree-id328 . -10) (undo-tree-id329 . -14) (undo-tree-id330 . -14) (undo-tree-id331 . -14) (undo-tree-id332 . -14) (undo-tree-id333 . -14) (undo-tree-id334 . -14) (undo-tree-id335 . -14) (undo-tree-id336 . -14) (undo-tree-id337 . -14) (undo-tree-id338 . -18) (undo-tree-id339 . -18) (undo-tree-id340 . -18) (undo-tree-id341 . -18) (undo-tree-id342 . -18) (undo-tree-id343 . -18) (undo-tree-id344 . -17) (undo-tree-id345 . -17) (undo-tree-id346 . -14) (undo-tree-id347 . -17) (undo-tree-id348 . -14) (undo-tree-id349 . -17) (undo-tree-id350 . -14) (undo-tree-id351 . -17) (undo-tree-id352 . -14) (undo-tree-id353 . -17) (undo-tree-id354 . -11) (undo-tree-id355 . -14) (undo-tree-id356 . -11) (undo-tree-id357 . -14) (undo-tree-id358 . -14) (undo-tree-id359 . -17) (undo-tree-id360 . -14) (undo-tree-id361 . -17) (undo-tree-id362 . -9) (undo-tree-id363 . -10) (undo-tree-id364 . -17) (undo-tree-id365 . -14) (undo-tree-id366 . -14) (undo-tree-id367 . -11) (undo-tree-id368 . -14) (undo-tree-id369 . -14) (undo-tree-id370 . -11) (undo-tree-id371 . -11) (undo-tree-id372 . -11) (undo-tree-id373 . -11) (undo-tree-id374 . -11) (undo-tree-id375 . -11) (undo-tree-id376 . -11) (undo-tree-id377 . -11) (undo-tree-id378 . -11) (undo-tree-id379 . -11) (undo-tree-id380 . -12) (undo-tree-id381 . -12) (undo-tree-id382 . -12) (undo-tree-id383 . -12) (undo-tree-id384 . -12) (undo-tree-id385 . -12) (undo-tree-id386 . -12) (undo-tree-id387 . -12) (undo-tree-id388 . -12) (undo-tree-id389 . -12) (undo-tree-id390 . -12) (undo-tree-id391 . -12) (undo-tree-id392 . -12) (undo-tree-id393 . -12) (undo-tree-id394 . -12) (undo-tree-id395 . -12) (undo-tree-id396 . -12) (undo-tree-id397 . -12) (undo-tree-id398 . -12) (undo-tree-id399 . -12) (undo-tree-id400 . -12) (undo-tree-id401 . -12) (undo-tree-id402 . -12) (undo-tree-id403 . -12) (undo-tree-id404 . -12) (undo-tree-id405 . -12) (undo-tree-id406 . -14) (undo-tree-id407 . -12) (undo-tree-id408 . -12) (undo-tree-id409 . -12) (undo-tree-id410 . -12) (undo-tree-id411 . -12) (undo-tree-id412 . -12) (undo-tree-id413 . -12) (undo-tree-id414 . -12) (undo-tree-id415 . -12) (undo-tree-id416 . -12) (undo-tree-id417 . -12) (undo-tree-id418 . -13) (undo-tree-id419 . -13) (undo-tree-id420 . -13) (undo-tree-id421 . -13) (undo-tree-id422 . -13) (undo-tree-id423 . -14) (undo-tree-id424 . -14) (undo-tree-id425 . -13) (undo-tree-id426 . -14) (undo-tree-id427 . -14) (undo-tree-id428 . -14) (undo-tree-id429 . -14) (undo-tree-id430 . -15) (undo-tree-id431 . -15) (undo-tree-id432 . -15) (undo-tree-id433 . -16) (undo-tree-id434 . -16) (undo-tree-id435 . -16) (undo-tree-id436 . -16) (undo-tree-id437 . -16) (undo-tree-id438 . -16) (undo-tree-id439 . -11) (undo-tree-id440 . -12) (undo-tree-id441 . -16) (undo-tree-id442 . -16) (undo-tree-id443 . -16) (undo-tree-id444 . -18) (undo-tree-id445 . -18) (undo-tree-id446 . -18) (undo-tree-id447 . -18) (undo-tree-id448 . -18) (undo-tree-id449 . -18) (undo-tree-id450 . -18) (undo-tree-id451 . -18)) nil (24169 39103 402882 0) 0 nil]) ((415 . 417)) nil (24169 39103 402891 0) 0 nil]) ((413 . 414)) nil (24169 39103 402892 0) 0 nil]) ((#("{" 0 1 (face font-lock-string-face fontified nil)) . -413) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . 414) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -414) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) 415) nil (24169 39103 402922 0) 0 nil]) ((#("}" 0 1 (face font-lock-string-face fontified nil)) . 415) (undo-tree-id476 . -1) (414 . 415) (413 . 415) (#("{" 0 1 (face rust-string-interpolation-face fontified nil)) . -413) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (413 . 414) (412 . 414) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -412) (undo-tree-id479 . 1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (412 . 413) (t 24169 39091 552245 554000)) nil (24169 39103 402934 0) 0 nil]) ((414 . 415)) nil (24169 39091 537039 0) 0 nil]) ((#(";" 0 1 (fontified t)) . -413) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 414) nil (24169 39091 537066 0) 0 nil]) ((413 . 414)) nil (24169 39091 537069 0) 0 nil]) ((411 . 413) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -411) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (411 . 412) (410 . 412) (#("(" 0 1 (fontified nil)) . -410) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (410 . 411)) nil (24169 39091 537076 0) 0 nil]) ((apply yas--snippet-revive 402 410 #11=#s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #11#) (402 . 410) (#("println!" 0 8 (fontified nil)) . 402) (402 . 410) (#("println!" 0 8 (fontified nil)) . -402) (402 . 410) (#("println" 0 7 (fontified t)) . -402) (undo-tree-id77 . -7) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -7) (undo-tree-id108 . -7) (undo-tree-id109 . -7) (undo-tree-id110 . -7) (undo-tree-id111 . -7) (undo-tree-id112 . -7) (undo-tree-id113 . -7) (undo-tree-id114 . -7) 409) nil (24169 39091 537128 0) 0 nil]) ((402 . 409)) nil (24169 39091 537131 0) 0 nil]) ((400 . 402) (t 24169 39082 256392 575000)) nil (24169 39091 537132 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -400) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 401) nil (24169 39082 245590 0) 0 nil]) ((#("	pr" 0 3 (fontified t)) . 401) (undo-tree-id37 . -3) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -1) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3)) nil (24169 39082 245650 0) 0 nil]) ((402 . 404)) nil (24169 39082 245655 0) 0 nil]) ((400 . 402) (t 24167 41363 518913 352000)) nil (24169 39082 245657 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 401) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1)) nil (24167 41363 503029 0) 0 nil]) ((#("        // now just returning the Option `try_from()` returns." 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 62 (fontified t face font-lock-comment-face)) . 401) (undo-tree-id632 . -62)) nil (24167 41363 503035 0) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil nil ((156 . 157)) ((#("l" 0 1 (fontified t)) . 156) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (t 24167 41130 971487 811000)) (24167 41130 954869 0) 0 nil]) ((#("b" 0 1 (fontified t)) . -156) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) 157 (t 24167 41123 626735 365000)) ((156 . 157)) (24167 41357 988619 0) 0 nil]) ((434 . 435)) ((#("l" 0 1 (fontified t)) . 434)) (24167 41358 572803 0) 0 nil]) ((#("b" 0 1 (fontified t)) . -434) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id597 . -1) (undo-tree-id599 . -1) (undo-tree-id601 . -1) 435 (t 24167 40711 393357 546000)) ((434 . 435)) (24167 41358 970405 0) 0 nil] [nil ([nil nil ((414 . 418) (401 . 402) (404 . 405)) ((#("
" 0 1 (fontified nil)) . 404) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("	" 0 1 (fontified t)) . 401) (undo-tree-id581 . -1) (#("    " 0 4 (fontified t)) . 414) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4)) (24167 40781 433866 0) 0 nil]) ((401 . 404) (t 24167 40711 393357 546000)) ((#("ain" 0 3 (fontified t)) . 401) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3)) (24167 40781 434243 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 401) (undo-tree-id565 . -1)) ((401 . 402)) (24167 41359 324539 0) 0 nil]) ((#("        // now just returning the Option `try_from()` returns." 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 62 (fontified t face font-lock-comment-face)) . 401) (undo-tree-id568 . -1) (undo-tree-id570 . -62)) ((401 . 463)) (24167 41359 866576 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 401) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1)) nil (24167 41361 219006 0) 0 nil]) ((#("        // was: some error handling" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 35 (fontified t face font-lock-comment-face)) . 401) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -35) (t 24167 40708 40411 313000)) nil (24167 40711 386683 0) 0 nil]) ((nil rear-nonsticky nil 567 . 568) (nil fontified nil 317 . 568) (317 . 568)) nil (24167 40708 31621 0) 0 nil] [nil nil ((nil rear-nonsticky nil 548 . 549) (nil fontified nil 317 . 549) (317 . 549)) ((#("    pub fn parse(i: parse::Input) -> parse::Result<Option<Self>> {
        // was: some error handling
        // now just returning the Option `try_from()` returns.
        context(\"EtherType\", map(be_u16, Self::try_from))(i)
    }" 0 4 (fontified nil) 4 7 (fontified nil face font-lock-keyword-face) 7 8 (fontified nil) 8 10 (fontified nil face font-lock-keyword-face) 10 11 (fontified nil) 11 16 (fontified nil face font-lock-function-name-face) 16 17 (fontified nil face (rainbow-delimiters-depth-1-face)) 17 18 (fontified nil face font-lock-variable-name-face) 18 20 (fontified nil) 20 25 (fontified nil face font-lock-constant-face) 25 27 (fontified nil) 27 32 (fontified nil face font-lock-type-face) 32 33 (fontified nil face (rainbow-delimiters-depth-1-face)) 33 35 (fontified nil) 35 36 (fontified nil syntax-table #12=(1)) 36 37 (fontified nil) 37 42 (fontified nil face font-lock-constant-face) 42 44 (fontified nil) 44 50 (fontified nil face font-lock-type-face) 50 51 (fontified nil face (rainbow-delimiters-depth-1-face)) 51 57 (fontified nil face font-lock-type-face) 57 58 (fontified nil face (rainbow-delimiters-depth-2-face)) 58 62 (fontified nil face font-lock-type-face) 62 63 (fontified nil face (rainbow-delimiters-depth-2-face)) 63 64 (fontified nil face (rainbow-delimiters-depth-1-face)) 64 65 (fontified nil) 65 66 (fontified nil face (rainbow-delimiters-depth-1-face)) 66 75 (fontified nil) 75 78 (fontified nil face font-lock-comment-delimiter-face) 78 103 (fontified nil face font-lock-comment-face) 103 111 (fontified nil) 111 114 (fontified nil face font-lock-comment-delimiter-face) 114 166 (fontified nil face font-lock-comment-face) 166 181 (fontified nil) 181 182 (fontified nil face (rainbow-delimiters-depth-2-face)) 182 193 (fontified nil face font-lock-string-face) 193 198 (fontified nil) 198 199 (fontified nil face (rainbow-delimiters-depth-3-face)) 199 207 (fontified nil) 207 211 (fontified nil face font-lock-type-face) 211 221 (fontified nil) 221 222 (fontified nil face (rainbow-delimiters-depth-3-face)) 222 223 (fontified nil face (rainbow-delimiters-depth-2-face)) 223 224 (fontified nil face (rainbow-delimiters-depth-2-face)) 224 225 (fontified nil) 225 226 (fontified nil face (rainbow-delimiters-depth-2-face)) 226 227 (fontified nil) 227 231 (fontified nil) 231 232 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-1-face))) . 317) (undo-tree-id543 . -103) (undo-tree-id544 . -103) (undo-tree-id545 . -166) (undo-tree-id546 . -166) (undo-tree-id547 . -67) (undo-tree-id548 . -67) (undo-tree-id549 . -227) (undo-tree-id550 . -227) (undo-tree-id551 . -232) (undo-tree-id552 . -227) (undo-tree-id553 . 167) (undo-tree-id554 . -66) (undo-tree-id555 . 166) (undo-tree-id556 . -231) (undo-tree-id557 . 1) (undo-tree-id558 . -232) (undo-tree-id559 . -207) (undo-tree-id560 . -211) (undo-tree-id561 . -58) (undo-tree-id562 . -62) (undo-tree-id563 . -232) (nil fontified t 543 . 544) (nil fontified t 542 . 543) (nil fontified t 541 . 542) (nil fontified t 540 . 541) (nil fontified t 539 . 540) (nil fontified t 538 . 539) (nil fontified t 528 . 538) (nil fontified t 524 . 528) (nil fontified t 516 . 524) (nil fontified t 515 . 516) (nil fontified t 510 . 515) (nil fontified t 499 . 510) (nil fontified t 498 . 499) (nil fontified t 483 . 498) (nil fontified t 431 . 483) (nil fontified t 428 . 431) (nil fontified t 420 . 428) (nil fontified t 395 . 420) (nil fontified t 392 . 395) (nil fontified t 383 . 392) (nil fontified t 382 . 383) (nil fontified t 381 . 382) (nil fontified t 380 . 381) (nil fontified t 379 . 380) (nil fontified t 375 . 379) (nil fontified t 374 . 375) (nil fontified t 368 . 374) (nil fontified t 367 . 368) (nil fontified t 361 . 367) (nil fontified t 359 . 361) (nil fontified t 354 . 359) (nil fontified t 353 . 354) (nil fontified t 352 . 353) (nil fontified t 350 . 352) (nil fontified t 349 . 350) (nil fontified t 344 . 349) (nil fontified t 342 . 344) (nil fontified t 337 . 342) (nil fontified t 335 . 337) (nil fontified t 334 . 335) (nil fontified t 333 . 334) (nil fontified t 328 . 333) (nil fontified t 327 . 328) (nil fontified t 325 . 327) (nil fontified t 324 . 325) (nil fontified t 321 . 324) (nil fontified t 317 . 321) (nil rear-nonsticky t 548 . 549)) (24167 40704 202904 0) 0 nil]) ((316 . 317)) nil (24167 40704 203901 0) 0 nil]) ((#("
impl EtherType {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        let original_i = i;
        let (i, x) = context(\"EtherType\", be_u16)(i)?;

        match EtherType::try_from(x) {
            Some(typ) => Ok((i, typ)),
            None => {
                let msg = format!(\"unknown EtherType 0x{:04X}\", x);
                use nom::Offset;
                let err_slice = &original_i[..original_i.offset(i)];

                Err(nom::Err::Error(parse::Error::custom(err_slice, msg)))
            }
        }
    }
}" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 15 (fontified t face font-lock-type-face) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 22 (fontified t) 22 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 34 (fontified t face font-lock-function-name-face) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face font-lock-variable-name-face) 36 38 (fontified t) 38 43 (fontified t face font-lock-constant-face) 43 45 (fontified t) 45 50 (fontified t face font-lock-type-face) 50 51 (fontified t face (rainbow-delimiters-depth-2-face)) 51 53 (fontified t) 53 54 (syntax-table #12# fontified t) 54 55 (fontified t) 55 60 (fontified t face font-lock-constant-face) 60 62 (fontified t) 62 68 (fontified t face font-lock-type-face) 68 69 (fontified t face (rainbow-delimiters-depth-2-face)) 69 73 (fontified t face font-lock-type-face) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-variable-name-face) 99 113 (fontified t) 113 116 (fontified t face font-lock-keyword-face) 116 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-3-face)) 118 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-3-face)) 123 133 (fontified t) 133 134 (fontified t face (rainbow-delimiters-depth-3-face)) 134 145 (fontified t face font-lock-string-face) 145 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-3-face)) 154 155 (fontified t face (rainbow-delimiters-depth-3-face)) 155 156 (fontified t) 156 157 (fontified t face (rainbow-delimiters-depth-3-face)) 157 158 (fontified t face rust-question-mark-face) 158 160 (fontified t) 160 161 (fontified t) 161 169 (fontified t) 169 174 (fontified t face font-lock-keyword-face) 174 175 (fontified t) 175 184 (fontified t face font-lock-type-face) 184 194 (fontified t) 194 195 (fontified t face (rainbow-delimiters-depth-3-face)) 195 196 (fontified t) 196 197 (fontified t face (rainbow-delimiters-depth-3-face)) 197 198 (fontified t) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 200 (fontified t) 200 212 (fontified t) 212 216 (fontified t face font-lock-type-face) 216 217 (fontified t face (rainbow-delimiters-depth-4-face)) 217 220 (fontified t) 220 221 (fontified t face (rainbow-delimiters-depth-4-face)) 221 223 (fontified t) 223 224 (syntax-table #12# fontified t) 224 225 (fontified t) 225 227 (fontified t face font-lock-type-face) 227 228 (fontified t face (rainbow-delimiters-depth-4-face)) 228 229 (fontified t face (rainbow-delimiters-depth-5-face)) 229 235 (fontified t) 235 236 (fontified t face (rainbow-delimiters-depth-5-face)) 236 237 (fontified t face (rainbow-delimiters-depth-4-face)) 237 251 (fontified t) 251 255 (fontified t face font-lock-type-face) 255 257 (fontified t) 257 258 (syntax-table #12# fontified t) 258 259 (fontified t) 259 260 (fontified t face (rainbow-delimiters-depth-4-face)) 260 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-variable-name-face) 284 287 (fontified t) 287 294 (fontified t face rust-builtin-formatting-macro-face) 294 295 (fontified t face (rainbow-delimiters-depth-5-face)) 295 316 (fontified t face font-lock-string-face) 316 322 (fontified t face rust-string-interpolation-face) 322 323 (fontified t face font-lock-string-face) 323 326 (fontified t) 326 327 (fontified t face (rainbow-delimiters-depth-5-face)) 327 329 (fontified t) 329 345 (fontified t) 345 348 (fontified t face font-lock-keyword-face) 348 349 (fontified t) 349 352 (fontified t face font-lock-constant-face) 352 354 (fontified t) 354 360 (fontified t face font-lock-type-face) 360 362 (fontified t) 362 378 (fontified t) 378 381 (fontified t face font-lock-keyword-face) 381 382 (fontified t) 382 391 (fontified t face font-lock-variable-name-face) 391 405 (fontified t) 405 406 (fontified t face (rainbow-delimiters-depth-5-face)) 406 425 (fontified t) 425 426 (fontified t face (rainbow-delimiters-depth-6-face)) 426 427 (fontified t) 427 428 (fontified t face (rainbow-delimiters-depth-6-face)) 428 429 (fontified t face (rainbow-delimiters-depth-5-face)) 429 448 (fontified t) 448 451 (fontified t face font-lock-type-face) 451 452 (fontified t face (rainbow-delimiters-depth-5-face)) 452 455 (fontified t face font-lock-constant-face) 455 457 (fontified t) 457 460 (fontified t face font-lock-type-face) 460 462 (fontified t) 462 467 (fontified t face font-lock-type-face) 467 468 (fontified t face (rainbow-delimiters-depth-6-face)) 468 473 (fontified t face font-lock-constant-face) 473 475 (fontified t) 475 480 (fontified t face font-lock-type-face) 480 488 (fontified t) 488 489 (fontified t face (rainbow-delimiters-depth-7-face)) 489 503 (fontified t) 503 504 (fontified t face (rainbow-delimiters-depth-7-face)) 504 505 (fontified t face (rainbow-delimiters-depth-6-face)) 505 506 (fontified t face (rainbow-delimiters-depth-5-face)) 506 519 (fontified t) 519 520 (fontified t face (rainbow-delimiters-depth-4-face)) 520 529 (fontified t) 529 530 (fontified t face (rainbow-delimiters-depth-3-face)) 530 535 (fontified t) 535 536 (fontified t face (rainbow-delimiters-depth-2-face)) 536 537 (fontified t) 537 538 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-1-face))) . 316) (undo-tree-id327 . -538) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -77) (undo-tree-id331 . -77) (undo-tree-id332 . -18) (undo-tree-id333 . -18) (undo-tree-id334 . -531) (undo-tree-id335 . -531) (undo-tree-id336 . -161) (undo-tree-id337 . -161) (undo-tree-id338 . -160) (undo-tree-id339 . -160) (undo-tree-id340 . -105) (undo-tree-id341 . -105) (undo-tree-id342 . -537) (undo-tree-id343 . -537) (undo-tree-id344 . -329) (undo-tree-id345 . -329) (undo-tree-id346 . -1) (undo-tree-id347 . -261) (undo-tree-id348 . -261) (undo-tree-id349 . -239) (undo-tree-id350 . -239) (undo-tree-id351 . -200) (undo-tree-id352 . -200) (undo-tree-id353 . -362) (undo-tree-id354 . -362) (undo-tree-id355 . -431) (undo-tree-id356 . -431) (undo-tree-id357 . -432) (undo-tree-id358 . -432) (undo-tree-id359 . -507) (undo-tree-id360 . -507) (undo-tree-id361 . -521) (undo-tree-id362 . -521) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -18) (undo-tree-id388 . -18) (undo-tree-id389 . -18) (undo-tree-id390 . -18) (undo-tree-id391 . -18) (undo-tree-id392 . -18) (undo-tree-id393 . -18) (undo-tree-id394 . -18) (undo-tree-id395 . -18) (undo-tree-id396 . -18) (undo-tree-id397 . -18) (undo-tree-id398 . -18) (undo-tree-id399 . -18) (undo-tree-id400 . -18) (undo-tree-id401 . -18) (undo-tree-id402 . -18) (undo-tree-id403 . -18) (undo-tree-id404 . -18) (undo-tree-id405 . -18) (undo-tree-id406 . -18) (undo-tree-id407 . -77) (undo-tree-id408 . -77) (undo-tree-id409 . -77) (undo-tree-id410 . -105) (undo-tree-id411 . -105) (undo-tree-id412 . -105) (undo-tree-id413 . -105) (undo-tree-id414 . -105) (undo-tree-id415 . -105) (undo-tree-id416 . -105) (undo-tree-id417 . -160) (undo-tree-id418 . -160) (undo-tree-id419 . -160) (undo-tree-id420 . -161) (undo-tree-id421 . -161) (undo-tree-id422 . -161) (undo-tree-id423 . -200) (undo-tree-id424 . -200) (undo-tree-id425 . -200) (undo-tree-id426 . -239) (undo-tree-id427 . -239) (undo-tree-id428 . -239) (undo-tree-id429 . -261) (undo-tree-id430 . -261) (undo-tree-id431 . -261) (undo-tree-id432 . -261) (undo-tree-id433 . -261) (undo-tree-id434 . -261) (undo-tree-id435 . -261) (undo-tree-id436 . -329) (undo-tree-id437 . -329) (undo-tree-id438 . -329) (undo-tree-id439 . -362) (undo-tree-id440 . -362) (undo-tree-id441 . -362) (undo-tree-id442 . -431) (undo-tree-id443 . -431) (undo-tree-id444 . -431) (undo-tree-id445 . -432) (undo-tree-id446 . -432) (undo-tree-id447 . -432) (undo-tree-id448 . -507) (undo-tree-id449 . -507) (undo-tree-id450 . -507) (undo-tree-id451 . -521) (undo-tree-id452 . -521) (undo-tree-id453 . -521) (undo-tree-id454 . -531) (undo-tree-id455 . -531) (undo-tree-id456 . -531) (undo-tree-id457 . -536) (undo-tree-id458 . -536) (undo-tree-id459 . -535) (undo-tree-id460 . -536) (undo-tree-id461 . -535) (undo-tree-id462 . -536) (undo-tree-id463 . -535) (undo-tree-id464 . -536) (undo-tree-id465 . -535) (undo-tree-id466 . -536) (undo-tree-id467 . -322) (undo-tree-id468 . -323) (undo-tree-id469 . -322) (undo-tree-id470 . -323) (undo-tree-id471 . -535) (undo-tree-id472 . -536) (undo-tree-id473 . -535) (undo-tree-id474 . -536) (undo-tree-id475 . -529) (undo-tree-id476 . -530) (undo-tree-id477 . -519) (undo-tree-id478 . -520) (undo-tree-id479 . -321) (undo-tree-id480 . -322) (undo-tree-id481 . -316) (undo-tree-id482 . -317) (undo-tree-id483 . -259) (undo-tree-id484 . -260) (undo-tree-id485 . -198) (undo-tree-id486 . -199) (undo-tree-id487 . -75) (undo-tree-id488 . -76) (undo-tree-id489 . -536) (undo-tree-id490 . -538) (undo-tree-id491 . -538) (undo-tree-id492 . -537) (undo-tree-id493 . -538) (undo-tree-id494 . -537) (undo-tree-id495 . -538) (undo-tree-id496 . -537) (undo-tree-id497 . -538) (undo-tree-id498 . -537) (undo-tree-id499 . -538) (undo-tree-id500 . -322) (undo-tree-id501 . -323) (undo-tree-id502 . -322) (undo-tree-id503 . -323) (undo-tree-id504 . -537) (undo-tree-id505 . -538) (undo-tree-id506 . -537) (undo-tree-id507 . -538) (undo-tree-id508 . -535) (undo-tree-id509 . -536) (undo-tree-id510 . -529) (undo-tree-id511 . -530) (undo-tree-id512 . -519) (undo-tree-id513 . -520) (undo-tree-id514 . -321) (undo-tree-id515 . -322) (undo-tree-id516 . -316) (undo-tree-id517 . -317) (undo-tree-id518 . -259) (undo-tree-id519 . -260) (undo-tree-id520 . -198) (undo-tree-id521 . -199) (undo-tree-id522 . -75) (undo-tree-id523 . -76) (undo-tree-id524 . -16) (undo-tree-id525 . -17) (undo-tree-id526 . -538) (undo-tree-id527 . -538) (undo-tree-id528 . -538) (undo-tree-id529 . -538) (undo-tree-id530 . -538) (undo-tree-id531 . -538) (undo-tree-id532 . -537) (undo-tree-id533 . -537) (undo-tree-id534 . -537) (undo-tree-id535 . -537) (undo-tree-id536 . -537) (undo-tree-id537 . -431) (undo-tree-id538 . -431) (undo-tree-id539 . -431) (undo-tree-id540 . -160) (undo-tree-id541 . -160) (undo-tree-id542 . -160) (t 24167 40649 226917 439000)) nil (24167 40704 203184 0) 0 nil]) ((1775 . 1776)) nil (24167 40649 220981 0) 0 nil]) ((#(">" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1766) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . 1) (undo-tree-id321 . 1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 1767) nil (24167 40649 221027 0) 0 nil]) ((1765 . 1767) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -1765) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (1759 . 1766) (t 24167 40629 566059 5000)) nil (24167 40649 221033 0) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("
" 0 1 (fontified t)) . 1739) (undo-tree-id302 . -1) (undo-tree-id304 . -1) (undo-tree-id306 . -1)) ((1739 . 1740) (t 24167 40164 94462 965000)) (24167 40164 80041 0) 0 nil]) ((#("    pub ether_type: EtherType," 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 18 (fontified t face font-lock-variable-name-face) 18 20 (fontified t) 20 29 (fontified t face font-lock-type-face) 29 30 (fontified t)) . 1739) (t 24167 40153 444669 529000)) ((1739 . 1769)) (24167 40620 497291 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 2046) (undo-tree-id293 . -1)) ((2046 . 2047)) (24167 40620 951853 0) 0 nil]) ((#("                    ether_type," 0 15 (fontified t) 15 31 (fontified t)) . 2046) (undo-tree-id296 . -30) (undo-tree-id298 . -26) (undo-tree-id300 . -31) (t 24167 40150 614838 444000)) ((2046 . 2077)) (24167 40621 264921 0) 0 nil]) ((#("," 0 1 (fontified t)) . -1986) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (undo-tree-id177 . -1) (undo-tree-id179 . -1) (undo-tree-id181 . -1) (undo-tree-id183 . -1) (undo-tree-id185 . -1) (undo-tree-id187 . -1) (undo-tree-id189 . -1) (undo-tree-id191 . -1) (undo-tree-id193 . -1) (undo-tree-id195 . -1) (#(" " 0 1 (fontified t)) . -1987) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id199 . -1) (undo-tree-id201 . -1) (undo-tree-id203 . -1) (undo-tree-id205 . -1) (undo-tree-id207 . -1) (undo-tree-id209 . -1) (undo-tree-id211 . -1) (undo-tree-id213 . -1) (undo-tree-id215 . -1) 1988) ((1986 . 1988)) (24167 40621 687695 0) 0 nil]) ((#("ether_" 0 6 (fontified t)) . -1988) (undo-tree-id217 . -6) (undo-tree-id218 . -6) (undo-tree-id220 . -6) (undo-tree-id222 . -6) (undo-tree-id224 . -6) (undo-tree-id226 . -6) (undo-tree-id228 . -6) (undo-tree-id230 . -6) 1994) ((1988 . 1994)) (24167 40622 343784 0) 0 nil]) ((#("type" 0 4 (fontified t)) . -1994) (undo-tree-id231 . -4) (undo-tree-id233 . -4) 1998) ((1994 . 1998)) (24167 40622 775713 0) 0 nil]) ((#("," 0 1 (fontified t)) . -1956) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id238 . -1) (undo-tree-id240 . -1) (undo-tree-id242 . -1) (undo-tree-id244 . -1) (undo-tree-id246 . -1) (undo-tree-id248 . -1) (undo-tree-id250 . -1) (undo-tree-id252 . -1) (undo-tree-id254 . -1) (undo-tree-id256 . -1) (#(" " 0 1 (fontified t)) . -1957) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id260 . -1) (undo-tree-id262 . -1) (undo-tree-id264 . -1) (undo-tree-id266 . -1) (undo-tree-id268 . -1) (undo-tree-id270 . -1) (undo-tree-id272 . -1) (undo-tree-id274 . -1) 1958) ((1956 . 1958)) (24167 40623 439736 0) 0 nil]) ((#("EtherType::" 0 7 (fontified t face font-lock-type-face) 7 9 (fontified t face font-lock-type-face) 9 11 (fontified t)) . -1958) (undo-tree-id276 . -11) (undo-tree-id277 . -11) (undo-tree-id279 . -11) (undo-tree-id281 . -11) (undo-tree-id283 . -11) (undo-tree-id285 . -11) (undo-tree-id287 . -11) 1969) ((1958 . 1969)) (24167 40624 16000 0) 0 nil]) ((#("parse" 0 5 (fontified t)) . -1969) (undo-tree-id288 . -5) (undo-tree-id290 . -5) 1974) ((1969 . 1974)) (24167 40624 591734 0) 0 nil]) ((#("	" 0 1 (fontified nil)) . 476) (476 . 477) (476 . 477) (t 24167 39134 401289 111000)) ((#("
" 0 1 (fontified nil)) . 476) (#("	" 0 1 (fontified nil)) . 476) (476 . 477)) (24167 40625 115889 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 476) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1)) ((476 . 477)) (24167 40625 544240 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 476) (undo-tree-id308 . -1) (undo-tree-id309 . -1)) ((476 . 477)) (24167 40628 545076 0) 0 nil]) ((#("        // `i` is now the remaining input after reading the be_u16" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 66 (fontified t face font-lock-comment-face)) . 476)) ((476 . 542)) (24167 40628 336971 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 712) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1)) nil (24167 40627 408746 0) 0 nil]) ((#("                // we could hardcode `&original_i[..4]` but why bother?" 0 16 (fontified t) 16 19 (fontified t face font-lock-comment-delimiter-face) 19 71 (fontified t face font-lock-comment-face)) . 712) (undo-tree-id144 . -71) (t 24167 38389 648466 505000)) nil (24167 39128 332483 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 33) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1)) nil (24167 38389 642602 0) 0 nil]) ((#("use custom_debug_derive::CustomDebug;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 36 (fontified t face font-lock-type-face) 36 37 (fontified t)) . 33) (undo-tree-id135 . -4) (undo-tree-id136 . -23) (undo-tree-id137 . -37) (t 24167 38339 419786 334000)) nil (24167 38389 642613 0) 0 nil]) ((nil rear-nonsticky nil 1030 . 1031) (nil fontified nil 355 . 1031) (355 . 1031)) nil (24167 38339 403616 0) 0 nil]) ((#("impl EtherType {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        let original_i = i;
        let (i, x) = context(\"EtherType\", be_u16)(i)?;
        // `i` is now the remaining input after reading the be_u16

        match EtherType::try_from(x) {
            Some(typ) => Ok((i, typ)),
            None => {
                let msg = format!(\"unknown EtherType 0x{:04X}\", x);
                // we could hardcode `&original_i[..4]` but why bother?
                use nom::Offset;
                let err_slice = &original_i[..original_i.offset(i)];

                Err(nom::Err::Error(parse::Error::custom(err_slice, msg)))
            }
        }
    }
}" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 14 (fontified t face font-lock-type-face) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 21 (fontified t) 21 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 33 (fontified t face font-lock-function-name-face) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t face font-lock-variable-name-face) 35 37 (fontified t) 37 42 (fontified t face font-lock-constant-face) 42 44 (fontified t) 44 49 (fontified t face font-lock-type-face) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 52 (fontified t) 52 53 (syntax-table #12# fontified t) 53 54 (fontified t) 54 59 (fontified t face font-lock-constant-face) 59 61 (fontified t) 61 67 (fontified t face font-lock-type-face) 67 68 (fontified t face (rainbow-delimiters-depth-2-face)) 68 72 (fontified t face font-lock-type-face) 72 73 (fontified t face (rainbow-delimiters-depth-2-face)) 73 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-2-face)) 75 84 (fontified t) 84 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 98 (fontified t face font-lock-variable-name-face) 98 112 (fontified t) 112 115 (fontified t face font-lock-keyword-face) 115 116 (fontified t) 116 117 (fontified t face (rainbow-delimiters-depth-3-face)) 117 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-3-face)) 122 132 (fontified t) 132 133 (fontified t face (rainbow-delimiters-depth-3-face)) 133 144 (fontified t face font-lock-string-face) 144 146 (fontified t) 146 152 (fontified t) 152 153 (fontified t face (rainbow-delimiters-depth-3-face)) 153 154 (fontified t face (rainbow-delimiters-depth-3-face)) 154 155 (fontified t) 155 156 (fontified t face (rainbow-delimiters-depth-3-face)) 156 157 (fontified t face rust-question-mark-face) 157 159 (fontified t) 159 167 (fontified t) 167 170 (fontified t face font-lock-comment-delimiter-face) 170 226 (fontified t face font-lock-comment-face) 226 235 (fontified t) 235 240 (fontified t face font-lock-keyword-face) 240 241 (fontified t) 241 250 (fontified t face font-lock-type-face) 250 260 (fontified t) 260 261 (fontified t face (rainbow-delimiters-depth-3-face)) 261 262 (fontified t) 262 263 (fontified t face (rainbow-delimiters-depth-3-face)) 263 264 (fontified t) 264 265 (fontified t face (rainbow-delimiters-depth-3-face)) 265 278 (fontified t) 278 282 (fontified t face font-lock-type-face) 282 283 (fontified t face (rainbow-delimiters-depth-4-face)) 283 286 (fontified t) 286 287 (fontified t face (rainbow-delimiters-depth-4-face)) 287 289 (fontified t) 289 290 (syntax-table #12# fontified t) 290 291 (fontified t) 291 293 (fontified t face font-lock-type-face) 293 294 (fontified t face (rainbow-delimiters-depth-4-face)) 294 295 (fontified t face (rainbow-delimiters-depth-5-face)) 295 301 (fontified t) 301 302 (fontified t face (rainbow-delimiters-depth-5-face)) 302 303 (fontified t face (rainbow-delimiters-depth-4-face)) 303 317 (fontified t) 317 321 (fontified t face font-lock-type-face) 321 323 (fontified t) 323 324 (syntax-table #12# fontified t) 324 325 (fontified t) 325 326 (fontified t face (rainbow-delimiters-depth-4-face)) 326 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 350 (fontified t face font-lock-variable-name-face) 350 353 (fontified t) 353 360 (fontified t face rust-builtin-formatting-macro-face) 360 361 (fontified t face (rainbow-delimiters-depth-5-face)) 361 382 (fontified t face font-lock-string-face) 382 388 (fontified t face rust-string-interpolation-face) 388 389 (fontified t face font-lock-string-face) 389 392 (fontified t) 392 393 (fontified t face (rainbow-delimiters-depth-5-face)) 393 411 (fontified t) 411 414 (fontified t face font-lock-comment-delimiter-face) 414 467 (fontified t face font-lock-comment-face) 467 483 (fontified t) 483 486 (fontified t face font-lock-keyword-face) 486 487 (fontified t) 487 490 (fontified t face font-lock-constant-face) 490 492 (fontified t) 492 498 (fontified t face font-lock-type-face) 498 516 (fontified t) 516 519 (fontified t face font-lock-keyword-face) 519 520 (fontified t) 520 529 (fontified t face font-lock-variable-name-face) 529 543 (fontified t) 543 544 (fontified t face (rainbow-delimiters-depth-5-face)) 544 563 (fontified t) 563 564 (fontified t face (rainbow-delimiters-depth-6-face)) 564 565 (fontified t) 565 566 (fontified t face (rainbow-delimiters-depth-6-face)) 566 567 (fontified t face (rainbow-delimiters-depth-5-face)) 567 586 (fontified t) 586 589 (fontified t face font-lock-type-face) 589 590 (fontified t face (rainbow-delimiters-depth-5-face)) 590 593 (fontified t face font-lock-constant-face) 593 595 (fontified t) 595 598 (fontified t face font-lock-type-face) 598 600 (fontified t) 600 605 (fontified t face font-lock-type-face) 605 606 (fontified t face (rainbow-delimiters-depth-6-face)) 606 611 (fontified t face font-lock-constant-face) 611 613 (fontified t) 613 618 (fontified t face font-lock-type-face) 618 626 (fontified t) 626 627 (fontified t face (rainbow-delimiters-depth-7-face)) 627 641 (fontified t) 641 642 (fontified t face (rainbow-delimiters-depth-7-face)) 642 643 (fontified t face (rainbow-delimiters-depth-6-face)) 643 644 (fontified t face (rainbow-delimiters-depth-5-face)) 644 657 (fontified t) 657 658 (fontified t face (rainbow-delimiters-depth-4-face)) 658 659 (fontified t) 659 667 (fontified t) 667 668 (fontified t face (rainbow-delimiters-depth-3-face)) 668 673 (fontified t) 673 674 (fontified t face (rainbow-delimiters-depth-2-face)) 674 675 (fontified t) 675 676 (fontified t face (rainbow-delimiters-depth-1-face))) . 355) (undo-tree-id0 . -395) (undo-tree-id1 . -395) (undo-tree-id2 . -327) (undo-tree-id3 . -327) (undo-tree-id4 . -305) (undo-tree-id5 . -305) (undo-tree-id6 . -266) (undo-tree-id7 . -266) (undo-tree-id8 . -17) (undo-tree-id9 . -17) (undo-tree-id10 . -76) (undo-tree-id11 . -76) (undo-tree-id12 . -104) (undo-tree-id13 . -104) (undo-tree-id14 . -159) (undo-tree-id15 . -159) (undo-tree-id16 . -226) (undo-tree-id17 . -226) (undo-tree-id18 . -227) (undo-tree-id19 . -227) (undo-tree-id20 . -226) (undo-tree-id21 . -226) (undo-tree-id22 . -226) (undo-tree-id23 . -226) (undo-tree-id24 . -569) (undo-tree-id25 . -569) (undo-tree-id26 . -569) (undo-tree-id27 . -569) (undo-tree-id28 . -569) (undo-tree-id29 . -569) (undo-tree-id30 . -570) (undo-tree-id31 . -570) (undo-tree-id32 . -570) (undo-tree-id33 . -645) (undo-tree-id34 . -645) (undo-tree-id35 . -645) (undo-tree-id36 . -659) (undo-tree-id37 . -659) (undo-tree-id38 . -659) (undo-tree-id39 . -669) (undo-tree-id40 . -669) (undo-tree-id41 . -669) (undo-tree-id42 . -674) (undo-tree-id43 . -674) (undo-tree-id44 . -673) (undo-tree-id45 . -674) (undo-tree-id46 . -673) (undo-tree-id47 . -674) (undo-tree-id48 . -673) (undo-tree-id49 . -674) (undo-tree-id50 . -673) (undo-tree-id51 . -674) (undo-tree-id52 . -449) (undo-tree-id53 . -450) (undo-tree-id54 . -449) (undo-tree-id55 . -450) (undo-tree-id56 . -673) (undo-tree-id57 . -674) (undo-tree-id58 . -673) (undo-tree-id59 . -674) (undo-tree-id60 . -667) (undo-tree-id61 . -668) (undo-tree-id62 . -657) (undo-tree-id63 . -658) (undo-tree-id64 . -387) (undo-tree-id65 . -388) (undo-tree-id66 . -382) (undo-tree-id67 . -383) (undo-tree-id68 . -325) (undo-tree-id69 . -326) (undo-tree-id70 . -264) (undo-tree-id71 . -265) (undo-tree-id72 . -74) (undo-tree-id73 . -75) (undo-tree-id74 . -674) (undo-tree-id75 . -676) (undo-tree-id76 . -676) (undo-tree-id77 . -675) (undo-tree-id78 . -676) (undo-tree-id79 . -675) (undo-tree-id80 . -676) (undo-tree-id81 . -675) (undo-tree-id82 . -676) (undo-tree-id83 . -675) (undo-tree-id84 . -676) (undo-tree-id85 . -449) (undo-tree-id86 . -450) (undo-tree-id87 . -449) (undo-tree-id88 . -450) (undo-tree-id89 . -675) (undo-tree-id90 . -676) (undo-tree-id91 . -675) (undo-tree-id92 . -676) (undo-tree-id93 . -673) (undo-tree-id94 . -674) (undo-tree-id95 . -667) (undo-tree-id96 . -668) (undo-tree-id97 . -657) (undo-tree-id98 . -658) (undo-tree-id99 . -387) (undo-tree-id100 . -388) (undo-tree-id101 . -382) (undo-tree-id102 . -383) (undo-tree-id103 . -325) (undo-tree-id104 . -326) (undo-tree-id105 . -264) (undo-tree-id106 . -265) (undo-tree-id107 . -74) (undo-tree-id108 . -75) (undo-tree-id109 . -15) (undo-tree-id110 . -16) (undo-tree-id111 . -676) (undo-tree-id112 . -676) (undo-tree-id113 . -676) (undo-tree-id114 . -676) (undo-tree-id115 . -676) (undo-tree-id116 . -676) (undo-tree-id117 . -676) (undo-tree-id118 . -675) (undo-tree-id119 . -675) (undo-tree-id120 . -675) (undo-tree-id121 . -675) (undo-tree-id122 . -675) (undo-tree-id123 . -569) (undo-tree-id124 . -569) (undo-tree-id125 . -569) (undo-tree-id126 . -226) (undo-tree-id127 . -226) (undo-tree-id128 . -226) (undo-tree-id129 . -226) (undo-tree-id130 . -226) (undo-tree-id131 . -226) (t 24167 37441 340000 852000)) nil (24167 38339 403798 0) 0 nil]) ((nil rear-nonsticky nil 1030 . 1031) (nil fontified nil 355 . 1031) (355 . 1031)) nil (24167 37441 324931 0) 0 nil]) ((354 . 355)) nil (24167 37441 324936 0) 0 nil]) ((#("
impl EtherType {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        context(
            \"EtherType\",
            map(be_u16, |x| EtherType::try_from(x).unwrap()),
        )(i)
    }
}
}" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 15 (face font-lock-type-face fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 34 (face font-lock-function-name-face fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (face font-lock-variable-name-face fontified t) 36 38 (fontified t) 38 43 (face font-lock-constant-face fontified t) 43 45 (fontified t) 45 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 53 (fontified t) 53 54 (fontified t syntax-table #13=(1)) 54 55 (fontified t) 55 60 (face font-lock-constant-face fontified t) 60 62 (fontified t) 62 68 (face font-lock-type-face fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 73 (face font-lock-type-face fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-2-face) fontified t) 76 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-3-face) fontified t) 93 106 (fontified t) 106 117 (face font-lock-string-face fontified t) 117 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-4-face) fontified t) 135 147 (fontified t) 147 156 (face font-lock-type-face fontified t) 156 166 (fontified t) 166 167 (face (rainbow-delimiters-depth-5-face) fontified t) 167 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-5-face) fontified t) 169 176 (fontified t) 176 177 (face (rainbow-delimiters-depth-5-face) fontified t) 177 178 (face (rainbow-delimiters-depth-5-face) fontified t) 178 179 (face (rainbow-delimiters-depth-4-face) fontified t) 179 189 (fontified t) 189 190 (face (rainbow-delimiters-depth-3-face) fontified t) 190 191 (face (rainbow-delimiters-depth-3-face) fontified t) 191 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-3-face) fontified t) 193 198 (fontified t) 198 199 (face (rainbow-delimiters-depth-2-face) fontified t) 199 200 (fontified t) 200 201 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 201 202 (fontified t) 202 203 (face (rainbow-delimiters-unmatched-face) fontified t rear-nonsticky t)) . 354) (undo-tree-id491 . -203) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -202) (undo-tree-id497 . -202) (undo-tree-id498 . -200) (undo-tree-id499 . -200) (undo-tree-id500 . -194) (undo-tree-id501 . -194) (undo-tree-id502 . -181) (undo-tree-id503 . -181) (undo-tree-id504 . -119) (undo-tree-id505 . -119) (undo-tree-id506 . -18) (undo-tree-id507 . -18) (undo-tree-id508 . -77) (undo-tree-id509 . -77) (undo-tree-id510 . -94) (undo-tree-id511 . -94) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -18) (undo-tree-id540 . -18) (undo-tree-id541 . -18) (undo-tree-id542 . -18) (undo-tree-id543 . -18) (undo-tree-id544 . -18) (undo-tree-id545 . -18) (undo-tree-id546 . -18) (undo-tree-id547 . -18) (undo-tree-id548 . -18) (undo-tree-id549 . -18) (undo-tree-id550 . -18) (undo-tree-id551 . -18) (undo-tree-id552 . -18) (undo-tree-id553 . -18) (undo-tree-id554 . -18) (undo-tree-id555 . -18) (undo-tree-id556 . -18) (undo-tree-id557 . -18) (undo-tree-id558 . -77) (undo-tree-id559 . -77) (undo-tree-id560 . -77) (undo-tree-id561 . -94) (undo-tree-id562 . -94) (undo-tree-id563 . -94) (undo-tree-id564 . -119) (undo-tree-id565 . -119) (undo-tree-id566 . -119) (undo-tree-id567 . -181) (undo-tree-id568 . -181) (undo-tree-id569 . -181) (undo-tree-id570 . -194) (undo-tree-id571 . -194) (undo-tree-id572 . -194) (undo-tree-id573 . -200) (undo-tree-id574 . -200) (undo-tree-id575 . -200) (undo-tree-id576 . -202) (undo-tree-id577 . -202) (undo-tree-id578 . -202) (undo-tree-id579 . -202) (undo-tree-id580 . -202) (undo-tree-id581 . -203) (undo-tree-id582 . -203) (undo-tree-id583 . -202) (undo-tree-id584 . -203) (undo-tree-id585 . -202) (undo-tree-id586 . -203) (undo-tree-id587 . -202) (undo-tree-id588 . -203) (undo-tree-id589 . -202) (undo-tree-id590 . -203) (undo-tree-id591 . -145) (undo-tree-id592 . -146) (undo-tree-id593 . -145) (undo-tree-id594 . -146) (undo-tree-id595 . -202) (undo-tree-id596 . -203) (undo-tree-id597 . -202) (undo-tree-id598 . -203) (undo-tree-id599 . -200) (undo-tree-id600 . -201) (undo-tree-id601 . -198) (undo-tree-id602 . -199) (undo-tree-id603 . -75) (undo-tree-id604 . -76) (undo-tree-id605 . -16) (undo-tree-id606 . -17) (undo-tree-id607 . -203) (undo-tree-id608 . -1) (undo-tree-id609 . -203) (undo-tree-id610 . -203) (undo-tree-id611 . -203) (undo-tree-id612 . -203) (undo-tree-id613 . -203) (undo-tree-id614 . -202) (undo-tree-id615 . -202) (undo-tree-id616 . -202) (undo-tree-id617 . -202) (undo-tree-id618 . -202) (t 24167 37349 600517 265000)) nil (24167 37441 325099 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 355) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1)) nil (24167 37349 587311 0) 0 nil]) ((#("impl EtherType {" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 14 (face font-lock-type-face fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t)) . 355) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -16) (t 24167 37345 572823 82000)) nil (24167 37349 587328 0) 0 nil]) ((nil rear-nonsticky nil 571 . 572) (nil fontified nil 372 . 572) (372 . 572)) nil (24167 37345 559542 0) 0 nil]) ((#("    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        let original_i = i;
        let (i, x) = context(\"EtherType\", be_u16)(i)?;
        // `i` is now the remaining input after reading the be_u16

        match EtherType::try_from(x) {
            Some(typ) => Ok((i, typ)),
            None => {
                let msg = format!(\"unknown EtherType 0x{:04X}\", x);
                // we could hardcode `&original_i[..4]` but why bother?
                use nom::Offset;
                let err_slice = &original_i[..original_i.offset(i)];

                Err(nom::Err::Error(parse::Error::custom(err_slice, msg)))
            }
        }
    }" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-function-name-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 20 (fontified t) 20 25 (face font-lock-constant-face fontified t) 25 27 (fontified t) 27 32 (face font-lock-type-face fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 35 (fontified t) 35 36 (fontified t syntax-table #13#) 36 37 (fontified t) 37 42 (face font-lock-constant-face fontified t) 42 44 (fontified t) 44 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 55 (face font-lock-type-face fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 67 (fontified t) 67 70 (face font-lock-keyword-face fontified t) 70 71 (fontified t) 71 81 (face font-lock-variable-name-face fontified t) 81 95 (fontified t) 95 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-3-face) fontified t) 100 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-3-face) fontified t) 105 115 (fontified t) 115 116 (face (rainbow-delimiters-depth-3-face) fontified t) 116 127 (face font-lock-string-face fontified t) 127 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-3-face) fontified t) 136 137 (face (rainbow-delimiters-depth-3-face) fontified t) 137 138 (fontified t) 138 139 (face (rainbow-delimiters-depth-3-face) fontified t) 139 140 (face rust-question-mark-face fontified t) 140 150 (fontified t) 150 153 (face font-lock-comment-delimiter-face fontified t) 153 209 (face font-lock-comment-face fontified t) 209 218 (fontified t) 218 223 (face font-lock-keyword-face fontified t) 223 224 (fontified t) 224 233 (face font-lock-type-face fontified t) 233 243 (fontified t) 243 244 (face (rainbow-delimiters-depth-3-face) fontified t) 244 245 (fontified t) 245 246 (face (rainbow-delimiters-depth-3-face) fontified t) 246 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-3-face) fontified t) 248 257 (fontified t) 257 258 (fontified t) 258 261 (fontified t) 261 265 (face font-lock-type-face fontified t) 265 266 (face (rainbow-delimiters-depth-4-face) fontified t) 266 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-4-face) fontified t) 270 272 (fontified t) 272 273 (fontified t syntax-table #13#) 273 274 (fontified t) 274 276 (face font-lock-type-face fontified t) 276 277 (face (rainbow-delimiters-depth-4-face) fontified t) 277 278 (face (rainbow-delimiters-depth-5-face) fontified t) 278 284 (fontified t) 284 285 (face (rainbow-delimiters-depth-5-face) fontified t) 285 286 (face (rainbow-delimiters-depth-4-face) fontified t) 286 288 (fontified t) 288 300 (fontified t) 300 304 (face font-lock-type-face fontified t) 304 306 (fontified t) 306 307 (fontified t syntax-table #13#) 307 308 (fontified t) 308 309 (face (rainbow-delimiters-depth-4-face) fontified t) 309 326 (fontified t) 326 329 (face font-lock-keyword-face fontified t) 329 330 (fontified t) 330 333 (face font-lock-variable-name-face fontified t) 333 336 (fontified t) 336 343 (face rust-builtin-formatting-macro-face fontified t) 343 344 (face (rainbow-delimiters-depth-5-face) fontified t) 344 355 (face font-lock-string-face fontified t) 355 365 (fontified t face font-lock-string-face) 365 371 (fontified t face rust-string-interpolation-face) 371 372 (fontified t face font-lock-string-face) 372 375 (fontified t) 375 376 (fontified t face (rainbow-delimiters-depth-5-face)) 376 378 (fontified t) 378 394 (fontified t) 394 397 (face font-lock-comment-delimiter-face fontified t) 397 402 (face font-lock-comment-face fontified t) 402 403 (face font-lock-comment-face fontified t) 403 450 (face font-lock-comment-face fontified t) 450 466 (fontified t) 466 469 (face font-lock-keyword-face fontified t) 469 470 (fontified t) 470 473 (face font-lock-constant-face fontified t) 473 475 (fontified t) 475 481 (face font-lock-type-face fontified t) 481 483 (fontified t) 483 499 (fontified t) 499 502 (face font-lock-keyword-face fontified t) 502 503 (fontified t) 503 512 (face font-lock-variable-name-face fontified t) 512 526 (fontified t) 526 527 (face (rainbow-delimiters-depth-5-face) fontified t) 527 546 (fontified t) 546 547 (face (rainbow-delimiters-depth-6-face) fontified t) 547 548 (fontified t) 548 549 (face (rainbow-delimiters-depth-6-face) fontified t) 549 550 (face (rainbow-delimiters-depth-5-face) fontified t) 550 569 (fontified t) 569 572 (face font-lock-type-face fontified t) 572 573 (face (rainbow-delimiters-depth-5-face) fontified t) 573 576 (face font-lock-constant-face fontified t) 576 578 (fontified t) 578 581 (face font-lock-type-face fontified t) 581 583 (fontified t) 583 588 (face font-lock-type-face fontified t) 588 589 (face (rainbow-delimiters-depth-6-face) fontified t) 589 594 (face font-lock-constant-face fontified t) 594 596 (fontified t) 596 601 (face font-lock-type-face fontified t) 601 609 (fontified t) 609 610 (face (rainbow-delimiters-depth-7-face) fontified t) 610 624 (fontified t) 624 625 (face (rainbow-delimiters-depth-7-face) fontified t) 625 626 (face (rainbow-delimiters-depth-6-face) fontified t) 626 627 (face (rainbow-delimiters-depth-5-face) fontified t) 627 640 (fontified t) 640 641 (face (rainbow-delimiters-depth-4-face) fontified t) 641 650 (fontified t) 650 651 (face (rainbow-delimiters-depth-3-face) fontified t) 651 656 (fontified t) 656 657 (face (rainbow-delimiters-depth-2-face) fontified t)) . 372) (undo-tree-id291 . -288) (undo-tree-id292 . -288) (undo-tree-id293 . -249) (undo-tree-id294 . -249) (undo-tree-id295 . -657) (undo-tree-id296 . -210) (undo-tree-id297 . -210) (undo-tree-id298 . -450) (undo-tree-id299 . -450) (undo-tree-id300 . -59) (undo-tree-id301 . -59) (undo-tree-id302 . -87) (undo-tree-id303 . -87) (undo-tree-id304 . -142) (undo-tree-id305 . -142) (undo-tree-id306 . -310) (undo-tree-id307 . -310) (undo-tree-id308 . -378) (undo-tree-id309 . -378) (undo-tree-id310 . -209) (undo-tree-id311 . -209) (undo-tree-id312 . -483) (undo-tree-id313 . -483) (undo-tree-id314 . -552) (undo-tree-id315 . -552) (undo-tree-id316 . -553) (undo-tree-id317 . -553) (undo-tree-id318 . -628) (undo-tree-id319 . -628) (undo-tree-id320 . -642) (undo-tree-id321 . -642) (undo-tree-id322 . -652) (undo-tree-id323 . -652) (undo-tree-id324 . -652) (undo-tree-id325 . -652) (undo-tree-id326 . -652) (undo-tree-id327 . -657) (undo-tree-id328 . -657) (undo-tree-id329 . -656) (undo-tree-id330 . -657) (undo-tree-id331 . -656) (undo-tree-id332 . -657) (undo-tree-id333 . -656) (undo-tree-id334 . -657) (undo-tree-id335 . -656) (undo-tree-id336 . -657) (undo-tree-id337 . -432) (undo-tree-id338 . -433) (undo-tree-id339 . -432) (undo-tree-id340 . -433) (undo-tree-id341 . -656) (undo-tree-id342 . -657) (undo-tree-id343 . -656) (undo-tree-id344 . -657) (undo-tree-id345 . -650) (undo-tree-id346 . -651) (undo-tree-id347 . -640) (undo-tree-id348 . -641) (undo-tree-id349 . -370) (undo-tree-id350 . -371) (undo-tree-id351 . -365) (undo-tree-id352 . -366) (undo-tree-id353 . -308) (undo-tree-id354 . -309) (undo-tree-id355 . -247) (undo-tree-id356 . -248) (undo-tree-id357 . -57) (undo-tree-id358 . -58) (undo-tree-id359 . -657) (undo-tree-id360 . -657) (undo-tree-id361 . -657) (undo-tree-id362 . -657) (undo-tree-id363 . -657) (undo-tree-id364 . -656) (undo-tree-id365 . -657) (undo-tree-id366 . -656) (undo-tree-id367 . -657) (undo-tree-id368 . -656) (undo-tree-id369 . -657) (undo-tree-id370 . -656) (undo-tree-id371 . -657) (undo-tree-id372 . -432) (undo-tree-id373 . -433) (undo-tree-id374 . -432) (undo-tree-id375 . -433) (undo-tree-id376 . -656) (undo-tree-id377 . -657) (undo-tree-id378 . -656) (undo-tree-id379 . -657) (undo-tree-id380 . -650) (undo-tree-id381 . -651) (undo-tree-id382 . -640) (undo-tree-id383 . -641) (undo-tree-id384 . -370) (undo-tree-id385 . -371) (undo-tree-id386 . -365) (undo-tree-id387 . -366) (undo-tree-id388 . -308) (undo-tree-id389 . -309) (undo-tree-id390 . -247) (undo-tree-id391 . -248) (undo-tree-id392 . -57) (undo-tree-id393 . -58) (undo-tree-id394 . -657) (undo-tree-id395 . -552) (undo-tree-id396 . -552) (undo-tree-id397 . -552) (undo-tree-id398 . -552) (undo-tree-id399 . -209) (undo-tree-id400 . -209) (undo-tree-id401 . -209) (undo-tree-id402 . -209) (t 24167 37269 383873 586000)) nil (24167 37345 559693 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1916) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1)) nil (24167 37269 371060 0) 0 nil]) ((#("    #[debug(format = \"0x{:04x}\")]" 0 4 (fontified t) 4 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 6 11 (face font-lock-preprocessor-face fontified t) 11 12 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 12 21 (face font-lock-preprocessor-face fontified t) 21 27 (face font-lock-string-face fontified t) 27 31 (face font-lock-string-face fontified t) 31 32 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 32 33 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t)) . 1916) (undo-tree-id255 . -16) (undo-tree-id256 . -16) (undo-tree-id257 . -16) (undo-tree-id258 . -16) (undo-tree-id259 . -16) (undo-tree-id260 . -33)) nil (24167 37269 371072 0) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1858) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 1859) nil (24167 37269 371082 0) 0 nil]) ((nil rear-nonsticky nil 1858 . 1859) (nil fontified nil 1842 . 1859) (1842 . 1859)) nil (24167 37269 371085 0) 0 nil]) ((#("#[derive(CustomDebug)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 20 (face font-lock-preprocessor-face fontified t) 20 21 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 21 22 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 1842) (undo-tree-id268 . -22) (undo-tree-id269 . -22) (undo-tree-id270 . -22) (undo-tree-id271 . -21) (undo-tree-id272 . -22) (undo-tree-id273 . -21) (undo-tree-id274 . -22) (undo-tree-id275 . -21) (undo-tree-id276 . -22) (undo-tree-id277 . -21) (undo-tree-id278 . -22) (undo-tree-id279 . -21) (undo-tree-id280 . -22) (undo-tree-id281 . -21) (undo-tree-id282 . -22) (undo-tree-id283 . -1) (undo-tree-id284 . -2) (undo-tree-id285 . -22) (undo-tree-id286 . -22) (undo-tree-id287 . -22) (undo-tree-id288 . -22) (undo-tree-id289 . -22) (undo-tree-id290 . -22) (t 24167 37233 356046 999000)) nil (24167 37269 371112 0) 0 nil]) ((nil rear-nonsticky nil 2378 . 2379) (nil fontified nil 1990 . 2379) (1990 . 2379)) nil (24167 37233 343164 0) 0 nil]) ((#("impl Frame {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        context(
            \"Ethernet frame\",
            map(
                tuple((Addr::parse, Addr::parse, context(\"EtherType\", be_u16))),
                |(dst, src, ether_type)| Self {
                    dst,
                    src,
                    ether_type,
                },
            ),
        )(i)
    }
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 29 (face font-lock-function-name-face fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (face font-lock-variable-name-face fontified t) 31 33 (fontified t) 33 38 (face font-lock-constant-face fontified t) 38 40 (fontified t) 40 45 (face font-lock-type-face fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 48 (fontified t) 48 49 (fontified t syntax-table #13#) 49 50 (fontified t) 50 55 (face font-lock-constant-face fontified t) 55 57 (fontified t) 57 60 (face font-lock-type-face fontified t) 60 63 (face font-lock-type-face fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 68 (face font-lock-type-face fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t) 72 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-3-face) fontified t) 88 101 (fontified t) 101 117 (face font-lock-string-face fontified t) 117 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-4-face) fontified t) 135 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-5-face) fontified t) 158 159 (face (rainbow-delimiters-depth-6-face) fontified t) 159 163 (face font-lock-type-face fontified t) 163 172 (fontified t) 172 176 (face font-lock-type-face fontified t) 176 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-7-face) fontified t) 193 204 (face font-lock-string-face fontified t) 204 212 (fontified t) 212 213 (face (rainbow-delimiters-depth-7-face) fontified t) 213 214 (face (rainbow-delimiters-depth-6-face) fontified t) 214 215 (face (rainbow-delimiters-depth-5-face) fontified t) 215 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-5-face) fontified t) 235 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-5-face) fontified t) 256 258 (fontified t) 258 262 (face font-lock-type-face fontified t) 262 263 (fontified t) 263 264 (face (rainbow-delimiters-depth-5-face) fontified t) 264 284 (fontified t) 284 290 (fontified t) 290 363 (fontified t) 363 364 (face (rainbow-delimiters-depth-5-face) fontified t) 364 378 (fontified t) 378 379 (face (rainbow-delimiters-depth-4-face) fontified t) 379 389 (fontified t) 389 390 (face (rainbow-delimiters-depth-3-face) fontified t) 390 391 (face (rainbow-delimiters-depth-3-face) fontified t) 391 392 (fontified t) 392 393 (face (rainbow-delimiters-depth-3-face) fontified t) 393 398 (fontified t) 398 399 (face (rainbow-delimiters-depth-2-face) fontified t) 399 400 (fontified t) 400 401 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1990) (undo-tree-id132 . -315) (undo-tree-id133 . -315) (undo-tree-id134 . -347) (undo-tree-id135 . -347) (undo-tree-id136 . -366) (undo-tree-id137 . -366) (undo-tree-id138 . -401) (undo-tree-id139 . -265) (undo-tree-id140 . -265) (undo-tree-id141 . -290) (undo-tree-id142 . -290) (undo-tree-id143 . -89) (undo-tree-id144 . -89) (undo-tree-id145 . -217) (undo-tree-id146 . -217) (undo-tree-id147 . -72) (undo-tree-id148 . -72) (undo-tree-id149 . -13) (undo-tree-id150 . -13) (undo-tree-id151 . -136) (undo-tree-id152 . -136) (undo-tree-id153 . -119) (undo-tree-id154 . -119) (undo-tree-id155 . -394) (undo-tree-id156 . -394) (undo-tree-id157 . -400) (undo-tree-id158 . -400) (undo-tree-id159 . -381) (undo-tree-id160 . -381) (undo-tree-id161 . -13) (undo-tree-id162 . -13) (undo-tree-id163 . -13) (undo-tree-id164 . -13) (undo-tree-id165 . -13) (undo-tree-id166 . -13) (undo-tree-id167 . -13) (undo-tree-id168 . -72) (undo-tree-id169 . -72) (undo-tree-id170 . -72) (undo-tree-id171 . -89) (undo-tree-id172 . -89) (undo-tree-id173 . -89) (undo-tree-id174 . -119) (undo-tree-id175 . -119) (undo-tree-id176 . -119) (undo-tree-id177 . -136) (undo-tree-id178 . -136) (undo-tree-id179 . -136) (undo-tree-id180 . -136) (undo-tree-id181 . -136) (undo-tree-id182 . -136) (undo-tree-id183 . -136) (undo-tree-id184 . -217) (undo-tree-id185 . -217) (undo-tree-id186 . -217) (undo-tree-id187 . -265) (undo-tree-id188 . -265) (undo-tree-id189 . -265) (undo-tree-id190 . -290) (undo-tree-id191 . -290) (undo-tree-id192 . -290) (undo-tree-id193 . -315) (undo-tree-id194 . -315) (undo-tree-id195 . -315) (undo-tree-id196 . -347) (undo-tree-id197 . -347) (undo-tree-id198 . -347) (undo-tree-id199 . -366) (undo-tree-id200 . -366) (undo-tree-id201 . -366) (undo-tree-id202 . -381) (undo-tree-id203 . -381) (undo-tree-id204 . -381) (undo-tree-id205 . -394) (undo-tree-id206 . -394) (undo-tree-id207 . -394) (undo-tree-id208 . -400) (undo-tree-id209 . -400) (undo-tree-id210 . -400) (undo-tree-id211 . -400) (undo-tree-id212 . -400) (undo-tree-id213 . -401) (undo-tree-id214 . -401) (undo-tree-id215 . -400) (undo-tree-id216 . -401) (undo-tree-id217 . -400) (undo-tree-id218 . -401) (undo-tree-id219 . -400) (undo-tree-id220 . -401) (undo-tree-id221 . -400) (undo-tree-id222 . -401) (undo-tree-id223 . -256) (undo-tree-id224 . -257) (undo-tree-id225 . -256) (undo-tree-id226 . -257) (undo-tree-id227 . -400) (undo-tree-id228 . -401) (undo-tree-id229 . -400) (undo-tree-id230 . -401) (undo-tree-id231 . -398) (undo-tree-id232 . -399) (undo-tree-id233 . -363) (undo-tree-id234 . -364) (undo-tree-id235 . -263) (undo-tree-id236 . -264) (undo-tree-id237 . -70) (undo-tree-id238 . -71) (undo-tree-id239 . -11) (undo-tree-id240 . -12) (undo-tree-id241 . -401) (undo-tree-id242 . -401) (undo-tree-id243 . -401) (undo-tree-id244 . -401) (undo-tree-id245 . -401) (undo-tree-id246 . -401) (undo-tree-id247 . -400) (undo-tree-id248 . -400) (undo-tree-id249 . -400) (undo-tree-id250 . -400) (undo-tree-id251 . -400) (t 24167 37185 875227 769000)) nil (24167 37233 343332 0) 0 nil]) ((1976 . 1985)) nil (24167 37185 862954 0) 0 nil]) ((#("u16" 0 3 (face font-lock-type-face fontified t)) . -1976) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) 1979 (t 24167 37132 550413 616000)) nil (24167 37185 862979 0) 0 nil]) ((#("n" 0 1 (fontified t)) . -226) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 227) nil (24167 37132 538200 0) 0 nil]) ((nil rear-nonsticky nil 274 . 275) (nil fontified nil 228 . 275) (228 . 275)) nil (24167 37132 538206 0) 0 nil]) ((#("#[derive(CustomDebug)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 20 (face font-lock-preprocessor-face fontified t) 20 21 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 21 22 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 228) (undo-tree-id98 . -22) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -22) (undo-tree-id105 . -22) (undo-tree-id106 . -21) (undo-tree-id107 . -22) (undo-tree-id108 . -21) (undo-tree-id109 . -22) (undo-tree-id110 . -21) (undo-tree-id111 . -22) (undo-tree-id112 . -21) (undo-tree-id113 . -22) (undo-tree-id114 . -21) (undo-tree-id115 . -22) (undo-tree-id116 . -21) (undo-tree-id117 . -22) (undo-tree-id118 . -1) (undo-tree-id119 . -2) (undo-tree-id120 . -22) (undo-tree-id121 . -22) (undo-tree-id122 . -22) (undo-tree-id123 . -22) (undo-tree-id124 . -22) (undo-tree-id125 . -22)) nil (24167 37132 538243 0) 0 nil]) ((226 . 227) (t 24167 37121 120213 313000)) nil (24167 37132 538245 0) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . -104) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 105) nil (24167 37121 106667 0) 0 nil]) ((nil rear-nonsticky nil 104 . 105) (nil fontified nil 71 . 105) (71 . 105)) nil (24167 37121 106672 0) 0 nil]) ((70 . 71) (t 24167 37050 254828 578000)) nil (24167 37121 106674 0) 0 nil]) ((nil rear-nonsticky nil 971 . 972) (nil fontified nil 296 . 972) (296 . 972)) nil (24167 37050 250442 0) 0 nil]) ((294 . 296)) nil (24167 37050 250447 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -192) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 193 (t 24167 36837 650154 847000)) nil (24167 37050 250489 0) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 869 . 870) (nil fontified nil 194 . 870) (194 . 870)) ((#("impl EtherType {
    pub fn parse(i: parse::Input) -> parse::Result<Self> {
        let original_i = i;
        let (i, x) = context(\"EtherType\", be_u16)(i)?;
        // `i` is now the remaining input after reading the be_u16

        match EtherType::try_from(x) {
            Some(typ) => Ok((i, typ)),
            None => {
                let msg = format!(\"unknown EtherType 0x{:04X}\", x);
                // we could hardcode `&original_i[..4]` but why bother?
                use nom::Offset;
                let err_slice = &original_i[..original_i.offset(i)];

                Err(nom::Err::Error(parse::Error::custom(err_slice, msg)))
            }
        }
    }
}" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-1-face) fontified nil) 16 21 (fontified nil) 21 24 (face font-lock-keyword-face fontified nil) 24 25 (fontified nil) 25 27 (face font-lock-keyword-face fontified nil) 27 28 (fontified nil) 28 33 (face font-lock-function-name-face fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (face font-lock-variable-name-face fontified nil) 35 37 (fontified nil) 37 42 (face font-lock-constant-face fontified nil) 42 44 (fontified nil) 44 49 (face font-lock-type-face fontified nil) 49 50 (face (rainbow-delimiters-depth-2-face) fontified nil) 50 52 (fontified nil) 52 53 (syntax-table #13# fontified nil) 53 54 (fontified nil) 54 59 (face font-lock-constant-face fontified nil) 59 61 (fontified nil) 61 67 (face font-lock-type-face fontified nil) 67 68 (face (rainbow-delimiters-depth-2-face) fontified nil) 68 72 (face font-lock-type-face fontified nil) 72 73 (face (rainbow-delimiters-depth-2-face) fontified nil) 73 74 (fontified nil) 74 75 (face (rainbow-delimiters-depth-2-face) fontified nil) 75 84 (fontified nil) 84 87 (face font-lock-keyword-face fontified nil) 87 88 (fontified nil) 88 98 (face font-lock-variable-name-face fontified nil) 98 112 (fontified nil) 112 115 (face font-lock-keyword-face fontified nil) 115 116 (fontified nil) 116 117 (face (rainbow-delimiters-depth-3-face) fontified nil) 117 121 (fontified nil) 121 122 (face (rainbow-delimiters-depth-3-face) fontified nil) 122 132 (fontified nil) 132 133 (face (rainbow-delimiters-depth-3-face) fontified nil) 133 144 (face font-lock-string-face fontified nil) 144 152 (fontified nil) 152 153 (face (rainbow-delimiters-depth-3-face) fontified nil) 153 154 (face (rainbow-delimiters-depth-3-face) fontified nil) 154 155 (fontified nil) 155 156 (face (rainbow-delimiters-depth-3-face) fontified nil) 156 157 (face rust-question-mark-face fontified nil) 157 167 (fontified nil) 167 170 (face font-lock-comment-delimiter-face fontified nil) 170 226 (face font-lock-comment-face fontified nil) 226 235 (fontified nil) 235 240 (face font-lock-keyword-face fontified nil) 240 241 (fontified nil) 241 250 (face font-lock-type-face fontified nil) 250 260 (fontified nil) 260 261 (face (rainbow-delimiters-depth-3-face) fontified nil) 261 262 (fontified nil) 262 263 (face (rainbow-delimiters-depth-3-face) fontified nil) 263 264 (fontified nil) 264 265 (face (rainbow-delimiters-depth-3-face) fontified nil) 265 278 (fontified nil) 278 282 (face font-lock-type-face fontified nil) 282 283 (face (rainbow-delimiters-depth-4-face) fontified nil) 283 286 (fontified nil) 286 287 (face (rainbow-delimiters-depth-4-face) fontified nil) 287 289 (fontified nil) 289 290 (syntax-table #13# fontified nil) 290 291 (fontified nil) 291 293 (face font-lock-type-face fontified nil) 293 294 (face (rainbow-delimiters-depth-4-face) fontified nil) 294 295 (face (rainbow-delimiters-depth-5-face) fontified nil) 295 301 (fontified nil) 301 302 (face (rainbow-delimiters-depth-5-face) fontified nil) 302 303 (face (rainbow-delimiters-depth-4-face) fontified nil) 303 317 (fontified nil) 317 321 (face font-lock-type-face fontified nil) 321 323 (fontified nil) 323 324 (syntax-table #13# fontified nil) 324 325 (fontified nil) 325 326 (face (rainbow-delimiters-depth-4-face) fontified nil) 326 343 (fontified nil) 343 346 (face font-lock-keyword-face fontified nil) 346 347 (fontified nil) 347 350 (face font-lock-variable-name-face fontified nil) 350 353 (fontified nil) 353 360 (face rust-builtin-formatting-macro-face fontified nil) 360 361 (face (rainbow-delimiters-depth-5-face) fontified nil) 361 382 (face font-lock-string-face fontified nil) 382 388 (face rust-string-interpolation-face fontified nil) 388 389 (face font-lock-string-face fontified nil) 389 392 (fontified nil) 392 393 (face (rainbow-delimiters-depth-5-face) fontified nil) 393 411 (fontified nil) 411 414 (face font-lock-comment-delimiter-face fontified nil) 414 467 (face font-lock-comment-face fontified nil) 467 483 (fontified nil) 483 486 (face font-lock-keyword-face fontified nil) 486 487 (fontified nil) 487 490 (face font-lock-constant-face fontified nil) 490 492 (fontified nil) 492 498 (face font-lock-type-face fontified nil) 498 500 (fontified nil) 500 516 (fontified nil) 516 519 (face font-lock-keyword-face fontified nil) 519 520 (fontified nil) 520 529 (face font-lock-variable-name-face fontified nil) 529 543 (fontified nil) 543 544 (face (rainbow-delimiters-depth-5-face) fontified nil) 544 563 (fontified nil) 563 564 (face (rainbow-delimiters-depth-6-face) fontified nil) 564 565 (fontified nil) 565 566 (face (rainbow-delimiters-depth-6-face) fontified nil) 566 567 (face (rainbow-delimiters-depth-5-face) fontified nil) 567 586 (fontified nil) 586 589 (face font-lock-type-face fontified nil) 589 590 (face (rainbow-delimiters-depth-5-face) fontified nil) 590 593 (face font-lock-constant-face fontified nil) 593 595 (fontified nil) 595 598 (face font-lock-type-face fontified nil) 598 600 (fontified nil) 600 605 (face font-lock-type-face fontified nil) 605 606 (face (rainbow-delimiters-depth-6-face) fontified nil) 606 611 (face font-lock-constant-face fontified nil) 611 613 (fontified nil) 613 618 (face font-lock-type-face fontified nil) 618 626 (fontified nil) 626 627 (face (rainbow-delimiters-depth-7-face) fontified nil) 627 641 (fontified nil) 641 642 (face (rainbow-delimiters-depth-7-face) fontified nil) 642 643 (face (rainbow-delimiters-depth-6-face) fontified nil) 643 644 (face (rainbow-delimiters-depth-5-face) fontified nil) 644 657 (fontified nil) 657 658 (face (rainbow-delimiters-depth-4-face) fontified nil) 658 667 (fontified nil) 667 668 (face (rainbow-delimiters-depth-3-face) fontified nil) 668 673 (fontified nil) 673 674 (face (rainbow-delimiters-depth-2-face) fontified nil) 674 675 (fontified nil) 675 676 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 194) (undo-tree-id0 . -76) (undo-tree-id1 . -76) (undo-tree-id2 . -104) (undo-tree-id3 . -104) (undo-tree-id4 . -159) (undo-tree-id5 . -159) (undo-tree-id6 . -226) (undo-tree-id7 . -226) (undo-tree-id8 . -659) (undo-tree-id9 . -659) (undo-tree-id10 . -645) (undo-tree-id11 . -645) (undo-tree-id12 . -227) (undo-tree-id13 . -227) (undo-tree-id14 . -266) (undo-tree-id15 . -266) (undo-tree-id16 . -305) (undo-tree-id17 . -305) (undo-tree-id18 . -327) (undo-tree-id19 . -327) (undo-tree-id20 . -395) (undo-tree-id21 . -395) (undo-tree-id22 . -467) (undo-tree-id23 . -467) (undo-tree-id24 . -569) (undo-tree-id25 . -569) (undo-tree-id26 . -500) (undo-tree-id27 . -500) (undo-tree-id28 . -570) (undo-tree-id29 . -570) (undo-tree-id30 . -17) (undo-tree-id31 . -17) (undo-tree-id32 . -226) (undo-tree-id33 . -252) (undo-tree-id34 . -260) (undo-tree-id35 . -620) (undo-tree-id36 . -626) (undo-tree-id37 . -226) (undo-tree-id38 . -226) (nil fontified t 868 . 869) (nil fontified t 867 . 868) (nil fontified t 862 . 867) (nil fontified t 861 . 862) (nil fontified t 852 . 861) (nil fontified t 851 . 852) (nil fontified t 838 . 851) (nil fontified t 837 . 838) (nil fontified t 836 . 837) (nil fontified t 835 . 836) (nil fontified t 821 . 835) (nil fontified t 820 . 821) (nil fontified t 812 . 820) (nil fontified t 807 . 812) (nil fontified t 805 . 807) (nil fontified t 800 . 805) (nil fontified t 799 . 800) (nil fontified t 794 . 799) (nil fontified t 792 . 794) (nil fontified t 789 . 792) (nil fontified t 787 . 789) (nil fontified t 784 . 787) (nil fontified t 783 . 784) (nil fontified t 780 . 783) (nil fontified t 761 . 780) (nil fontified t 760 . 761) (nil fontified t 759 . 760) (nil fontified t 758 . 759) (nil fontified t 757 . 758) (nil fontified t 738 . 757) (nil fontified t 737 . 738) (nil fontified t 723 . 737) (nil fontified t 714 . 723) (nil fontified t 713 . 714) (nil fontified t 710 . 713) (nil fontified t 694 . 710) (nil fontified t 692 . 694) (nil fontified t 686 . 692) (nil fontified t 684 . 686) (nil fontified t 681 . 684) (nil fontified t 680 . 681) (nil fontified t 677 . 680) (nil fontified t 661 . 677) (nil fontified t 608 . 661) (nil fontified t 605 . 608) (nil fontified t 587 . 605) (nil fontified t 586 . 587) (nil fontified t 583 . 586) (nil fontified t 582 . 583) (nil fontified t 576 . 582) (nil fontified t 555 . 576) (nil fontified t 554 . 555) (nil fontified t 547 . 554) (nil fontified t 544 . 547) (nil fontified t 541 . 544) (nil fontified t 540 . 541) (nil fontified t 537 . 540) (nil fontified t 520 . 537) (nil fontified t 519 . 520) (nil fontified t 518 . 519) (nil fontified t 517 . 518) (nil fontified t 515 . 517) (nil fontified t 511 . 515) (nil fontified t 497 . 511) (nil fontified t 496 . 497) (nil fontified t 495 . 496) (nil fontified t 489 . 495) (nil fontified t 488 . 489) (nil fontified t 487 . 488) (nil fontified t 485 . 487) (nil fontified t 484 . 485) (nil fontified t 483 . 484) (nil fontified t 481 . 483) (nil fontified t 480 . 481) (nil fontified t 477 . 480) (nil fontified t 476 . 477) (nil fontified t 472 . 476) (nil fontified t 459 . 472) (nil fontified t 458 . 459) (nil fontified t 457 . 458) (nil fontified t 456 . 457) (nil fontified t 455 . 456) (nil fontified t 454 . 455) (nil fontified t 444 . 454) (nil fontified t 435 . 444) (nil fontified t 434 . 435) (nil fontified t 429 . 434) (nil fontified t 420 . 429) (nil fontified t 364 . 420) (nil fontified t 361 . 364) (nil fontified t 351 . 361) (nil fontified t 350 . 351) (nil fontified t 349 . 350) (nil fontified t 348 . 349) (nil fontified t 347 . 348) (nil fontified t 346 . 347) (nil fontified t 338 . 346) (nil fontified t 327 . 338) (nil fontified t 326 . 327) (nil fontified t 316 . 326) (nil fontified t 315 . 316) (nil fontified t 311 . 315) (nil fontified t 310 . 311) (nil fontified t 309 . 310) (nil fontified t 306 . 309) (nil fontified t 292 . 306) (nil fontified t 282 . 292) (nil fontified t 281 . 282) (nil fontified t 278 . 281) (nil fontified t 269 . 278) (nil fontified t 268 . 269) (nil fontified t 267 . 268) (nil fontified t 266 . 267) (nil fontified t 262 . 266) (nil fontified t 261 . 262) (nil fontified t 255 . 261) (nil fontified t 253 . 255) (nil fontified t 248 . 253) (nil fontified t 247 . 248) (nil fontified t 246 . 247) (nil fontified t 244 . 246) (nil fontified t 243 . 244) (nil fontified t 238 . 243) (nil fontified t 236 . 238) (nil fontified t 231 . 236) (nil fontified t 229 . 231) (nil fontified t 228 . 229) (nil fontified t 227 . 228) (nil fontified t 222 . 227) (nil fontified t 221 . 222) (nil fontified t 219 . 221) (nil fontified t 218 . 219) (nil fontified t 215 . 218) (nil fontified t 210 . 215) (nil fontified t 209 . 210) (nil fontified t 208 . 209) (nil fontified t 199 . 208) (nil fontified t 198 . 199) (nil fontified t 194 . 198) (nil rear-nonsticky t 869 . 870)) (24167 37043 689656 0) 0 nil]) ((193 . 195) (t 24167 36837 650154 847000)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 193) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1)) (24167 37043 690738 0) 0 nil] [nil nil ((#("crate::" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) . -5) (undo-tree-id0 . -7) (undo-tree-id1 . -5) (undo-tree-id2 . -5) (undo-tree-id3 . -7) (undo-tree-id4 . -7) 12 (t 24167 34069 212581 630000)) ((5 . 12) (t 24167 36767 133970 826000)) (24167 36767 121492 0) 0 nil]) nil nil (24167 37044 189385 0) 0 nil] #14# 106169 391 nil)